export interface FxError extends Error {
    /**
     * Custom error details.
     */
    innerError?: any;
    /**
     * Source name of error. (plugin name, eg: tab-scaffhold-plugin)
     */
    source: string;
    /**
     * Time of error.
     */
    timestamp: Date;
    userData?: any;
}
export interface ErrorOptionBase {
    source?: string;
    name?: string;
    message?: string;
    error?: Error;
    userData?: any;
    notificationMessage?: string;
}
export interface UserErrorOptions extends ErrorOptionBase {
    helpLink?: string;
}
export interface SystemErrorOptions extends ErrorOptionBase {
    issueLink?: string;
}
/**
 * Users can recover by themselves, e.g., users input invalid app names.
 */
export declare class UserError extends Error implements FxError {
    /**
     * Custom error details .
     */
    innerError?: any;
    /**
     * Source name of error. (plugin name, eg: tab-scaffold-plugin)
     */
    source: string;
    /**
     * Time of error.
     */
    timestamp: Date;
    /**
     * A wiki website that shows mapping relationship between error names, descriptions, and fix solutions.
     */
    helpLink?: string;
    /**
     * data that only be reported to github issue  manually by user and will not be reported as telemetry data
     */
    userData?: string;
    /**
     * customized message instead of error message which will be shown in notification box
     */
    notificationMessage?: string;
    constructor(error: Error, source?: string, name?: string, helpLink?: string, notificationMessage?: string);
    constructor(opt: UserErrorOptions);
    constructor(name: string, message: string, source: string, stack?: string, helpLink?: string, innerError?: any, notificationMessage?: string);
}
/**
 * Users cannot handle it by themselves.
 */
export declare class SystemError extends Error implements FxError {
    /**
     * Custom error details.
     */
    innerError?: any;
    /**
     * Source name of error. (plugin name, eg: tab-scaffold-plugin)
     */
    source: string;
    /**
     * Time of error.
     */
    timestamp: Date;
    /**
     * A github issue page where users can submit a new issue.
     */
    issueLink?: string;
    /**
     * data that only be reported to github issue  manually by user and will not be reported as telemetry data
     */
    userData?: string;
    /**
     * customized message instead of error message which will be shown in notification box
     */
    notificationMessage?: string;
    constructor(error: Error, source?: string, name?: string, issueLink?: string, notificationMessage?: string);
    constructor(opt: SystemErrorOptions);
    constructor(name: string, message: string, source: string, stack?: string, issueLink?: string, innerError?: any, notificationMessage?: string);
}
/**
 *
 * @param e Original error
 * @param source Source name of error. (plugin name, eg: tab-scaffhold-plugin)
 * @param name Name of error. (error name, eg: Dependency not found)
 * @param helpLink A wiki website that shows mapping relationship between error names, descriptions, and fix solutions.
 * @param innerError Custom error details.
 *
 * @returns UserError.
 */
export declare function returnUserError(e: Error, source: string, name: string, helpLink?: string, innerError?: any): UserError;
/**
 *
 * @param e Original error
 * @param source Source name of error. (plugin name, eg: tab-scaffhold-plugin)
 * @param name Name of error. (error name, eg: Dependency not found)
 * @param issueLink A github issue page where users can submit a new issue.
 * @param innerError Custom error details.
 *
 * @returns SystemError.
 */
export declare function returnSystemError(e: Error, source: string, name: string, issueLink?: string, innerError?: any): SystemError;
export declare function assembleError(e: any, source?: string): FxError;
export declare class UnknownError extends SystemError {
    constructor(source?: string, message?: string);
}
export declare const UserCancelError: UserError;
export declare class EmptyOptionError extends SystemError {
    constructor(source?: string);
}
export declare class PathAlreadyExistsError extends UserError {
    constructor(source: string, path: string);
}
export declare class PathNotExistError extends UserError {
    constructor(source: string, path: string);
}
export declare class ObjectAlreadyExistsError extends UserError {
    constructor(source: string, name: string);
}
export declare class ObjectNotExistError extends UserError {
    constructor(source: string, name: string);
}
export declare class UndefinedError extends SystemError {
    constructor(source: string, name: string);
}
export declare class NotImplementedError extends SystemError {
    constructor(source: string, method: string);
}
export declare class WriteFileError extends SystemError {
    constructor(source: string, e: Error);
}
export declare class ReadFileError extends SystemError {
    constructor(source: string, e: Error);
}
export declare class NoProjectOpenedError extends UserError {
    constructor(source: string);
}
export declare class ConcurrentError extends UserError {
    constructor(source: string);
}
export declare class InvalidInputError extends UserError {
    constructor(source: string, name: string, reason?: string);
}
export declare class InvalidProjectError extends UserError {
    constructor(source: string, msg?: string);
}
export declare class InvalidObjectError extends UserError {
    constructor(source: string, name: string, reason?: string);
}
export declare class InvalidOperationError extends UserError {
    constructor(source: string, name: string, reason?: string);
}
//# sourceMappingURL=error.d.ts.map