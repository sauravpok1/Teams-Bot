import { Platform, Stage, VsCodeEnv } from "./constants";
export declare type Json = Record<string, any>;
export declare type ConfigValue = any;
export declare type PluginIdentity = string;
export declare type PluginConfig = ConfigMap;
export declare type ReadonlyPluginConfig = ReadonlyMap<string, ConfigValue>;
export declare type SolutionConfig = Map<PluginIdentity, PluginConfig>;
export declare type ReadonlySolutionConfig = ReadonlyMap<PluginIdentity, ReadonlyPluginConfig>;
/**
 * Definition of option item in single selection or multiple selection
 */
export interface OptionItem {
    /**
     * unique identifier of the option item in the option list
     */
    id: string;
    /**
     * display name
     */
    label: string;
    /**
     * short description
     */
    description?: string;
    /**
     * detailed description
     */
    detail?: string;
    /**
     * customized user data, which is not displayed
     */
    data?: unknown;
    /**
     * CLI display name. CLI will use `cliName` as display name, and use `id` instead if `cliName` is undefined.
     */
    cliName?: string;
}
export declare class ConfigMap extends Map<string, ConfigValue> {
    getString(k: string, defaultValue?: string): string | undefined;
    getBoolean(k: string, defaultValue?: boolean): boolean | undefined;
    getNumber(k: string, defaultValue?: number): number | undefined;
    getStringArray(k: string, defaultValue?: string[]): string[] | undefined;
    getNumberArray(k: string, defaultValue?: number[]): number[] | undefined;
    getBooleanArray(k: string, defaultValue?: boolean[]): boolean[] | undefined;
    getOptionItem(k: string, defaultValue?: OptionItem): OptionItem | undefined;
    getOptionItemArray(k: string, defaultValue?: OptionItem[]): OptionItem[] | undefined;
    toJSON(): Json;
    static fromJSON(obj?: Json): ConfigMap | undefined;
    constructor(entries?: readonly (readonly [string, ConfigValue])[] | null);
}
export declare function mergeConfigMap(lhs?: ConfigMap, rhs?: ConfigMap): ConfigMap | undefined;
export declare type Void = {};
export declare const Void: {};
export declare type ResourceTemplate = Record<string, ConfigValue>;
export declare type ResourceTemplates = {
    [k: string]: ResourceTemplate | undefined;
};
export declare type ResourceConfig = ResourceTemplate;
export declare type ResourceConfigs = ResourceTemplates;
export declare type ReadonlyResourceConfig = Readonly<ResourceConfig>;
export declare type ReadonlyResourceConfigs = Readonly<{
    [k: string]: ReadonlyResourceConfig | undefined;
}>;
/**
 * environment meta data
 */
export interface EnvMeta {
    name: string;
    local: boolean;
    sideloading: boolean;
}
/**
 * project static settings
 */
export interface ProjectSettings {
    appName: string;
    version?: string;
    projectId: string;
    programmingLanguage?: string;
    defaultFunctionName?: string;
    solutionSettings: SolutionSettings;
    isFromSample?: boolean;
    /**
     * pluginSettings is used for plugin settings irrelevant to environments
     */
    pluginSettings?: Json;
}
/**
 * solution settings
 */
export interface SolutionSettings extends Json {
    name: string;
    /**
     * solution settings schema version
     */
    version?: string;
}
export interface AzureSolutionSettings extends SolutionSettings {
    hostType: string;
    capabilities: string[];
    azureResources: string[];
    activeResourcePlugins: string[];
    migrateFromV1?: boolean;
}
/**
 * local debug settings
 */
export interface LocalSettings {
    teamsApp?: ConfigMap;
    auth?: ConfigMap;
    frontend?: ConfigMap;
    backend?: ConfigMap;
    bot?: ConfigMap;
}
/**
 * project dynamic states
 */
export interface ProjectStates {
    solution: Record<string, ConfigValue>;
    resources: {
        [k: string]: Record<string, ConfigValue>;
    };
}
export interface Inputs extends Json {
    projectPath?: string;
    targetEnvName?: string;
    sourceEnvName?: string;
    targetResourceGroupName?: string;
    platform: Platform;
    stage?: Stage;
    vscodeEnv?: VsCodeEnv;
    ignoreLock?: boolean;
    ignoreConfigPersist?: boolean;
    ignoreEnvInfo?: boolean;
    env?: string;
    projectId?: string;
}
export interface ProjectConfig {
    settings?: ProjectSettings;
    config?: SolutionConfig | Json;
    localSettings?: LocalSettings | Json;
}
//# sourceMappingURL=types.d.ts.map