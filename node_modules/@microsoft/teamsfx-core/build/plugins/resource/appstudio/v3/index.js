"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioPluginV3 = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const constants_1 = require("../../../solution/fx-solution/v3/constants");
const __1 = require("../");
const utils4v2_1 = require("../../utils4v2");
const results_1 = require("../results");
const errors_1 = require("../errors");
let AppStudioPluginV3 = class AppStudioPluginV3 {
    constructor() {
        this.name = "fx-resource-appstudio";
        this.displayName = "App Studio";
    }
    /**
     * Generate initial manifest template file, for both local debug & remote
     * @param ctx
     * @param inputs
     * @returns
     */
    async init(ctx, inputs) {
        const pluginContext = utils4v2_1.convert2PluginContext(this.plugin.name, ctx, inputs);
        return await this.plugin.init(pluginContext);
    }
    /**
     * Append capabilities to manifest templates
     * @param ctx
     * @param inputs
     * @param capabilities
     * @returns
     */
    async addCapabilities(ctx, inputs, capabilities) {
        const pluginContext = utils4v2_1.convert2PluginContext(this.plugin.name, ctx, inputs);
        capabilities.map(async (capability) => {
            const exceedLimit = await this.capabilityExceedLimit(ctx, inputs, capability.name);
            if (exceedLimit.isErr()) {
                return teamsfx_api_1.err(exceedLimit.error);
            }
            if (exceedLimit.value) {
                return teamsfx_api_1.err(results_1.AppStudioResultFactory.UserError(errors_1.AppStudioError.CapabilityExceedLimitError.name, errors_1.AppStudioError.CapabilityExceedLimitError.message(capability.name)));
            }
        });
        return await this.plugin.addCapabilities(pluginContext, capabilities);
    }
    /**
     * Should conside both local and remote
     * @returns
     */
    async loadManifest(ctx, inputs) {
        const pluginContext = utils4v2_1.convert2PluginContext(this.plugin.name, ctx, inputs);
        return await this.plugin.loadManifest(pluginContext);
    }
    /**
     * Save manifest template file
     * @param ctx ctx.manifest
     * @param inputs
     * @returns
     */
    async SaveManifest(ctx, inputs, manifest) {
        const pluginContext = utils4v2_1.convert2PluginContext(this.plugin.name, ctx, inputs);
        return await this.plugin.saveManifest(pluginContext, manifest);
    }
    /**
     * Load manifest template, and check if it exceeds the limit.
     * The limit of staticTab if 16, others are 1
     * Should check both local & remote manifest template file
     * @param capability
     * @returns
     */
    async capabilityExceedLimit(ctx, inputs, capability) {
        const pluginContext = utils4v2_1.convert2PluginContext(this.plugin.name, ctx, inputs);
        return await this.plugin.capabilityExceedLimit(pluginContext, capability);
    }
};
tslib_1.__decorate([
    typedi_1.Inject("AppStudioPlugin"),
    tslib_1.__metadata("design:type", __1.AppStudioPlugin)
], AppStudioPluginV3.prototype, "plugin", void 0);
AppStudioPluginV3 = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInResourcePluginNames.appStudio)
], AppStudioPluginV3);
exports.AppStudioPluginV3 = AppStudioPluginV3;
//# sourceMappingURL=index.js.map