import { FxError, Plugin, PluginContext, QTreeNode, Result, Stage, TeamsAppManifest, AzureSolutionSettings, Func, Void, IStaticTab, IConfigurableTab, IComposeExtension, IBot } from "@microsoft/teamsfx-api";
import { ResourcePermission, TeamsAppAdmin } from "../../../common/permissionInterface";
import "./v2";
export declare class AppStudioPlugin implements Plugin {
    name: string;
    displayName: string;
    activate(solutionSettings: AzureSolutionSettings): boolean;
    private appStudioPluginImpl;
    getQuestions(stage: Stage, ctx: PluginContext): Promise<Result<QTreeNode | undefined, FxError>>;
    /**
     * Create or update teams app
     * For cli: "teamsfx init" only
     * @returns {string} - Remote teams app id
     */
    getAppDefinitionAndUpdate(ctx: PluginContext, isLocalDebug: boolean, manifest: TeamsAppManifest): Promise<Result<string, FxError>>;
    /**
     * Create teams app
     * @returns {string} - Remote teams app id
     */
    provision(ctx: PluginContext): Promise<Result<string, FxError>>;
    /**
     * Update teams app
     * @returns {string} - Remote teams app id
     */
    postProvision(ctx: PluginContext): Promise<Result<string, FxError>>;
    /**
     * Validate manifest string against schema
     * @param {string} manifestString - the string of manifest.json file
     * @returns {string[]} an array of errors
     */
    validateManifest(ctx: PluginContext): Promise<Result<string[], FxError>>;
    scaffold(ctx: PluginContext): Promise<Result<any, FxError>>;
    /**
     * Build Teams Package
     * @param {string} appDirectory - The directory contains manifest.source.json and two images
     * @returns {string} - Path of built appPackage.zip
     */
    buildTeamsPackage(ctx: PluginContext, isLocalDebug: boolean): Promise<Result<string, FxError>>;
    /**
     * Migrate V1 project
     */
    migrateV1Project(ctx: PluginContext): Promise<Result<Void, FxError>>;
    /**
     * Update manifest file
     */
    updateManifest(ctx: PluginContext, isLocalDebug: boolean): Promise<Result<Void, FxError>>;
    /**
     * Publish the app to Teams App Catalog
     * @param {PluginContext} ctx
     * @returns {string[]} - Teams App ID in Teams app catalog
     */
    publish(ctx: PluginContext): Promise<Result<string | undefined, FxError>>;
    postLocalDebug(ctx: PluginContext): Promise<Result<string, FxError>>;
    checkPermission(ctx: PluginContext, userInfo: Record<string, any>): Promise<Result<ResourcePermission[], FxError>>;
    grantPermission(ctx: PluginContext, userInfo: Record<string, any>): Promise<Result<ResourcePermission[], FxError>>;
    listCollaborator(ctx: PluginContext): Promise<Result<TeamsAppAdmin[], FxError>>;
    loadManifest(ctx: PluginContext): Promise<Result<{
        local: TeamsAppManifest;
        remote: TeamsAppManifest;
    }, FxError>>;
    saveManifest(ctx: PluginContext, manifest: {
        local: TeamsAppManifest;
        remote: TeamsAppManifest;
    }): Promise<Result<any, FxError>>;
    capabilityExceedLimit(ctx: PluginContext, capability: "staticTab" | "configurableTab" | "Bot" | "MessageExtension"): Promise<Result<boolean, FxError>>;
    init(ctx: PluginContext): Promise<Result<any, FxError>>;
    addCapabilities(ctx: PluginContext, capabilities: ({
        name: "staticTab";
        snippet?: {
            local: IStaticTab;
            remote: IStaticTab;
        };
    } | {
        name: "configurableTab";
        snippet?: {
            local: IConfigurableTab;
            remote: IConfigurableTab;
        };
    } | {
        name: "Bot";
        snippet?: {
            local: IBot;
            remote: IBot;
        };
    } | {
        name: "MessageExtension";
        snippet?: {
            local: IComposeExtension;
            remote: IComposeExtension;
        };
    })[]): Promise<Result<any, FxError>>;
    executeUserTask(func: Func, ctx: PluginContext): Promise<Result<any, FxError>>;
}
declare const _default: AppStudioPlugin;
export default _default;
//# sourceMappingURL=index.d.ts.map