"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioClient = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const errors_1 = require("./errors");
const results_1 = require("./results");
const __1 = require("../../..");
const constants_1 = require("./constants");
// eslint-disable-next-line @typescript-eslint/no-namespace
var AppStudioClient;
(function (AppStudioClient) {
    const baseUrl = __1.getAppStudioEndpoint();
    /**
     * Creates a new axios instance to call app studio to prevent setting the accessToken on global instance.
     * @param {string}  appStudioToken
     * @returns {AxiosInstance}
     */
    function createRequesterWithToken(appStudioToken) {
        const instance = axios_1.default.create({
            baseURL: baseUrl,
        });
        instance.defaults.headers.common["Authorization"] = `Bearer ${appStudioToken}`;
        instance.defaults.headers.common["Client-Source"] = "teamstoolkit";
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
    /**
     * Creates an app registration in app studio with the given archived file and returns the app definition.
     * @param {Buffer}  file - Zip file with manifest.json and two icons
     * @param {string}  appStudioToken
     * @param {LogProvider} logProvider
     * @returns {Promise<IAppDefinition>}
     */
    async function createApp(file, appStudioToken, logProvider) {
        var _a, _b, _c;
        try {
            const requester = createRequesterWithToken(appStudioToken);
            const response = await requester.post(`/api/appdefinitions/v2/import`, file, {
                headers: { "Content-Type": "application/zip" },
            });
            if (response && response.data) {
                const app = response.data;
                await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.debug(`recieved data from app studio ${JSON.stringify(app)}`));
                return app;
            }
            else {
                throw new Error(`Cannot create teams app`);
            }
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
            const message = `Cannot create teams app due to ${e.name}: ${e.message}` +
                (correlationId ? `X-Correlation-ID: ${correlationId}` : "");
            const error = new Error(message);
            if ((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) {
                error.name = (_c = e.response) === null || _c === void 0 ? void 0 : _c.status;
            }
            throw error;
        }
    }
    AppStudioClient.createApp = createApp;
    async function uploadIcon(teamsAppId, appStudioToken, colorIconContent, outlineIconContent, logProvider) {
        var _a, _b, _c;
        await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(`Uploading icon for teams ${teamsAppId}`));
        const requester = createRequesterWithToken(appStudioToken);
        try {
            const colorIcon = {
                name: "color",
                type: "color",
                base64String: colorIconContent,
            };
            const outlineIcon = {
                name: "outline",
                type: "outline",
                base64String: outlineIconContent,
            };
            const colorIconResult = requester.post(`/api/appdefinitions/${teamsAppId}/image`, colorIcon);
            const outlineIconResult = requester.post(`/api/appdefinitions/${teamsAppId}/image`, outlineIcon);
            const results = await Promise.all([colorIconResult, outlineIconResult]);
            await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(`successfully uploaded two icons`));
            return { colorIconUrl: results[0].data, outlineIconUrl: results[1].data };
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
            const message = `Failed to upload icon due to ${e.name}: ${e.message}` +
                (correlationId ? `X-Correlation-ID: ${correlationId}` : "");
            await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.warning(message));
            const error = new Error(message);
            if ((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) {
                error.name = (_c = e.response) === null || _c === void 0 ? void 0 : _c.status;
            }
            throw error;
        }
    }
    async function getApp(teamsAppId, appStudioToken, logProvider) {
        var _a, _b, _c;
        const requester = createRequesterWithToken(appStudioToken);
        try {
            const response = await requester.get(`/api/appdefinitions/${teamsAppId}`);
            if (response && response.data) {
                const app = response.data;
                if (app && app.teamsAppId && app.teamsAppId === teamsAppId) {
                    return app;
                }
                else {
                    await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.error(`teamsAppId mismatch. Input: ${teamsAppId}. Got: ${app.teamsAppId}`));
                }
            }
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
            const message = `Cannot get the app definition with app ID ${teamsAppId}, due to ${e.name}: ${e.message}` +
                (correlationId ? `X-Correlation-ID: ${correlationId}` : "");
            await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.warning(message));
            const err = new Error(message);
            if ((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) {
                err.name = (_c = e.response) === null || _c === void 0 ? void 0 : _c.status;
            }
            throw err;
        }
        throw new Error(`Cannot get the app definition with app ID ${teamsAppId}`);
    }
    AppStudioClient.getApp = getApp;
    /**
     * Updates an existing app if it exists with the configuration given.  Returns whether or not it was successful.
     * @param {string}  teamsAppId
     * @param {IAppDefinition} appDefinition
     * @param {string}  appStudioToken
     * @param {LogProvider} logProvider
     * @param {string} colorIconContent - base64 encoded
     * @param {string} outlineIconContent - base64 encoded
     * @returns {Promise<IAppDefinition>}
     */
    async function updateApp(teamsAppId, appDefinition, appStudioToken, logProvider, colorIconContent, outlineIconContent) {
        var _a, _b, _c;
        // Get userlist from existing app
        const existingAppDefinition = await getApp(teamsAppId, appStudioToken, logProvider);
        const userlist = existingAppDefinition.userList;
        appDefinition.userList = userlist;
        let result;
        if (colorIconContent && outlineIconContent) {
            result = await uploadIcon(teamsAppId, appStudioToken, colorIconContent, outlineIconContent, logProvider);
            if (!result) {
                await (logProvider === null || logProvider === void 0 ? void 0 : logProvider.error(`failed to upload color icon for: ${teamsAppId}`));
                throw new Error(`failed to upload icons for ${teamsAppId}`);
            }
            appDefinition.colorIcon = result.colorIconUrl;
            appDefinition.outlineIcon = result.outlineIconUrl;
        }
        const requester = createRequesterWithToken(appStudioToken);
        try {
            const response = await requester.post(`/api/appdefinitions/${teamsAppId}/override`, appDefinition);
            if (response && response.data) {
                const app = response.data;
                return app;
            }
            else {
                throw new Error(`Cannot update teams app ${teamsAppId}, response: ${JSON.stringify(response)}`);
            }
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
            const message = `Cannot create teams app due to ${e.name}: ${e.message}` +
                (correlationId ? `X-Correlation-ID: ${correlationId}` : "");
            const error = new Error(message);
            if ((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) {
                error.name = (_c = e.response) === null || _c === void 0 ? void 0 : _c.status;
            }
            throw error;
        }
    }
    AppStudioClient.updateApp = updateApp;
    async function validateManifest(manifestString, appStudioToken) {
        var _a;
        try {
            const requester = createRequesterWithToken(appStudioToken);
            const buffer = Buffer.from(manifestString, "utf8");
            const response = await requester.post("/api/appdefinitions/prevalidation", buffer, {
                headers: { "Content-Type": "application/json" },
            });
            if (response && response.data) {
                let validationResult = [];
                validationResult = validationResult.concat(response.data.errors);
                validationResult = validationResult.concat(response.data.warnings);
                validationResult = validationResult.concat(response.data.info);
                return validationResult;
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.ValidationFailedError.name, errors_1.AppStudioError.ValidationFailedError.message([
                    `Validation failed, response: ${JSON.stringify(response)}`,
                ]));
            }
        }
        catch (e) {
            const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
            const message = `Cannot create teams app due to ${e.name}: ${e.message}` +
                (correlationId ? `X-Correlation-ID: ${correlationId}` : "");
            throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.ValidationFailedError.name, errors_1.AppStudioError.ValidationFailedError.message([message]), e);
        }
    }
    AppStudioClient.validateManifest = validateManifest;
    /**
     * Publish Teams app to Teams App Catalog
     * @param teamsAppId
     * @param file
     * @param appStudioToken
     * @returns
     */
    async function publishTeamsApp(teamsAppId, file, appStudioToken) {
        var _a;
        try {
            const requester = createRequesterWithToken(appStudioToken);
            const response = await requester.post("/api/publishing", file, {
                headers: { "Content-Type": "application/zip" },
            });
            if (response && response.data) {
                if (response.data.error) {
                    // To avoid App Studio BadGateway error
                    // The app is actually published to app catalog.
                    if (response.data.error.code === "BadGateway") {
                        const appDefinition = await getAppByTeamsAppId(teamsAppId, appStudioToken);
                        if (appDefinition) {
                            return appDefinition.teamsAppId;
                        }
                    }
                    throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId), `code: ${response.data.error.code}, message: ${response.data.error.message}`);
                }
                else {
                    return response.data.id;
                }
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId));
            }
        }
        catch (e) {
            if (e instanceof teamsfx_api_1.SystemError) {
                throw e;
            }
            else {
                const correlationId = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers[constants_1.Constants.CORRELATION_ID];
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId, correlationId), e);
            }
        }
    }
    AppStudioClient.publishTeamsApp = publishTeamsApp;
    /**
     * Update existed publish request
     * @param teamsAppId
     * @param file
     * @param appStudioToken
     * @returns
     */
    async function publishTeamsAppUpdate(teamsAppId, file, appStudioToken) {
        var _a, _b;
        try {
            // Get App Definition from Teams App Catalog
            const appDefinition = await getAppByTeamsAppId(teamsAppId, appStudioToken);
            const requester = createRequesterWithToken(appStudioToken);
            let response = null;
            if (appDefinition) {
                // update the existing app
                response = await requester.post(`/api/publishing/${appDefinition.teamsAppId}/appdefinitions`, file, { headers: { "Content-Type": "application/zip" } });
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId));
            }
            if (response && response.data) {
                if (response.data.error || response.data.errorMessage) {
                    throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId), ((_a = response.data.error) === null || _a === void 0 ? void 0 : _a.message) || response.data.errorMessage);
                }
                else {
                    return response.data.id;
                }
            }
            else {
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId));
            }
        }
        catch (error) {
            if (error instanceof teamsfx_api_1.SystemError) {
                throw error;
            }
            else {
                const correlationId = (_b = error.response) === null || _b === void 0 ? void 0 : _b.headers[constants_1.Constants.CORRELATION_ID];
                throw results_1.AppStudioResultFactory.SystemError(errors_1.AppStudioError.TeamsAppPublishFailedError.name, errors_1.AppStudioError.TeamsAppPublishFailedError.message(teamsAppId, correlationId), error);
            }
        }
    }
    AppStudioClient.publishTeamsAppUpdate = publishTeamsAppUpdate;
    async function getAppByTeamsAppId(teamsAppId, appStudioToken) {
        const requester = createRequesterWithToken(appStudioToken);
        const response = await requester.get(`/api/publishing/${teamsAppId}`);
        if (response && response.data && response.data.value && response.data.value.length > 0) {
            const appdefinitions = response.data.value[0].appDefinitions.map((item) => {
                return {
                    lastModifiedDateTime: item.lastModifiedDateTime
                        ? new Date(item.lastModifiedDateTime)
                        : null,
                    publishingState: item.publishingState,
                    teamsAppId: item.teamsAppId,
                    displayName: item.displayName,
                };
            });
            return appdefinitions[appdefinitions.length - 1];
        }
        else {
            return undefined;
        }
    }
    AppStudioClient.getAppByTeamsAppId = getAppByTeamsAppId;
    async function getUserList(teamsAppId, appStudioToken) {
        let app;
        try {
            app = await getApp(teamsAppId, appStudioToken);
        }
        catch (error) {
            throw error;
        }
        return app.userList;
    }
    AppStudioClient.getUserList = getUserList;
    async function checkPermission(teamsAppId, appStudioToken, userObjectId) {
        let userList;
        try {
            userList = await getUserList(teamsAppId, appStudioToken);
        }
        catch (error) {
            return constants_1.Constants.PERMISSIONS.noPermission;
        }
        const findUser = userList === null || userList === void 0 ? void 0 : userList.find((user) => user.aadId === userObjectId);
        if (!findUser) {
            return constants_1.Constants.PERMISSIONS.noPermission;
        }
        if (findUser.isAdministrator) {
            return constants_1.Constants.PERMISSIONS.admin;
        }
        else {
            return constants_1.Constants.PERMISSIONS.operative;
        }
    }
    AppStudioClient.checkPermission = checkPermission;
    async function grantPermission(teamsAppId, appStudioToken, newUser) {
        var _a, _b;
        let app;
        try {
            app = await getApp(teamsAppId, appStudioToken);
        }
        catch (error) {
            throw error;
        }
        if (checkUser(app, newUser)) {
            return;
        }
        const findUser = (_a = app.userList) === null || _a === void 0 ? void 0 : _a.findIndex((user) => user["aadId"] === newUser.aadId);
        if (findUser && findUser >= 0) {
            return;
        }
        (_b = app.userList) === null || _b === void 0 ? void 0 : _b.push(newUser);
        const requester = createRequesterWithToken(appStudioToken);
        const response = await requester.post(`/api/appdefinitions/${teamsAppId}/owner`, app);
        if (!response || !response.data || !checkUser(response.data, newUser)) {
            throw new Error(constants_1.ErrorMessages.GrantPermissionFailed);
        }
    }
    AppStudioClient.grantPermission = grantPermission;
    function checkUser(app, newUser) {
        var _a;
        const findUser = (_a = app.userList) === null || _a === void 0 ? void 0 : _a.findIndex((user) => user["aadId"] === newUser.aadId);
        if (findUser != undefined && findUser >= 0) {
            return true;
        }
        else {
            return false;
        }
    }
})(AppStudioClient = exports.AppStudioClient || (exports.AppStudioClient = {}));
//# sourceMappingURL=appStudio.js.map