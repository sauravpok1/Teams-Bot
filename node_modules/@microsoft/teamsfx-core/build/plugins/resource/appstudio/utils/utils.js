"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalAppName = exports.getCustomizedKeys = exports.checkAndConfig = exports.replaceConfigValue = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("../constants");
function replaceConfigValue(config, id, value) {
    if (config && id && value) {
        const idTag = `{${id}}`;
        while (config.includes(idTag)) {
            config = config.replace(idTag, value);
        }
    }
    return config;
}
exports.replaceConfigValue = replaceConfigValue;
/**
 *
 * @throws Error - when placeholder doesn't have corresponding value
 */
function checkAndConfig(config, id, value) {
    const idTag = `{${id}}`;
    if (value) {
        return replaceConfigValue(config, id, value);
    }
    else {
        if (config.includes(idTag)) {
            throw new Error(`Data required: ${idTag}`);
        }
        else {
            return config;
        }
    }
}
exports.checkAndConfig = checkAndConfig;
function getCustomizedKeys(prefix, manifest) {
    let keys = [];
    for (const key in manifest) {
        if (manifest.hasOwnProperty(key)) {
            const value = manifest[key];
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.map((item, index) => {
                        keys = keys.concat(getCustomizedKeys(`${prefix}.${key}[${index}]`, item));
                    });
                }
                else {
                    keys = keys.concat(getCustomizedKeys(`${prefix}.${key}`, value));
                }
            }
            else if (typeof value === "string" && value.startsWith("{{config.manifest")) {
                keys.push(`${prefix}.${key}`);
            }
        }
    }
    return keys;
}
exports.getCustomizedKeys = getCustomizedKeys;
function getLocalAppName(appName) {
    const suffix = "-local-debug";
    if (suffix.length + appName.length <= constants_1.TEAMS_APP_SHORT_NAME_MAX_LENGTH) {
        appName = appName + suffix;
    }
    return appName;
}
exports.getLocalAppName = getLocalAppName;
//# sourceMappingURL=utils.js.map