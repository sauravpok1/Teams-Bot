export declare class AppStudioError {
    static readonly FileNotFoundError: {
        name: string;
        message: (filePath: string) => string;
    };
    static readonly NotADirectoryError: {
        name: string;
        message: (directoryPath: string) => string;
    };
    static readonly ParamUndefinedError: {
        name: string;
        message: (param: string) => string;
    };
    static readonly RemoteAppIdCreateFailedError: {
        name: string;
        message: (error?: any) => string;
    };
    static readonly RemoteAppIdUpdateFailedError: {
        name: string;
        message: (error?: any) => string;
    };
    static readonly LocalAppIdCreateFailedError: {
        name: string;
        message: (error?: any) => string;
    };
    static readonly LocalAppIdUpdateFailedError: {
        name: string;
        message: (error?: any) => string;
    };
    static readonly AppStudioTokenGetFailedError: {
        name: string;
        message: string;
    };
    static readonly InvalidManifestError: {
        name: string;
        message: (error: any, key?: string | undefined) => string;
    };
    static readonly ManifestLoadFailedError: {
        name: string;
        message: (error: string) => string;
    };
    static readonly ValidationFailedError: {
        name: string;
        message: (errors: string[]) => string;
    };
    static readonly GetLocalDebugConfigFailedError: {
        name: string;
        message: (error: any) => string;
    };
    static readonly GetRemoteConfigFailedError: {
        name: string;
        message: (error: any, isProvisionSucceeded: boolean) => string;
    };
    static readonly InvalidLocalDebugConfigurationDataError: {
        name: string;
        message: (endpoint: string, tabEndpoint: string, domain: string, tabDomain: string) => string;
    };
    static readonly InvalidRemoteConfigurationDataError: {
        name: string;
        message: (endpoint: string, tabEndpoint: string, domain: string, tabDomain: string) => string;
    };
    static readonly InternalError: {
        name: string;
        message: string;
    };
    static readonly TeamsAppUpdateFailedError: {
        name: string;
        message: (teamsAppId: string) => string;
    };
    static readonly TeamsAppUpdateIDNotMatchError: {
        name: string;
        message: (oldTeamsAppId: string, newTeamsAppId?: string | undefined) => string;
    };
    static readonly TeamsAppPublishFailedError: {
        name: string;
        message: (teamsAppId: string, correlationId?: string | undefined) => string;
    };
    static readonly TeamsAppPublishCancelError: {
        name: string;
        message: (name: string) => string;
    };
    static readonly TeamsPackageBuildError: {
        name: string;
        message: (error: any) => any;
    };
    static readonly GetRemoteConfigError: {
        name: string;
        message: (error: string) => string;
    };
    static readonly UnhandledError: {
        name: string;
        message: string;
    };
    static readonly PluginNotFound: {
        name: string;
        message: (name: string) => string;
    };
    static readonly ScaffoldFailedError: {
        name: string;
        message: (error: any) => any;
    };
    static readonly MigrateV1ProjectFailedError: {
        name: string;
        message: (error: any) => any;
    };
    static readonly CheckPermissionFailedError: {
        name: string;
        message: (error: any) => string;
    };
    static readonly GrantPermissionFailedError: {
        name: string;
        message: (errorMessage: string, id?: string | undefined) => string;
    };
    static readonly ListCollaboratorFailedError: {
        name: string;
        message: (error: any) => string;
    };
    static readonly TeamsAppNotFoundError: {
        name: string;
        message: (appId: string) => string;
    };
    static readonly UpdateManifestCancelError: {
        name: string;
        message: (name: string) => string;
    };
    static readonly UpdateManifestWithInvalidAppError: {
        name: string;
        message: (appId: string) => string;
    };
    static readonly InvalidCapabilityError: {
        name: string;
        message: (capability: string) => string;
    };
    static readonly CapabilityExceedLimitError: {
        name: string;
        message: (capability: string) => string;
    };
}
//# sourceMappingURL=errors.d.ts.map