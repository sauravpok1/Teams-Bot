"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudioError = void 0;
const constants_1 = require("./constants");
class AppStudioError {
}
exports.AppStudioError = AppStudioError;
AppStudioError.FileNotFoundError = {
    name: "FileNotFoundError",
    message: (filePath) => `File ${filePath} not found.`,
};
AppStudioError.NotADirectoryError = {
    name: "NotADirectory",
    message: (directoryPath) => `${directoryPath} is not a directory.`,
};
AppStudioError.ParamUndefinedError = {
    name: "ParamUndefined",
    message: (param) => `${param} is undefined.`,
};
AppStudioError.RemoteAppIdCreateFailedError = {
    name: "RemoteAppIdCreateFailed",
    message: (error) => `Failed to create teams app id in app studio, due to ${error === null || error === void 0 ? void 0 : error.name}, ${error === null || error === void 0 ? void 0 : error.message}`,
};
AppStudioError.RemoteAppIdUpdateFailedError = {
    name: "RemoteAppIdUpdateFailed",
    message: (error) => `Failed to update app id in app studio due to ${error === null || error === void 0 ? void 0 : error.name}: ${error === null || error === void 0 ? void 0 : error.message}.`,
};
AppStudioError.LocalAppIdCreateFailedError = {
    name: "LocalAppIdCreateFailed",
    message: (error) => `Failed to create localDebug teams app id in app studio, due to ${error === null || error === void 0 ? void 0 : error.name}, ${error === null || error === void 0 ? void 0 : error.message}`,
};
AppStudioError.LocalAppIdUpdateFailedError = {
    name: "LocalAppIdUpdateFailed",
    message: (error) => `Failed to update local app id in app studio due to ${error === null || error === void 0 ? void 0 : error.name}: ${error === null || error === void 0 ? void 0 : error.message}.`,
};
AppStudioError.AppStudioTokenGetFailedError = {
    name: "AppStudioTokenGetFailed",
    message: "Failed to get app studio token.",
};
AppStudioError.InvalidManifestError = {
    name: "InvalidManifest",
    message: (error, key) => {
        var _a;
        return (_a = `Failed to parse manifest string, dut to error: ${error}. This might be caused by invalid configurations. ` +
            key) !== null && _a !== void 0 ? _a : "";
    },
};
AppStudioError.ManifestLoadFailedError = {
    name: "ManifestLoadFailed",
    message: (error) => `Failed to read manifest file. Error: ${error}.`,
};
AppStudioError.ValidationFailedError = {
    name: "ManifestValidationFailed",
    message: (errors) => `Validation error: \n ${errors.join("\n")}`,
};
AppStudioError.GetLocalDebugConfigFailedError = {
    name: "GetLocalDebugConfigFailed",
    message: (error) => `Missing configuration data for manifest. You may need to run 'Local debug' first. ${error.message}`,
};
AppStudioError.GetRemoteConfigFailedError = {
    name: "GetRemoteConfigFailed",
    message: (error, isProvisionSucceeded) => `Missing configuration data for manifest. ${error.message}. ${isProvisionSucceeded
        ? ""
        : "Run 'Provision in the cloud' first. Click Get Help to learn more about why you need to provision."}`,
};
AppStudioError.InvalidLocalDebugConfigurationDataError = {
    name: "InvalidLocalDebugConfigurationData",
    message: (endpoint, tabEndpoint, domain, tabDomain) => `Invalid configuration data for manifest: ${endpoint}=${tabEndpoint}, ${domain}=${tabDomain}.`,
};
AppStudioError.InvalidRemoteConfigurationDataError = {
    name: "InvalidRemoteConfigurationData",
    message: (endpoint, tabEndpoint, domain, tabDomain) => `Invalid configuration data for manifest: ${endpoint}=${tabEndpoint}, ${domain}=${tabDomain}.`,
};
AppStudioError.InternalError = {
    name: "InternalError",
    message: "Select either Bot or Messaging Extension.",
};
AppStudioError.TeamsAppUpdateFailedError = {
    name: "TeamsAppUpdateFailed",
    message: (teamsAppId) => `Failed to update Teams app with ID ${teamsAppId}.`,
};
AppStudioError.TeamsAppUpdateIDNotMatchError = {
    name: "TeamsAppUpdateIDNotMatch",
    message: (oldTeamsAppId, newTeamsAppId) => `Teams App ID mismatch. Input: ${oldTeamsAppId}. Got: ${newTeamsAppId}.`,
};
AppStudioError.TeamsAppPublishFailedError = {
    name: "TeamsAppPublishFailed",
    message: (teamsAppId, correlationId) => `Failed to publish Teams app with ID ${teamsAppId}.` +
        (correlationId ? `X-Correlation-ID: ${correlationId}` : ""),
};
AppStudioError.TeamsAppPublishCancelError = {
    name: "TeamsAppPublishCancelled",
    message: (name) => `Publish Teams app with ID ${name} has been cancelled.`,
};
AppStudioError.TeamsPackageBuildError = {
    name: "TeamsPackageBuildError",
    message: (error) => (error.message ? error.message : "Teams Package built failed!"),
};
AppStudioError.GetRemoteConfigError = {
    name: "GetRemoteConfigError",
    message: (error) => `${error}. You must run 'Provision in the cloud' first to fill out certain fields in manifest. Click Get Help to learn more about why you need to provision.`,
};
AppStudioError.UnhandledError = {
    name: "UnhandledError",
    message: "UnhandledError",
};
AppStudioError.PluginNotFound = {
    name: "PluginNotFound",
    message: (name) => `Plugin name ${name} is not valid`,
};
AppStudioError.ScaffoldFailedError = {
    name: "ScaffoldFailed",
    message: (error) => (error.message ? error.message : "Teams app scaffold failed!"),
};
AppStudioError.MigrateV1ProjectFailedError = {
    name: "MigrateV1ProjectFailed",
    message: (error) => error.message ? error.message : "Migrate Teams Toolkit V1 project failed!",
};
AppStudioError.CheckPermissionFailedError = {
    name: "CheckPermissionFailed",
    message: (error) => `Check permission failed. Reason: ${error.message}`,
};
AppStudioError.GrantPermissionFailedError = {
    name: "GrantPermissionFailed",
    message: (errorMessage, id) => `${constants_1.Constants.PERMISSIONS.name}: ${id}. Grant permission failed. Reason: ${errorMessage}`,
};
AppStudioError.ListCollaboratorFailedError = {
    name: "ListCollaboratorFailedError",
    message: (error) => `List collaborator failed. Reason: ${error.message}`,
};
AppStudioError.TeamsAppNotFoundError = {
    name: "TeamsAppNotFound",
    message: (appId) => `Cannot found teams app with id ${appId}`,
};
AppStudioError.UpdateManifestCancelError = {
    name: "UpdateManifestCancelled",
    message: (name) => `Update manifest with ID ${name} has been cancelled.`,
};
AppStudioError.UpdateManifestWithInvalidAppError = {
    name: "UpdateManifestWithInvalidAppError",
    message: (appId) => `Cannot find teams app with id ${appId}. You must run local debug or provision first before updating manifest to Teams platform`,
};
AppStudioError.InvalidCapabilityError = {
    name: "InvalidCapabilityError",
    message: (capability) => `Invalid capability: ${capability}`,
};
AppStudioError.CapabilityExceedLimitError = {
    name: "CapabilityExceedLimitError",
    message: (capability) => `Cannot add capability ${capability}, it reaches the limit.`,
};
//# sourceMappingURL=errors.js.map