export declare function isWindows(): boolean;
export declare function isMacOS(): boolean;
export declare function isLinux(): boolean;
export declare function isArm64(): boolean;
export declare const defaultHelpLink = "https://aka.ms/teamsfx-envchecker-help";
export declare const nodeNotFoundHelpLink: string;
export declare const nodeNotSupportedForAzureHelpLink: string;
export declare const nodeNotSupportedForFunctionsHelpLink: string;
export declare const nodeNotSupportedForSPFxHelpLink: string;
export declare const dotnetExplanationHelpLink: string;
export declare const dotnetFailToInstallHelpLink: string;
export declare const dotnetManualInstallHelpLink: string;
export declare const dotnetNotSupportTargetVersionHelpLink: string;
export declare const ngrokInstallHelpLink: string;
export declare const Messages: {
    learnMoreButtonText: string;
    defaultErrorMessage: string;
    startInstallFunctionCoreTool: string;
    finishInstallFunctionCoreTool: string;
    needReplaceWithFuncCoreToolV3: string;
    needInstallFuncCoreTool: string;
    failToInstallFuncCoreTool: string;
    failToValidateFuncCoreTool: string;
    startInstallNgrok: string;
    finishInstallNgrok: string;
    needInstallNgrok: string;
    failToInstallNgrok: string;
    failToValidateNgrok: string;
    downloadDotnet: string;
    finishInstallDotnet: string;
    useGlobalDotnet: string;
    dotnetInstallStderr: string;
    dotnetInstallErrorCode: string;
    failToInstallDotnet: string;
    NodeNotFound: string;
    NodeNotSupported: string;
    dotnetNotFound: string;
    depsNotFound: string;
    linuxDepsNotFound: string;
    linuxDepsNotFoundHelpLinkMessage: string;
};
export declare enum DepsCheckerEvent {
    funcCheckSkipped = "func-check-skipped",
    funcAlreadyInstalled = "func-already-installed",
    funcInstallCompleted = "func-install-completed",
    funcInstallError = "func-install-error",
    funcInstallScriptCompleted = "func-install-script-completed",
    funcInstallScriptError = "func-install-script-error",
    funcValidationError = "func-validation-error",
    dotnetCheckSkipped = "dotnet-check-skipped",
    dotnetAlreadyInstalled = "dotnet-already-installed",
    dotnetInstallCompleted = "dotnet-install-completed",
    dotnetInstallError = "dotnet-install-error",
    dotnetInstallScriptCompleted = "dotnet-install-script-completed",
    dotnetInstallScriptError = "dotnet-install-script-error",
    dotnetValidationError = "dotnet-validation-error",
    dotnetSearchDotnetSdks = "dotnet-search-dotnet-sdks",
    clickLearnMore = "env-checker-click-learn-more",
    clickCancel = "env-checker-click-cancel",
    ngrokInstallCompleted = "ngrok-install-completed",
    ngrokInstallError = "ngrok-install-error",
    ngrokInstallScriptCompleted = "ngrok-install-script-completed",
    ngrokInstallScriptError = "ngrok-install-script-error",
    ngrokValidationError = "ngrok-validation-error",
    nodeNotFound = "node-not-found",
    nodeNotSupportedForAzure = "node-not-supported-for-azure",
    nodeNotSupportedForSPFx = "node-not-supported-for-spfx",
    npmNotFound = "npm-not-found",
    npmAlreadyInstalled = "npm-already-installed"
}
export declare enum TelemtryMessages {
    failedToInstallFunc = "failed to install Func core tools.",
    failedToValidateFunc = "failed to validate func.",
    NPMNotFound = "npm is not found.",
    failedToExecDotnetScript = "failed to exec dotnet script.",
    failedToValidateDotnet = "failed to validate dotnet.",
    failedToSearchDotnetSdks = "failed to search dotnet sdks.",
    failedToInstallNgrok = "failed to install ngrok.",
    failedToValidateNgrok = "failed to validate ngrok."
}
export declare enum TelemetryMessurement {
    completionTime = "completion-time"
}
//# sourceMappingURL=common.d.ts.map