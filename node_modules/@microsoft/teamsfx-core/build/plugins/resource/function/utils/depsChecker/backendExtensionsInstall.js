"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendExtensionsInstaller = void 0;
// NOTE:
// DO NOT EDIT this file in function plugin.
// The source of truth of this file is in packages/vscode-extension/src/debug/depsChecker.
// If you need to edit this file, please edit it in the above folder
// and run the scripts (tools/depsChecker/copyfiles.sh or tools/depsChecker/copyfiles.ps1 according to your OS)
// to copy you changes to function plugin.
const common_1 = require("./common");
const errors_1 = require("./errors");
const cpUtils_1 = require("./cpUtils");
// NOTE: change these constants if function plugin scaffold changes
const defaultOutputPath = "bin";
const defaultCsprojPath = "extensions.csproj";
class BackendExtensionsInstaller {
    constructor(dotnetChecker, logger) {
        this._dotnetChecker = dotnetChecker;
        this._logger = logger;
    }
    async install(backendRoot, csprojPath = defaultCsprojPath, outputPath = defaultOutputPath) {
        if (!outputPath) {
            outputPath = defaultOutputPath;
        }
        const dotnetExecPath = await this._dotnetChecker.getDotnetExecPath();
        if (dotnetExecPath === "") {
            await this._logger.printDetailLog();
            this._logger.cleanup();
            await this._logger.error(`Failed to run backend extension install, .NET SDK executable not found`);
            throw new errors_1.BackendExtensionsInstallError("Failed to run backend extension install, .NET SDK executable not found", common_1.defaultHelpLink);
        }
        try {
            const result = await cpUtils_1.cpUtils.tryExecuteCommand(backendRoot, this._logger, { shell: false }, dotnetExecPath, "build", csprojPath, "-o", outputPath, "--ignore-failed-sources");
            if (result.code !== 0) {
                throw new Error(`Failed to run "${dotnetExecPath} build" command. output = ${result.cmdOutput}, err = ${result.cmdOutputIncludingStderr}`);
            }
        }
        catch (error) {
            await this._logger.printDetailLog();
            await this._logger.error(`Failed to run backend extension install: error = '${error}'`);
            if (error.message.includes("NETSDK1045")) {
                // refer to https://docs.microsoft.com/en-us/dotnet/core/tools/sdk-errors/netsdk1045
                throw new errors_1.BackendExtensionsInstallError(`NETSDK1045: The current .NET SDK does not support 'newer version' as a target`, common_1.dotnetNotSupportTargetVersionHelpLink);
            }
            throw new errors_1.BackendExtensionsInstallError(`Failed to run backend extension install: error = '${error}'`, common_1.defaultHelpLink);
        }
        finally {
            this._logger.cleanup();
        }
    }
}
exports.BackendExtensionsInstaller = BackendExtensionsInstaller;
//# sourceMappingURL=backendExtensionsInstall.js.map