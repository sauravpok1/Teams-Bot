import { DepsInfo, IDepsAdapter, IDepsChecker, IDepsLogger, IDepsTelemetry } from "./checker";
export declare enum DotnetVersion {
    v21 = "2.1",
    v31 = "3.1",
    v50 = "5.0",
    v60 = "6.0"
}
export declare const DotnetCoreSDKName = ".NET Core SDK";
export declare type DotnetSDK = {
    version: string;
    path: string;
};
export declare const installVersion: DotnetVersion;
export declare const supportedVersions: DotnetVersion[];
export declare class DotnetChecker implements IDepsChecker {
    private static encoding;
    private static timeout;
    private static maxBuffer;
    private readonly _adapter;
    private readonly _logger;
    private readonly _telemetry;
    constructor(adapter: IDepsAdapter, logger: IDepsLogger, telemetry: IDepsTelemetry);
    getDepsInfo(): Promise<DepsInfo>;
    isEnabled(): Promise<boolean>;
    isInstalled(): Promise<boolean>;
    install(): Promise<void>;
    getDotnetExecPath(): Promise<string>;
    static escapeFilePath(path: string): string;
    private static getDotnetConfigPath;
    private getDotnetExecPathFromConfig;
    private handleInstall;
    private static persistDotnetExecPath;
    private handleLinuxDependency;
    private static cleanup;
    private runDotnetInstallScript;
    private isDotnetInstalledCorrectly;
    private isDotnetVersionsInstalled;
    private static arrayIntersection;
    private static isPrivateInstall;
    private getGlobalDotnetSdks;
    private searchDotnetSdks;
    private static isFullSdkVersion;
    private static getDotnetExecPathFromDotnetInstallationDir;
    private getDotnetInstallScriptPath;
    private getDotnetInstallScriptName;
    private static getDefaultInstallPath;
    private getInstallCommand;
    private validate;
    private validateWithHelloWorld;
    private tryAcquireGlobalDotnetSdk;
    private static parseDotnetVersion;
}
//# sourceMappingURL=dotnetChecker.d.ts.map