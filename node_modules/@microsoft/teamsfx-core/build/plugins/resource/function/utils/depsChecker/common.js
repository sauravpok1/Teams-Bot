"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryMessurement = exports.TelemtryMessages = exports.DepsCheckerEvent = exports.Messages = exports.ngrokInstallHelpLink = exports.dotnetNotSupportTargetVersionHelpLink = exports.dotnetManualInstallHelpLink = exports.dotnetFailToInstallHelpLink = exports.dotnetExplanationHelpLink = exports.nodeNotSupportedForSPFxHelpLink = exports.nodeNotSupportedForFunctionsHelpLink = exports.nodeNotSupportedForAzureHelpLink = exports.nodeNotFoundHelpLink = exports.defaultHelpLink = exports.isArm64 = exports.isLinux = exports.isMacOS = exports.isWindows = void 0;
const tslib_1 = require("tslib");
// NOTE:
// DO NOT EDIT this file in function plugin.
// The source of truth of this file is in packages/vscode-extension/src/debug/depsChecker.
// If you need to edit this file, please edit it in the above folder
// and run the scripts (tools/depsChecker/copyfiles.sh or tools/depsChecker/copyfiles.ps1 according to your OS)
// to copy you changes to function plugin.
const os = tslib_1.__importStar(require("os"));
function isWindows() {
    return os.type() === "Windows_NT";
}
exports.isWindows = isWindows;
function isMacOS() {
    return os.type() === "Darwin";
}
exports.isMacOS = isMacOS;
function isLinux() {
    return os.type() === "Linux";
}
exports.isLinux = isLinux;
function isArm64() {
    return os.arch() === "arm64";
}
exports.isArm64 = isArm64;
// help links
exports.defaultHelpLink = "https://aka.ms/teamsfx-envchecker-help";
exports.nodeNotFoundHelpLink = `${exports.defaultHelpLink}#nodenotfound`;
exports.nodeNotSupportedForAzureHelpLink = `${exports.defaultHelpLink}#nodenotsupportedazure-hosting`;
exports.nodeNotSupportedForFunctionsHelpLink = `${exports.defaultHelpLink}#nodenotsupportedazure-functions`;
exports.nodeNotSupportedForSPFxHelpLink = `${exports.defaultHelpLink}#nodenotsupportedspfx-hosting`;
exports.dotnetExplanationHelpLink = `${exports.defaultHelpLink}#overall`;
exports.dotnetFailToInstallHelpLink = `${exports.defaultHelpLink}#failtoinstalldotnet`;
exports.dotnetManualInstallHelpLink = `${exports.defaultHelpLink}#dotnetnotfound`;
exports.dotnetNotSupportTargetVersionHelpLink = `${exports.defaultHelpLink}#dotnetnotsupporttargetversion`;
exports.ngrokInstallHelpLink = `${exports.defaultHelpLink}#failtoinstallngrok`;
exports.Messages = {
    learnMoreButtonText: "Learn more",
    defaultErrorMessage: "Install the required dependencies manually.",
    startInstallFunctionCoreTool: `Downloading and installing @NameVersion.`,
    finishInstallFunctionCoreTool: `Successfully installed @NameVersion.`,
    needReplaceWithFuncCoreToolV3: `You must update to @NameVersion to debug your local functions.`,
    needInstallFuncCoreTool: `You must have @NameVersion installed to debug your local functions.`,
    failToInstallFuncCoreTool: `Failed to install @NameVersion. Install @NameVersion manually.`,
    failToValidateFuncCoreTool: `Failed to validate @NameVersion after installation.`,
    startInstallNgrok: `Downloading and installing @NameVersion.`,
    finishInstallNgrok: `Successfully installed @NameVersion.`,
    needInstallNgrok: `You must have @NameVersion installed to debug your local bot.`,
    failToInstallNgrok: `Failed to install @NameVersion. Install @NameVersion manually.`,
    failToValidateNgrok: `Failed to validate @NameVersion after installation.`,
    downloadDotnet: `Downloading and installing the portable version of @NameVersion, which will be installed to @InstallDir and will not affect your environment.`,
    finishInstallDotnet: `Successfully installed @NameVersion.`,
    useGlobalDotnet: `Using dotnet from PATH:`,
    dotnetInstallStderr: `dotnet-install command failed without error exit code but with non-empty standard error.`,
    dotnetInstallErrorCode: `dotnet-install command failed.`,
    failToInstallDotnet: `Failed to install @NameVersion. Install @NameVersion manually and restart Visual Studio Code.`,
    NodeNotFound: `Cannot find Node.js.

Teams Toolkit requires Node.js; the recommended version is v14.

Click "Learn more" to learn how to install the Node.js.

(If you just installed Node.js, restart Visual Studio Code for the change to take effect.)`,
    NodeNotSupported: `Node.js (@CurrentVersion) is not in the supported version list (@SupportedVersions).

Click "Learn more" to learn more about the supported Node.js versions.

(If you just installed Node.js (@SupportedVersions), restart Visual Studio Code for the change to take effect.)`,
    dotnetNotFound: `Cannot find @NameVersion. For the details why .NET SDK is needed, refer to ${exports.dotnetExplanationHelpLink}`,
    depsNotFound: `Cannot find @SupportedPackages.

Teams Toolkit requires these dependencies.

Click "Install" to install @InstallPackages.`,
    linuxDepsNotFound: `Cannot find @SupportedPackages.

Teams Toolkit requires these dependencies. 

(If you just installed @SupportedPackages, restart Visual Studio Code for the change to take effect.)`,
    linuxDepsNotFoundHelpLinkMessage: `Cannot find @SupportedPackages.

Teams Toolkit requires these dependencies.`,
};
var DepsCheckerEvent;
(function (DepsCheckerEvent) {
    // since FuncToolChecker is disabled and azure functions core tools will be installed as devDependencies now,
    // below events related to FuncToolChecker won't be displayed to end user.
    DepsCheckerEvent["funcCheckSkipped"] = "func-check-skipped";
    DepsCheckerEvent["funcAlreadyInstalled"] = "func-already-installed";
    DepsCheckerEvent["funcInstallCompleted"] = "func-install-completed";
    DepsCheckerEvent["funcInstallError"] = "func-install-error";
    DepsCheckerEvent["funcInstallScriptCompleted"] = "func-install-script-completed";
    DepsCheckerEvent["funcInstallScriptError"] = "func-install-script-error";
    DepsCheckerEvent["funcValidationError"] = "func-validation-error";
    DepsCheckerEvent["dotnetCheckSkipped"] = "dotnet-check-skipped";
    DepsCheckerEvent["dotnetAlreadyInstalled"] = "dotnet-already-installed";
    DepsCheckerEvent["dotnetInstallCompleted"] = "dotnet-install-completed";
    DepsCheckerEvent["dotnetInstallError"] = "dotnet-install-error";
    DepsCheckerEvent["dotnetInstallScriptCompleted"] = "dotnet-install-script-completed";
    DepsCheckerEvent["dotnetInstallScriptError"] = "dotnet-install-script-error";
    DepsCheckerEvent["dotnetValidationError"] = "dotnet-validation-error";
    DepsCheckerEvent["dotnetSearchDotnetSdks"] = "dotnet-search-dotnet-sdks";
    DepsCheckerEvent["clickLearnMore"] = "env-checker-click-learn-more";
    DepsCheckerEvent["clickCancel"] = "env-checker-click-cancel";
    DepsCheckerEvent["ngrokInstallCompleted"] = "ngrok-install-completed";
    DepsCheckerEvent["ngrokInstallError"] = "ngrok-install-error";
    DepsCheckerEvent["ngrokInstallScriptCompleted"] = "ngrok-install-script-completed";
    DepsCheckerEvent["ngrokInstallScriptError"] = "ngrok-install-script-error";
    DepsCheckerEvent["ngrokValidationError"] = "ngrok-validation-error";
    DepsCheckerEvent["nodeNotFound"] = "node-not-found";
    DepsCheckerEvent["nodeNotSupportedForAzure"] = "node-not-supported-for-azure";
    DepsCheckerEvent["nodeNotSupportedForSPFx"] = "node-not-supported-for-spfx";
    DepsCheckerEvent["npmNotFound"] = "npm-not-found";
    DepsCheckerEvent["npmAlreadyInstalled"] = "npm-already-installed";
})(DepsCheckerEvent = exports.DepsCheckerEvent || (exports.DepsCheckerEvent = {}));
var TelemtryMessages;
(function (TelemtryMessages) {
    TelemtryMessages["failedToInstallFunc"] = "failed to install Func core tools.";
    TelemtryMessages["failedToValidateFunc"] = "failed to validate func.";
    TelemtryMessages["NPMNotFound"] = "npm is not found.";
    TelemtryMessages["failedToExecDotnetScript"] = "failed to exec dotnet script.";
    TelemtryMessages["failedToValidateDotnet"] = "failed to validate dotnet.";
    TelemtryMessages["failedToSearchDotnetSdks"] = "failed to search dotnet sdks.";
    TelemtryMessages["failedToInstallNgrok"] = "failed to install ngrok.";
    TelemtryMessages["failedToValidateNgrok"] = "failed to validate ngrok.";
})(TelemtryMessages = exports.TelemtryMessages || (exports.TelemtryMessages = {}));
var TelemetryMessurement;
(function (TelemetryMessurement) {
    TelemetryMessurement["completionTime"] = "completion-time";
})(TelemetryMessurement = exports.TelemetryMessurement || (exports.TelemetryMessurement = {}));
//# sourceMappingURL=common.js.map