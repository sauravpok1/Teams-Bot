"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepsChecker = void 0;
// NOTE:
// DO NOT EDIT this file in function plugin.
// The source of truth of this file is in packages/vscode-extension/src/debug/depsChecker.
// If you need to edit this file, please edit it in the above folder
// and run the scripts (tools/depsChecker/copyfiles.sh or tools/depsChecker/copyfiles.ps1 according to your OS)
// to copy you changes to function plugin.
const common_1 = require("./common");
const errors_1 = require("./errors");
class DepsChecker {
    constructor(logger, adapter, checkers) {
        this._logger = logger;
        this._adapter = adapter;
        this._checkers = checkers;
    }
    // check & install
    async resolve() {
        const shouldContinue = true;
        const validCheckers = await this.check();
        // stop the process when validChecker is null.
        if (validCheckers === null) {
            return !shouldContinue;
        }
        // go to next step when no need to check.
        if (validCheckers.length === 0) {
            this._logger.cleanup();
            return shouldContinue;
        }
        if (common_1.isLinux()) {
            const confirmMessage = await this.generateMsg(validCheckers);
            this._logger.cleanup();
            return await this._adapter.displayLearnMore(confirmMessage, common_1.defaultHelpLink);
        }
        this._adapter.showOutputChannel();
        for (const checker of validCheckers) {
            try {
                await checker.install();
            }
            catch (error) {
                await this._logger.printDetailLog();
                this._logger.cleanup();
                await this._logger.error(`Failed to install '${checker.constructor.name}', error = '${error}'`);
                const continueNext = await this.handleError(error);
                if (!continueNext) {
                    return !shouldContinue;
                }
            }
        }
        this._logger.cleanup();
        return shouldContinue;
    }
    async check() {
        const validCheckers = new Array();
        for (const checker of this._checkers) {
            try {
                if ((await checker.isEnabled()) && !(await checker.isInstalled())) {
                    validCheckers.push(checker);
                }
            }
            catch (error) {
                await this._logger.debug(`Failed to check '${checker.constructor.name}', error = '${error}'`);
                const continueNext = await this.handleError(error);
                if (!continueNext) {
                    return null;
                }
            }
        }
        return validCheckers;
    }
    async generateMsg(checkers) {
        const supportedPackages = [];
        for (const checker of checkers) {
            const info = await checker.getDepsInfo();
            const supportedVersions = info.supportedVersions.map((version) => "v" + version).join(" or ");
            const supportedPackage = `${info.name} (${supportedVersions})`;
            supportedPackages.push(supportedPackage);
        }
        const supportedMessage = supportedPackages.join(" and ");
        return common_1.Messages.linuxDepsNotFound.split("@SupportedPackages").join(supportedMessage);
    }
    async handleError(error) {
        return DepsChecker.handleErrorWithDisplay(error, this._adapter);
    }
    static async handleErrorWithDisplay(error, adapter) {
        if (error instanceof errors_1.NodeNotSupportedError) {
            return await adapter.displayLearnMore(error.message, error.helpLink);
        }
        else if (error instanceof errors_1.NodeNotFoundError) {
            return await adapter.displayLearnMore(error.message, error.helpLink);
        }
        else if (error instanceof errors_1.DepsCheckerError) {
            return await adapter.displayLearnMore(error.message, error.helpLink);
        }
        else {
            return await adapter.displayLearnMore(common_1.Messages.defaultErrorMessage, common_1.defaultHelpLink);
        }
    }
}
exports.DepsChecker = DepsChecker;
//# sourceMappingURL=checker.js.map