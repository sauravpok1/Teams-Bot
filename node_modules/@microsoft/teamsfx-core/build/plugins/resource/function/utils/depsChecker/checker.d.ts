import { DepsCheckerEvent } from "./common";
export interface IDepsChecker {
    isEnabled(): Promise<boolean>;
    isInstalled(): Promise<boolean>;
    install(): Promise<void>;
    getDepsInfo(): Promise<DepsInfo>;
}
export interface IDepsAdapter {
    displayLearnMore: (message: string, link: string) => Promise<boolean>;
    displayWarningMessage: (message: string, buttonText: string, action: () => Promise<boolean>) => Promise<boolean>;
    showOutputChannel: () => void;
    hasTeamsfxBackend(): Promise<boolean>;
    hasTeamsfxBot(): Promise<boolean>;
    dotnetCheckerEnabled(): Promise<boolean>;
    funcToolCheckerEnabled(): Promise<boolean>;
    ngrokCheckerEnabled(): Promise<boolean>;
    nodeCheckerEnabled(): Promise<boolean>;
    runWithProgressIndicator(callback: () => Promise<void>): Promise<void>;
    getResourceDir(): string;
}
export interface IDepsLogger {
    debug(message: string): Promise<boolean>;
    info(message: string): Promise<boolean>;
    warning(message: string): Promise<boolean>;
    error(message: string): Promise<boolean>;
    printDetailLog(): Promise<void>;
    cleanup(): void;
}
export interface IDepsTelemetry {
    sendEvent(eventName: DepsCheckerEvent, properties?: {
        [p: string]: string;
    }, timecost?: number): void;
    sendEventWithDuration(eventName: DepsCheckerEvent, action: () => Promise<void>): Promise<void>;
    sendUserErrorEvent(eventName: DepsCheckerEvent, errorMessage: string): void;
    sendSystemErrorEvent(eventName: DepsCheckerEvent, errorMessage: string, errorStack: string): void;
}
export interface DepsInfo {
    name: string;
    installVersion?: string;
    supportedVersions: string[];
    details: Map<string, string>;
}
export declare class DepsChecker {
    private readonly _adapter;
    private readonly _logger;
    private readonly _checkers;
    constructor(logger: IDepsLogger, adapter: IDepsAdapter, checkers: Array<IDepsChecker>);
    resolve(): Promise<boolean>;
    private check;
    private generateMsg;
    private handleError;
    static handleErrorWithDisplay(error: Error, adapter: IDepsAdapter): Promise<boolean>;
}
//# sourceMappingURL=checker.d.ts.map