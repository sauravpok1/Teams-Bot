"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
const enums_1 = require("../enums");
class TelemetryHelper {
    static setContext(ctx) {
        this.ctx = ctx;
    }
    static fillCommonProperty(properties) {
        var _a, _b;
        properties[enums_1.TelemetryKey.Component] = constants_1.FunctionPluginInfo.pluginName;
        properties[enums_1.TelemetryKey.AppId] =
            ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.envInfo.state.get(constants_1.DependentPluginInfo.solutionPluginName)) === null || _b === void 0 ? void 0 : _b.get(constants_1.DependentPluginInfo.remoteTeamsAppId)) || constants_1.CommonConstants.emptyString;
    }
    static sendStartEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        properties[enums_1.TelemetryKey.Success] = enums_1.TelemetryValue.Success;
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(eventName, e, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        properties[enums_1.TelemetryKey.Success] = enums_1.TelemetryValue.Fail;
        properties[enums_1.TelemetryKey.ErrorMessage] = e.message;
        properties[enums_1.TelemetryKey.ErrorCode] = e.name;
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[enums_1.TelemetryKey.ErrorType] = enums_1.TelemetryValue.SystemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[enums_1.TelemetryKey.ErrorType] = enums_1.TelemetryValue.UserError;
        }
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendResultEvent(eventName, result, properties = {}, measurements = {}) {
        result.match(() => this.sendSuccessEvent(eventName, properties, measurements), (e) => this.sendErrorEvent(eventName, e, properties, measurements));
    }
    static sendScaffoldFallbackEvent(e, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        properties[enums_1.TelemetryKey.ErrorMessage] = e.message;
        properties[enums_1.TelemetryKey.ErrorCode] = e.code;
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(enums_1.FunctionEvent.scaffoldFallback, properties, measurements);
    }
    static sendGeneralEvent(eventName, properties = {}, measurements = {}) {
        var _a, _b;
        this.fillCommonProperty(properties);
        (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.telemetryReporter) === null || _b === void 0 ? void 0 : _b.sendTelemetryEvent(eventName, properties, measurements);
    }
}
exports.TelemetryHelper = TelemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map