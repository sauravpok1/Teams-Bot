"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionProvision = exports.FunctionNaming = void 0;
const constants_1 = require("../constants");
const azure_client_1 = require("../utils/azure-client");
const language_strategy_1 = require("../language-strategy");
const tools_1 = require("../../../../common/tools");
class FunctionNaming {
    static normalize(raw) {
        return raw
            .replace(constants_1.RegularExpr.allCharToBeSkippedInName, constants_1.CommonConstants.emptyString)
            .toLowerCase();
    }
    static concatName(appName, mergedSuffix) {
        const suffix = this.normalize(mergedSuffix).substr(0, constants_1.AzureInfo.suffixLenMax);
        const paddingLength = constants_1.AzureInfo.resourceNameLenMax - suffix.length;
        const normalizedAppName = this.normalize(appName).substr(0, paddingLength);
        return normalizedAppName + suffix;
    }
    static generateStorageAccountName(appName, classSuffix, identSuffix) {
        const mergedSuffix = classSuffix + identSuffix;
        return this.concatName(appName, mergedSuffix);
    }
    static generateFunctionAppName(appName, classSuffix, identSuffix) {
        const mergedSuffix = classSuffix + identSuffix;
        return this.concatName(appName, mergedSuffix);
    }
}
exports.FunctionNaming = FunctionNaming;
class FunctionProvision {
    static async ensureFunctionApp(client, resourceGroupName, location, functionAppName, language, appServiceId, storageConnectionString, version) {
        const settings = Object.entries(Object.assign(Object.assign(Object.assign({}, constants_1.DefaultProvisionConfigs.functionAppStaticSettings), this.getFunctionAppRuntimeSettings(language, version)), this.getFunctionAppStorageSettings(storageConnectionString))).map((kv) => ({
            name: kv[0],
            value: kv[1],
        }));
        const siteEnvelope = Object.assign(Object.assign({}, constants_1.DefaultProvisionConfigs.functionAppConfig(location)), { serverFarmId: appServiceId, siteConfig: {
                appSettings: settings,
            } });
        const site = await azure_client_1.AzureLib.ensureFunctionApp(client, resourceGroupName, functionAppName, siteEnvelope);
        // The ensureFunctionApp may return a site found on Azure,
        // we need to return a site with updated settings for post provision.
        settings.forEach((pair) => {
            pair.name && pair.value && this.pushAppSettings(site, pair.name, pair.value);
        });
        return site;
    }
    // TODO: Extend to support multiple language and versions.
    static getFunctionAppRuntimeSettings(language, version) {
        return language_strategy_1.LanguageStrategyFactory.getStrategy(language).functionAppRuntimeSettings(version);
    }
    static getFunctionAppStorageSettings(storageConnectionString) {
        return {
            WEBSITE_CONTENTAZUREFILECONNECTIONSTRING: storageConnectionString,
            AzureWebJobsDashboard: storageConnectionString,
            AzureWebJobsStorage: storageConnectionString,
        };
    }
    // Push AppSettings when it is not included.
    static pushAppSettings(site, newName, newValue, replace = true) {
        if (!site.siteConfig) {
            site.siteConfig = {};
        }
        if (!site.siteConfig.appSettings) {
            site.siteConfig.appSettings = [];
        }
        const kv = site.siteConfig.appSettings.find((kv) => kv.name === newName);
        if (!kv) {
            site.siteConfig.appSettings.push({
                name: newName,
                value: newValue,
            });
        }
        else if (replace) {
            kv.value = newValue;
        }
    }
    static updateFunctionSettingsSelf(site, endpoint) {
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.functionEndpoint, endpoint);
    }
    // The following APIs are prepared for post-provision.
    static updateFunctionSettingsForAAD(site, clientId, clientSecret, oauthHost, tenantId, applicationIdUris) {
        // Remove tailing "/"
        const normalizedOauthHost = oauthHost.replace(/\/+$/g, "");
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.clientId, clientId);
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.clientSecret, clientSecret);
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.oauthHost, normalizedOauthHost);
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.tenantId, tenantId);
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.applicationIdUris, applicationIdUris);
    }
    static updateFunctionSettingsForSQL(site, identityId, databaseName, sqlEndpoint, identityResourceId) {
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.identityId, identityId);
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.databaseName, databaseName);
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.sqlEndpoint, sqlEndpoint);
        site.identity = {
            type: constants_1.DefaultProvisionConfigs.siteIdentityTypeUserAssigned,
            userAssignedIdentities: {
                [identityResourceId]: {},
            },
        };
    }
    static updateFunctionSettingsForFrontend(site, frontendEndpoint) {
        if (!site.siteConfig) {
            site.siteConfig = {};
        }
        site.siteConfig.cors = {
            allowedOrigins: [frontendEndpoint],
            supportCredentials: false,
        };
    }
    static constructFunctionAuthSettings(clientId, applicationIdUri, oauthHost, tenantId) {
        // Remove tailing "/"
        const normalizedOauthHost = oauthHost.replace(/\/+$/g, "");
        return {
            enabled: true,
            defaultProvider: "AzureActiveDirectory",
            clientId: clientId,
            issuer: `${normalizedOauthHost}/${tenantId}/v2.0`,
            allowedAudiences: [clientId, applicationIdUri],
        };
    }
    static ensureFunctionAllowAppIds(site, extClientIds) {
        var _a, _b;
        if (!site.siteConfig) {
            site.siteConfig = {};
        }
        const clientIds = extClientIds.concat(tools_1.getAllowedAppIds());
        const rawOldClientIds = (_b = (_a = site.siteConfig.appSettings) === null || _a === void 0 ? void 0 : _a.find((kv) => kv.name === constants_1.FunctionAppSettingKeys.allowedAppIds)) === null || _b === void 0 ? void 0 : _b.value;
        const oldClientIds = rawOldClientIds
            ? rawOldClientIds.split(constants_1.DefaultProvisionConfigs.allowAppIdSep).filter((e) => e)
            : [];
        for (const id of oldClientIds) {
            if (!clientIds.includes(id)) {
                clientIds.push(id);
            }
        }
        this.pushAppSettings(site, constants_1.FunctionAppSettingKeys.allowedAppIds, clientIds.join(constants_1.DefaultProvisionConfigs.allowAppIdSep), true);
    }
}
exports.FunctionProvision = FunctionProvision;
//# sourceMappingURL=provision.js.map