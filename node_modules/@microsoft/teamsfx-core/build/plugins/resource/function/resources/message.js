"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessages = exports.InfoMessages = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const path = tslib_1.__importStar(require("path"));
const constants_1 = require("../constants");
class InfoMessages {
}
exports.InfoMessages = InfoMessages;
InfoMessages.askNodeVersion = "Select Node version for the function app.";
InfoMessages.askFunctionName = "Provide a function name.";
InfoMessages.checkDotNetVersion = "Check your .NET Core version.";
InfoMessages.buildFunctionComponent = "Build API Project.";
InfoMessages.dotNetVersionUnexpected = (current, expected) => `The installed .NET Core version is '${current}'. We recommend using version '${expected.join(", ")}'.`;
InfoMessages.installFunctionExtensions = "Installing Azure Functions binding.";
InfoMessages.noChange = "No change was detected since last deployment.";
InfoMessages.skipDeployment = `Skip deployment of function project because no change was detected. To fully redeploy function project, please remove '${path.join(constants_1.FunctionPluginPathInfo.solutionFolderName, constants_1.FunctionPluginPathInfo.funcDeploymentFolderName)}' folder and rerun the command.`;
InfoMessages.failedToCheckDotnet = (error) => `Failed to check .NET SDK, error = '${error}'`;
InfoMessages.failedToInstallDotnet = (error) => `Failed to install .NET SDK, error = '${error}'`;
InfoMessages.getTemplateFrom = (url) => `Retrieving template from '${url}'.`;
InfoMessages.getTemplateFromLocal = "Failed to get newest template from github, trying to use the local template.";
InfoMessages.projectScaffoldAt = (basePath) => `Project scaffolded at '${basePath}'.`;
InfoMessages.functionScaffoldAt = (functionPath) => `Function scaffolded at '${functionPath}'.`;
InfoMessages.generateStorageAccountName = (name) => `Using Azure Storage account name: ${name}.`;
InfoMessages.generateAppServicePlanName = (name) => `Using Azure App Service plan name: ${name}.`;
InfoMessages.generateFunctionAppName = (name) => `Using function app name: ${name}.`;
InfoMessages.ensureResourceProviders = (namespaces, subscriptionId) => `Registering required resource providers ${namespaces.join(",")} for subscription ${subscriptionId}...`;
InfoMessages.checkResource = (resourceType, resourceName, resourceGroup) => `Check resource '${resourceType}' with name '${resourceName}' under resource group '${resourceGroup}'.`;
InfoMessages.resourceCreating = "Resource does not exist. Creating...";
InfoMessages.resourceExists = "Resource exists. Skipping...";
InfoMessages.functionAppConfigIsEmpty = "Function app configuration is empty.";
InfoMessages.functionAppSettingsUpdated = "Function app settings updated.";
InfoMessages.functionAppAuthSettingsUpdated = "Function app auth settings updated.";
InfoMessages.dependPluginDetected = (name) => `Found dependent plugin '${name}'; updating function app settings.`;
InfoMessages.dotnetVersion = (version) => `Found .NET SDK version ${version}.`;
InfoMessages.uploadZipSize = (size) => `Upload zip package (${size}B).`;
InfoMessages.succeedWithRetry = (op, count) => `Successfully completed '${op}'. Retry count is ${count}.`;
InfoMessages.reuseZipNotice = `Found '${constants_1.FunctionPluginPathInfo.solutionFolderName}/${constants_1.FunctionPluginPathInfo.funcDeploymentFolderName}/${constants_1.FunctionPluginPathInfo.funcDeploymentZipCacheFileName}'. ` +
    "If there are errors after deployment, delete this file and retry.";
class ErrorMessages {
}
exports.ErrorMessages = ErrorMessages;
ErrorMessages.invalidFunctionName = `Invalid function name. Function names can only contain alphanumerical characters. The max length is 127 characters.`;
ErrorMessages.functionAlreadyExists = "Function already exists.";
ErrorMessages.noFunctionNameGiven = "No function name was specified.";
ErrorMessages.failToGetConnectionString = "Failed to retrieve Azure Storage account connection string.";
ErrorMessages.failToGetAppServicePlanId = "Failed to retrieve Azure App Service plan ID.";
ErrorMessages.failToGetFunctionAppEndpoint = "Failed to retrieve function app endpoint.";
ErrorMessages.failToFindFunctionApp = "Failed to find function app.";
ErrorMessages.failToQueryPublishCred = "Failed to find publish credential.";
//# sourceMappingURL=message.js.map