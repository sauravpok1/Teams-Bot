"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentityPlugin = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const manager = tslib_1.__importStar(require("@azure/arm-resources"));
const errors_1 = require("./errors");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const config_1 = require("./config");
const constants_1 = require("./constants");
const contextUtils_1 = require("./utils/contextUtils");
const results_1 = require("./results");
const messages_1 = require("./utils/messages");
const telemetryUtil_1 = require("./utils/telemetryUtil");
const commonUtils_1 = require("./utils/commonUtils");
const folder_1 = require("../../../folder");
const question_1 = require("../../solution/fx-solution/question");
const typedi_1 = require("typedi");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const arm_resources_1 = require("@azure/arm-resources");
const constants_2 = require("../../../common/constants");
const common_1 = require("../../../common");
const ResourcePluginContainer_2 = require("../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const tools_1 = require("../../../common/tools");
require("./v2");
let IdentityPlugin = class IdentityPlugin {
    constructor() {
        this.name = "fx-resource-identity";
        this.displayName = "Microsoft Identity";
        this.armTemplateDir = path.resolve(__dirname, "..", "..", "..", "..", "templates", "plugins", "resource", "identity");
        this.config = new config_1.IdentityConfig();
    }
    activate(solutionSettings) {
        if (!common_1.isArmSupportEnabled()) {
            const azureResources = solutionSettings.azureResources ? solutionSettings.azureResources : [];
            return azureResources.includes(question_1.AzureResourceSQL.id);
        }
        else {
            return solutionSettings.hostType === question_1.HostTypeOptionAzure.id;
        }
    }
    async provision(ctx) {
        if (!common_1.isArmSupportEnabled()) {
            return this.provisionImplement(ctx);
        }
        else {
            return teamsfx_api_1.ok(undefined);
        }
    }
    async postProvision(ctx) {
        return teamsfx_api_1.ok(undefined);
    }
    async provisionImplement(ctx) {
        var _a, _b, _c, _d, _e;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(messages_1.Message.startProvision);
        telemetryUtil_1.TelemetryUtils.init(ctx);
        telemetryUtil_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.provision + constants_1.Telemetry.startSuffix);
        this.loadConfig(ctx);
        try {
            (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.info(messages_1.Message.checkProvider);
            const credentials = await ctx.azureAccountProvider.getAccountCredentialAsync();
            const resourceManagementClient = new arm_resources_1.Providers(new arm_resources_1.ResourceManagementClientContext(credentials, this.config.azureSubscriptionId));
            await resourceManagementClient.register(constants_1.Constants.resourceProvider);
        }
        catch (error) {
            (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(messages_1.Message.registerResourceProviderFailed(error === null || error === void 0 ? void 0 : error.message));
        }
        let defaultIdentity = `${ctx.projectSettings.appName}-msi-${this.config.resourceNameSuffix}`;
        defaultIdentity = commonUtils_1.formatEndpoint(defaultIdentity);
        this.config.identityName = defaultIdentity;
        this.config.identityResourceId = `/subscriptions/${this.config.azureSubscriptionId}/resourcegroups/${this.config.resourceGroup}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${this.config.identityName}`;
        (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.debug(messages_1.Message.identityResourceId(this.config.identityResourceId));
        try {
            await this.loadArmTemplate(ctx);
            this.parameters.parameters.location.value = this.config.location;
            this.parameters.parameters.identityName.value = this.config.identityName;
            await this.provisionWithArmTemplate(ctx);
        }
        catch (error) {
            const errorCode = error.source + "." + error.name;
            const errorType = error instanceof teamsfx_api_1.SystemError ? constants_1.Telemetry.systemError : constants_1.Telemetry.userError;
            let errorMessage = error.message;
            if (error.innerError) {
                errorMessage += ` Detailed error: ${error.innerError.message}.`;
            }
            telemetryUtil_1.TelemetryUtils.sendErrorEvent(constants_1.Telemetry.stage.provision, errorCode, errorType, errorMessage);
            return teamsfx_api_1.err(error);
        }
        ctx.config.set(constants_1.Constants.identityName, this.config.identityName);
        ctx.config.set(constants_1.Constants.identityClientId, this.config.identityClientId);
        ctx.config.set(constants_1.Constants.identityResourceId, this.config.identityResourceId);
        telemetryUtil_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.provision, true);
        (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(messages_1.Message.endProvision);
        return teamsfx_api_1.ok(undefined);
    }
    async updateArmTemplates(ctx) {
        const result = {
            Reference: {
                identityName: constants_1.IdentityBicep.identityName,
                identityClientId: constants_1.IdentityBicep.identityClientId,
                identityResourceId: constants_1.IdentityBicep.identityResourceId,
                identityPrincipalId: constants_1.IdentityBicep.identityPrincipalId,
            },
        };
        return teamsfx_api_1.ok(result);
    }
    async generateArmTemplates(ctx) {
        const azureSolutionSettings = ctx.projectSettings.solutionSettings;
        const plugins = ResourcePluginContainer_2.getActivatedV2ResourcePlugins(azureSolutionSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDirectory = path.join(folder_1.getTemplatesFolder(), "plugins", "resource", "identity", "bicep");
        const provisionOrchestration = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_2.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(path.join(bicepTemplateDirectory, constants_1.IdentityBicepFile.moduleTempalteFilename), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { identity: provisionModules },
            },
            Reference: {
                identityName: constants_1.IdentityBicep.identityName,
                identityClientId: constants_1.IdentityBicep.identityClientId,
                identityResourceId: constants_1.IdentityBicep.identityResourceId,
                identityPrincipalId: constants_1.IdentityBicep.identityPrincipalId,
            },
        };
        return teamsfx_api_1.ok(result);
    }
    async executeUserTask(func, context) {
        if (func.method === "migrateV1Project") {
            return teamsfx_api_1.ok(undefined); // Not need to do anything when migrate V1 project
        }
        return teamsfx_api_1.ok(undefined);
    }
    async loadArmTemplate(ctx) {
        var _a;
        try {
            const templatesFolder = path.resolve(folder_1.getTemplatesFolder(), "plugins", "resource", "identity");
            const templatePath = path.resolve(templatesFolder, "template.json");
            this.template = await fs.readJson(templatePath);
            const paraPath = path.resolve(templatesFolder, "parameters.json");
            this.parameters = await fs.readJson(paraPath);
        }
        catch (_error) {
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.error(errors_1.ErrorMessage.IdentityLoadFileError.message() + `:${_error.message}`);
            const error = results_1.ResultFactory.SystemError(errors_1.ErrorMessage.IdentityLoadFileError.name, errors_1.ErrorMessage.IdentityLoadFileError.message(), _error);
            throw error;
        }
    }
    async provisionWithArmTemplate(ctx) {
        var _a, _b, _c, _d;
        try {
            const model = {
                properties: {
                    template: this.template,
                    parameters: this.parameters.parameters,
                    mode: "Incremental",
                },
            };
            const credential = await ((_a = ctx.azureAccountProvider) === null || _a === void 0 ? void 0 : _a.getAccountCredentialAsync());
            const client = new manager.ResourceManagementClient(credential, this.config.azureSubscriptionId);
            const deployName = constants_1.Constants.deployName;
            (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.info(messages_1.Message.provisionIdentity);
            await client.deployments.createOrUpdate(this.config.resourceGroup, deployName, model);
            (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(messages_1.Message.getIdentityId);
            const response = await client.resources.getById(this.config.identityResourceId, constants_1.Constants.apiVersion);
            this.config.identityClientId = response.properties.clientId;
        }
        catch (_error) {
            (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.error(errors_1.ErrorMessage.IdentityProvisionError.message(this.config.identityName) + `:${_error.message}`);
            const error = results_1.ResultFactory.UserError(errors_1.ErrorMessage.IdentityProvisionError.name, errors_1.ErrorMessage.IdentityProvisionError.message(this.config.identityName), _error);
            throw error;
        }
    }
    loadConfig(ctx) {
        this.config.azureSubscriptionId = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.subscriptionId);
        this.loadConfigResourceGroup(ctx);
        this.config.resourceNameSuffix = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.resourceNameSuffix);
        this.config.location = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.location);
    }
    loadConfigResourceGroup(ctx) {
        if (!common_1.isArmSupportEnabled()) {
            this.config.resourceGroup = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.resourceGroupName);
        }
    }
};
IdentityPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.IdentityPlugin)
], IdentityPlugin);
exports.IdentityPlugin = IdentityPlugin;
exports.default = new IdentityPlugin();
//# sourceMappingURL=index.js.map