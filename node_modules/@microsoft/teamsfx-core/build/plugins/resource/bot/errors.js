"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateV1ProjectError = exports.RegisterResourceProviderError = exports.InvalidBotDataError = exports.FreeServerFarmsQuotaError = exports.CommandExecutionError = exports.TemplateProjectNotFoundError = exports.DownloadError = exports.MessageEndpointUpdatingError = exports.ZipDeployError = exports.ListPublishingCredentialsError = exports.PackDirExistenceError = exports.ConfigValidationError = exports.ConfigUpdatingError = exports.UnzipError = exports.MissingSubscriptionRegistrationError = exports.ProvisionError = exports.ClientCreationError = exports.TemplateZipFallbackError = exports.CreateAADSecretError = exports.CreateAADAppError = exports.AADAppCheckingError = exports.UserInputsError = exports.CheckThrowSomethingMissing = exports.SomethingMissingError = exports.PreconditionError = exports.PluginError = exports.ErrorType = void 0;
const constants_1 = require("../aad/constants");
const errorCodes_1 = require("../aad/errorCodes");
const errors_1 = require("../aad/errors");
const constants_2 = require("./constants");
const messages_1 = require("./resources/messages");
const strings_1 = require("./resources/strings");
const result_1 = require("./result");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
class PluginError extends Error {
    constructor(type, name, details, suggestions, innerError, helpLink) {
        super(details);
        this.name = name;
        this.details = details;
        this.suggestions = suggestions;
        this.errorType = type;
        this.innerError = innerError;
        this.helpLink = helpLink;
        this.inferFromInnerError();
        Object.setPrototypeOf(this, PluginError.prototype);
    }
    genMessage() {
        let msg = `${this.message} `;
        if (this.suggestions.length > 0) {
            msg += `Suggestions: ${this.suggestions.join(" ")}`;
        }
        return msg;
    }
    inferFromInnerError() {
        var _a, _b, _c, _d;
        if (!this.innerError)
            return;
        const errorCode = (_c = (_b = (_a = this.innerError.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.code;
        const helpLink = errorCodes_1.GraphErrorCodes.get(errorCode);
        if (helpLink)
            this.helpLink = helpLink;
        const statusCode = (_d = this.innerError.response) === null || _d === void 0 ? void 0 : _d.status;
        if (statusCode &&
            statusCode >= constants_1.Constants.statusCodeUserError &&
            statusCode < constants_1.Constants.statusCodeServerError) {
            this.errorType = ErrorType.User;
        }
        else {
            this.errorType = ErrorType.System;
        }
    }
}
exports.PluginError = PluginError;
class PreconditionError extends PluginError {
    constructor(message, suggestions) {
        super(ErrorType.User, constants_2.ErrorNames.PRECONDITION_ERROR, message, suggestions);
    }
}
exports.PreconditionError = PreconditionError;
class SomethingMissingError extends PreconditionError {
    constructor(something) {
        super(messages_1.Messages.SomethingIsMissing(something), [messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.SomethingMissingError = SomethingMissingError;
function CheckThrowSomethingMissing(name, value) {
    if (!value) {
        throw new SomethingMissingError(name);
    }
}
exports.CheckThrowSomethingMissing = CheckThrowSomethingMissing;
class UserInputsError extends PluginError {
    constructor(input, value) {
        super(ErrorType.User, constants_2.ErrorNames.USER_INPUTS_ERROR, messages_1.Messages.SomethingIsInvalidWithValue(input, value), [messages_1.Messages.InputValidValueForSomething(input)]);
    }
}
exports.UserInputsError = UserInputsError;
class AADAppCheckingError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, constants_2.ErrorNames.CALL_APPSTUDIO_API_ERROR, messages_1.Messages.FailToCallAppStudioForCheckingAADApp, [messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.AADAppCheckingError = AADAppCheckingError;
class CreateAADAppError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, errors_1.CreateAppError.name, errors_1.CreateAppError.message(), [], innerError);
    }
}
exports.CreateAADAppError = CreateAADAppError;
class CreateAADSecretError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, errors_1.CreateSecretError.name, errors_1.CreateSecretError.message(), [], innerError);
    }
}
exports.CreateAADSecretError = CreateAADSecretError;
class TemplateZipFallbackError extends PluginError {
    constructor() {
        super(ErrorType.User, "TemplateZipFallbackError", "Failed to download zip package and open local zip package.", [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.TemplateZipFallbackError = TemplateZipFallbackError;
class ClientCreationError extends PluginError {
    constructor(clientName, innerError) {
        super(ErrorType.User, constants_2.ErrorNames.CLIENT_CREATION_ERROR, messages_1.Messages.FailToCreateSomeClient(clientName), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ClientCreationError = ClientCreationError;
class ProvisionError extends PluginError {
    constructor(resource, innerError) {
        super(ErrorType.User, constants_2.ErrorNames.PROVISION_ERROR, messages_1.Messages.FailToProvisionSomeResource(resource), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ProvisionError = ProvisionError;
class MissingSubscriptionRegistrationError extends PluginError {
    constructor() {
        super(ErrorType.User, constants_2.ErrorNames.MISSING_SUBSCRIPTION_REGISTRATION_ERROR, messages_1.Messages.TheSubsNotRegisterToUseBotService, [messages_1.Messages.RegisterYouSubsToUseBot, messages_1.Messages.ClickHelpButtonForDetails], undefined, result_1.FxBotPluginResultFactory.defaultHelpLink);
    }
}
exports.MissingSubscriptionRegistrationError = MissingSubscriptionRegistrationError;
class UnzipError extends PluginError {
    constructor(path) {
        super(ErrorType.User, "UnzipError", "Failed to unzip templates and write to disk.", [
            messages_1.Messages.CheckOutputLogAndTryToFix,
            messages_1.Messages.ReopenWorkingDir(path),
            messages_1.Messages.RetryTheCurrentStep,
        ]);
    }
}
exports.UnzipError = UnzipError;
class ConfigUpdatingError extends PluginError {
    constructor(configName, innerError) {
        super(ErrorType.User, constants_2.ErrorNames.CONFIG_UPDATING_ERROR, messages_1.Messages.FailToUpdateConfigs(configName), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ConfigUpdatingError = ConfigUpdatingError;
class ConfigValidationError extends PluginError {
    constructor(name, value) {
        super(ErrorType.User, constants_2.ErrorNames.CONFIG_VALIDATION_ERROR, messages_1.Messages.SomethingIsInvalidWithValue(name, value), [messages_1.Messages.RecoverConfig, messages_1.Messages.RecreateTheProject]);
    }
}
exports.ConfigValidationError = ConfigValidationError;
class PackDirExistenceError extends PluginError {
    constructor() {
        super(ErrorType.User, constants_2.ErrorNames.PACK_DIR_EXISTENCE_ERROR, messages_1.Messages.SomethingIsNotExisting("pack directory"), [messages_1.Messages.RecreateTheProject]);
    }
}
exports.PackDirExistenceError = PackDirExistenceError;
class ListPublishingCredentialsError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, constants_2.ErrorNames.LIST_PUBLISHING_CREDENTIALS_ERROR, messages_1.Messages.FailToListPublishingCredentials, [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ListPublishingCredentialsError = ListPublishingCredentialsError;
class ZipDeployError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, constants_2.ErrorNames.ZIP_DEPLOY_ERROR, messages_1.Messages.FailToDoZipDeploy, [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.ZipDeployError = ZipDeployError;
class MessageEndpointUpdatingError extends PluginError {
    constructor(endpoint, innerError) {
        super(ErrorType.User, constants_2.ErrorNames.MSG_ENDPOINT_UPDATING_ERROR, messages_1.Messages.FailToUpdateMessageEndpoint(endpoint), [messages_1.Messages.CheckOutputLogAndTryToFix, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.MessageEndpointUpdatingError = MessageEndpointUpdatingError;
class DownloadError extends PluginError {
    constructor(url, innerError) {
        super(ErrorType.User, constants_2.ErrorNames.DOWNLOAD_ERROR, messages_1.Messages.FailToDownloadFrom(url), ["Please check your network status and retry."], innerError);
    }
}
exports.DownloadError = DownloadError;
class TemplateProjectNotFoundError extends PluginError {
    constructor() {
        super(ErrorType.User, constants_2.ErrorNames.TEMPLATE_PROJECT_NOT_FOUND_ERROR, messages_1.Messages.SomethingIsNotFound("Template project for scaffold"), [messages_1.Messages.RetryTheCurrentStep]);
    }
}
exports.TemplateProjectNotFoundError = TemplateProjectNotFoundError;
class CommandExecutionError extends PluginError {
    constructor(cmd, innerError) {
        super(ErrorType.User, constants_2.ErrorNames.COMMAND_EXECUTION_ERROR, messages_1.Messages.CommandExecutionFailed(cmd), [messages_1.Messages.CheckCommandOutputAndTryToFixIt, messages_1.Messages.RetryTheCurrentStep], innerError);
    }
}
exports.CommandExecutionError = CommandExecutionError;
class FreeServerFarmsQuotaError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, constants_2.ErrorNames.FREE_SERVER_FARMS_QUOTA_ERROR, messages_1.Messages.MaxFreeAppServicePlanIsTen, [messages_1.Messages.DeleteFreeAppServicePlanOrChangeSku, messages_1.Messages.ClickHelpButtonForDetails], innerError, result_1.FxBotPluginResultFactory.defaultHelpLink);
    }
}
exports.FreeServerFarmsQuotaError = FreeServerFarmsQuotaError;
class InvalidBotDataError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, constants_2.ErrorNames.INVALID_BOT_DATA_ERROR, innerError.message, [messages_1.Messages.DeleteExistingBotChannelRegistration, messages_1.Messages.DeleteBotAfterAzureAccountSwitching], innerError);
    }
}
exports.InvalidBotDataError = InvalidBotDataError;
class RegisterResourceProviderError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, "RegisterResourceProviderError", "Failed to register required resource provider for your app.", [
            messages_1.Messages.RegisterRequiredRP(constants_2.AzureConstants.requiredResourceProviders),
            messages_1.Messages.CheckOutputLogAndTryToFix,
        ], innerError);
    }
}
exports.RegisterResourceProviderError = RegisterResourceProviderError;
// for the use of migrating v1 project
class MigrateV1ProjectError extends PluginError {
    constructor(innerError) {
        super(ErrorType.User, "MigrateV1ProjectError", `Failed to migrate Teams Toolkit V1 project into '${strings_1.CommonStrings.BOT_WORKING_DIR_NAME}'.`, [messages_1.Messages.RollbackToV1Project, messages_1.Messages.CheckOutputLogAndTryToFix], innerError);
    }
}
exports.MigrateV1ProjectError = MigrateV1ProjectError;
//# sourceMappingURL=errors.js.map