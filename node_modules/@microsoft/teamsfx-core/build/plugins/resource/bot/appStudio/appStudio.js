"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStudio = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const errors_1 = require("../errors");
const strings_1 = require("../resources/strings");
const retryHandler_1 = require("../utils/retryHandler");
const __1 = require("../../../..");
const messages_1 = require("../resources/messages");
const logger_1 = require("../logger");
class AppStudio {
    static newAxiosInstance(accessToken) {
        if (!accessToken) {
            throw new errors_1.SomethingMissingError(strings_1.ConfigNames.APPSTUDIO_TOKEN);
        }
        const instance = axios_1.default.create({
            headers: {
                post: {
                    Authorization: `Bearer ${accessToken}`,
                    "Client-Source": "teamstoolkit",
                },
                get: {
                    Authorization: `Bearer ${accessToken}`,
                    "Client-Source": "teamstoolkit",
                },
            },
        });
        instance.interceptors.request.use(function (config) {
            config.params = Object.assign({ teamstoolkit: true }, config.params);
            return config;
        });
        return instance;
    }
    static async createAADAppV2(accessToken, aadApp) {
        const axiosInstance = AppStudio.newAxiosInstance(accessToken);
        let response = undefined;
        try {
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudio.baseUrl}/api/aadapp/v2`, aadApp));
        }
        catch (e) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP);
        }
        const app = response.data;
        if (!app || !app.id || !app.appId) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP);
        }
        return app;
    }
    static async createAADApp(accessToken, aadApp) {
        const axiosInstance = AppStudio.newAxiosInstance(accessToken);
        let response = undefined;
        try {
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudio.baseUrl}/api/aadapp`, aadApp));
        }
        catch (e) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP);
        }
        const app = response.data;
        if (!app || !app.id || !app.objectId) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_APP);
        }
        return app;
    }
    static async isAADAppExisting(accessToken, objectId) {
        const axiosInstance = AppStudio.newAxiosInstance(accessToken);
        let response = undefined;
        try {
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.get(`${AppStudio.baseUrl}/api/aadapp/v2/${objectId}`));
        }
        catch (e) {
            throw new errors_1.AADAppCheckingError(e);
        }
        if (!response || !response.data) {
            return false;
        }
        const app = response.data;
        if (!app || !app.id || !app.appId) {
            return false;
        }
        return true;
    }
    static async createAADAppPassword(accessToken, aadAppObjectId) {
        const axiosInstance = AppStudio.newAxiosInstance(accessToken);
        let response = undefined;
        try {
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudio.baseUrl}/api/aadapp/${aadAppObjectId}/passwords`));
        }
        catch (e) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_CLIENT_SECRET, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_CLIENT_SECRET);
        }
        const app = response.data;
        if (!app) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.AAD_CLIENT_SECRET);
        }
        return app;
    }
    static async createBotRegistration(accessToken, registration) {
        const axiosInstance = AppStudio.newAxiosInstance(accessToken);
        let response = undefined;
        try {
            if (registration.botId) {
                const getBotRegistrationResponse = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.get(`${AppStudio.baseUrl}/api/botframework/${registration.botId}`), true);
                if (getBotRegistrationResponse && getBotRegistrationResponse.data) {
                    logger_1.Logger.info(messages_1.Messages.BotResourceExist("Appstudio"));
                    return;
                }
            }
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudio.baseUrl}/api/botframework`, registration));
        }
        catch (e) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.APPSTUDIO_BOT_REGISTRATION, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.APPSTUDIO_BOT_REGISTRATION);
        }
        return;
    }
    static async updateMessageEndpoint(accessToken, botId, registration) {
        const axiosInstance = AppStudio.newAxiosInstance(accessToken);
        let response = undefined;
        try {
            response = await retryHandler_1.RetryHandler.Retry(() => axiosInstance.post(`${AppStudio.baseUrl}/api/botframework/${botId}`, registration));
        }
        catch (e) {
            throw new errors_1.MessageEndpointUpdatingError(registration.messagingEndpoint, e);
        }
        if (!response || !response.data) {
            throw new errors_1.ConfigUpdatingError(strings_1.ConfigNames.MESSAGE_ENDPOINT);
        }
        return;
    }
}
exports.AppStudio = AppStudio;
AppStudio.baseUrl = __1.getAppStudioEndpoint();
//# sourceMappingURL=appStudio.js.map