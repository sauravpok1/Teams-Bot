"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBarFactory = void 0;
class ProgressBarFactory {
    static async newProgressBar(name, steps_num, context) {
        var _a, _b;
        if (ProgressBarFactory.progressBars.has(name)) {
            const handler = ProgressBarFactory.progressBars.get(name);
            await (handler === null || handler === void 0 ? void 0 : handler.end(true));
            return handler;
        }
        const handler = (_a = context.ui) === null || _a === void 0 ? void 0 : _a.createProgressBar(name, steps_num);
        if (!handler) {
            (_b = context.logProvider) === null || _b === void 0 ? void 0 : _b.warning(`Fail to create progress bar for ${name}.`);
        }
        ProgressBarFactory.progressBars.set(name, handler);
        return handler;
    }
    static async closeProgressBar(success, name) {
        var _a, _b;
        if (name) {
            await ((_a = ProgressBarFactory.progressBars.get(name)) === null || _a === void 0 ? void 0 : _a.end(success));
        }
        else {
            for (const key of ProgressBarFactory.progressBars.keys()) {
                await ((_b = ProgressBarFactory.progressBars.get(key)) === null || _b === void 0 ? void 0 : _b.end(success));
            }
        }
    }
}
exports.ProgressBarFactory = ProgressBarFactory;
// To store working progress bars.
ProgressBarFactory.progressBars = new Map();
//# sourceMappingURL=progressBars.js.map