"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAppServicePlanConfig = exports.convertToTelemetryName = exports.convertToLangKey = exports.isHttpCodeOkOrCreated = exports.existsInEnumValues = exports.checkAndSaveConfig = exports.execute = exports.isDomainValidForAzureWebApp = exports.isValidBotChannelRegName = exports.isValidAppServicePlanName = exports.isValidWebAppSiteName = exports.zipAFolder = exports.genUUID = exports.toBase64 = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const js_base64_1 = require("js-base64");
const node_ts_uuid_1 = require("node-ts-uuid");
const child_process_1 = require("child_process");
const url_parse_1 = tslib_1.__importDefault(require("url-parse"));
const adm_zip_1 = tslib_1.__importDefault(require("adm-zip"));
const constants_1 = require("../constants");
const programmingLanguage_1 = require("../enums/programmingLanguage");
function toBase64(source) {
    return js_base64_1.Base64.encode(source);
}
exports.toBase64 = toBase64;
function genUUID() {
    return node_ts_uuid_1.Uuid.generate();
}
exports.genUUID = genUUID;
function zipAFolder(sourceDir, notIncluded, mustIncluded) {
    const zip = new adm_zip_1.default();
    zip.addLocalFolder(sourceDir, "", (filename) => {
        if (mustIncluded) {
            const hit = mustIncluded.find((mustItem) => {
                return filename.startsWith(mustItem);
            });
            if (hit) {
                return true;
            }
        }
        if (notIncluded) {
            const hit = notIncluded.find((notIncludedItem) => {
                return filename.startsWith(notIncludedItem);
            });
            return !hit;
        }
        return true;
    });
    return zip.toBuffer();
}
exports.zipAFolder = zipAFolder;
function isValidWebAppSiteName(name) {
    return constants_1.RegularExprs.WEB_APP_SITE_NAME.test(name);
}
exports.isValidWebAppSiteName = isValidWebAppSiteName;
function isValidAppServicePlanName(name) {
    return constants_1.RegularExprs.APP_SERVICE_PLAN_NAME.test(name);
}
exports.isValidAppServicePlanName = isValidAppServicePlanName;
function isValidBotChannelRegName(name) {
    return constants_1.RegularExprs.BOT_CHANNEL_REG_NAME.test(name);
}
exports.isValidBotChannelRegName = isValidBotChannelRegName;
function isDomainValidForAzureWebApp(url) {
    return url_parse_1.default(url).hostname.endsWith(constants_1.WebAppConstants.WEB_APP_SITE_DOMAIN);
}
exports.isDomainValidForAzureWebApp = isDomainValidForAzureWebApp;
async function execute(command, workingDir) {
    return new Promise((resolve, reject) => {
        if (!workingDir) {
            workingDir = __dirname;
        }
        child_process_1.exec(command, { cwd: workingDir }, (error, standardOutput) => {
            if (error) {
                reject(error);
                return;
            }
            resolve(standardOutput);
        });
    });
}
exports.execute = execute;
function checkAndSaveConfig(context, key, value) {
    if (!value) {
        return;
    }
    context.config.set(key, value);
}
exports.checkAndSaveConfig = checkAndSaveConfig;
function existsInEnumValues(value, targetEnum) {
    return Object.values(targetEnum).find((itemValue) => value === itemValue) !== undefined;
}
exports.existsInEnumValues = existsInEnumValues;
function isHttpCodeOkOrCreated(code) {
    return [200, 201].includes(code);
}
exports.isHttpCodeOkOrCreated = isHttpCodeOkOrCreated;
function convertToLangKey(programmingLanguage) {
    switch (programmingLanguage) {
        case programmingLanguage_1.ProgrammingLanguage.JavaScript: {
            return "js";
        }
        case programmingLanguage_1.ProgrammingLanguage.TypeScript: {
            return "ts";
        }
        default: {
            return "js";
        }
    }
}
exports.convertToLangKey = convertToLangKey;
function convertToTelemetryName(raw) {
    return raw.toLowerCase().replace(/ /g, "-");
}
exports.convertToTelemetryName = convertToTelemetryName;
function generateAppServicePlanConfig(location, skuName) {
    return {
        location: location,
        kind: "app",
        sku: {
            name: skuName,
        },
    };
}
exports.generateAppServicePlanConfig = generateAppServicePlanConfig;
//# sourceMappingURL=common.js.map