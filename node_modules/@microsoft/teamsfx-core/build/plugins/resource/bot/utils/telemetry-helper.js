"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryHelper = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("../constants");
const strings_1 = require("../resources/strings");
class telemetryHelper {
    static fillCommonProperty(ctx, properties) {
        var _a;
        properties[constants_1.TelemetryKeys.Component] = strings_1.PluginBot.PLUGIN_NAME;
        properties[constants_1.TelemetryKeys.AppId] =
            ((_a = ctx.envInfo.state
                .get(strings_1.PluginSolution.PLUGIN_NAME)) === null || _a === void 0 ? void 0 : _a.get(strings_1.PluginSolution.REMOTE_TEAMS_APPID)) || "";
    }
    static sendStartEvent(ctx, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Success;
        this.fillCommonProperty(ctx, properties);
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(`${eventName}-start`, properties, measurements);
    }
    static sendSuccessEvent(ctx, eventName, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Success;
        this.fillCommonProperty(ctx, properties);
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendErrorEvent(ctx, eventName, e, properties = {}, measurements = {}) {
        var _a;
        properties[constants_1.TelemetryKeys.Success] = constants_1.TelemetryValues.Fail;
        properties[constants_1.TelemetryKeys.ErrorMessage] = e.message;
        properties[constants_1.TelemetryKeys.ErrorCode] = e.name;
        this.fillCommonProperty(ctx, properties);
        if (e instanceof teamsfx_api_1.SystemError) {
            properties[constants_1.TelemetryKeys.ErrorType] = constants_1.TelemetryValues.SystemError;
        }
        else if (e instanceof teamsfx_api_1.UserError) {
            properties[constants_1.TelemetryKeys.ErrorType] = constants_1.TelemetryValues.UserError;
        }
        (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, properties, measurements);
    }
    static sendResultEvent(ctx, eventName, result, properties = {}, measurements = {}) {
        result.match(() => this.sendSuccessEvent(ctx, eventName, properties, measurements), (e) => this.sendErrorEvent(ctx, eventName, e, properties, measurements));
    }
}
exports.telemetryHelper = telemetryHelper;
//# sourceMappingURL=telemetry-helper.js.map