"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamsBotImpl = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const aadRegistration_1 = require("./aadRegistration");
const factory = tslib_1.__importStar(require("./clientFactory"));
const utils = tslib_1.__importStar(require("./utils/common"));
const languageStrategy_1 = require("./languageStrategy");
const messages_1 = require("./resources/messages");
const result_1 = require("./result");
const constants_1 = require("./constants");
const zipDeploy_1 = require("./utils/zipDeploy");
const appService = tslib_1.__importStar(require("@azure/arm-appservice"));
const fs = tslib_1.__importStar(require("fs-extra"));
const strings_1 = require("./resources/strings");
const errors_1 = require("./errors");
const teamsBotConfig_1 = require("./configs/teamsBotConfig");
const progressBars_1 = require("./progressBars");
const pluginActRoles_1 = require("./enums/pluginActRoles");
const resourceNameFactory_1 = require("./utils/resourceNameFactory");
const appStudio_1 = require("./appStudio/appStudio");
const logger_1 = require("./logger");
const deployMgr_1 = require("./deployMgr");
const botAuthCredential_1 = require("./botAuthCredential");
const azureOps_1 = require("./azureOps");
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../../folder");
const constants_2 = require("../../../common/constants");
const common_1 = require("../../../common");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const tools_1 = require("../../../common/tools");
class TeamsBotImpl {
    constructor() {
        // Made config plubic, because expect the upper layer to fill inputs.
        this.config = new teamsBotConfig_1.TeamsBotConfig();
    }
    async getAzureAccountCredenial() {
        var _a, _b;
        const serviceClientCredentials = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.azureAccountProvider) === null || _b === void 0 ? void 0 : _b.getAccountCredentialAsync());
        if (!serviceClientCredentials) {
            throw new errors_1.PreconditionError(messages_1.Messages.FailToGetAzureCreds, [messages_1.Messages.TryLoginAzure]);
        }
        return serviceClientCredentials;
    }
    async scaffold(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.ScaffoldingBot);
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.SCAFFOLD_TITLE, constants_1.ProgressBarConstants.SCAFFOLD_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.SCAFFOLD_STEP_START));
        // 1. Copy the corresponding template project into target directory.
        // Get group name.
        let group_name = constants_1.TemplateProjectsConstants.GROUP_NAME_BOT;
        if (!this.config.actRoles || this.config.actRoles.length === 0) {
            throw new errors_1.SomethingMissingError("act roles");
        }
        const hasBot = this.config.actRoles.includes(pluginActRoles_1.PluginActRoles.Bot);
        const hasMsgExt = this.config.actRoles.includes(pluginActRoles_1.PluginActRoles.MessageExtension);
        if (hasBot && hasMsgExt) {
            group_name = constants_1.TemplateProjectsConstants.GROUP_NAME_BOT_MSGEXT;
        }
        else if (hasBot) {
            group_name = constants_1.TemplateProjectsConstants.GROUP_NAME_BOT;
        }
        else {
            group_name = constants_1.TemplateProjectsConstants.GROUP_NAME_MSGEXT;
        }
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.SCAFFOLD_STEP_FETCH_ZIP));
        await languageStrategy_1.LanguageStrategy.getTemplateProject(group_name, this.config);
        this.config.saveConfigIntoContext(context);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyScaffoldedBot);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async preProvision(context) {
        var _a, _b;
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.PreProvisioningBot);
        // Preconditions checking.
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.PROGRAMMING_LANGUAGE, this.config.scaffold.programmingLanguage);
        if (!common_1.isArmSupportEnabled()) {
            // CheckThrowSomethingMissing(ConfigNames.GRAPH_TOKEN, this.config.scaffold.graphToken);
            errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.SUBSCRIPTION_ID, this.config.provision.subscriptionId);
            errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.RESOURCE_GROUP, this.config.provision.resourceGroup);
            errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCATION, this.config.provision.location);
            errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.SKU_NAME, this.config.provision.skuName);
            errors_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, (_a = this.ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.appName);
            if (!this.config.provision.siteName) {
                this.config.provision.siteName = resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, (_b = this.ctx.projectSettings) === null || _b === void 0 ? void 0 : _b.appName, constants_1.MaxLengths.WEB_APP_SITE_NAME);
                logger_1.Logger.debug(`Site name generated to use is ${this.config.provision.siteName}.`);
            }
        }
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async provision(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.ProvisioningBot);
        // Create and register progress bar for cleanup.
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.PROVISION_TITLE, constants_1.ProgressBarConstants.PROVISION_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.PROVISION_STEP_START));
        // 0. Check Resource Provider
        const azureCredential = await this.getAzureAccountCredenial();
        const rpClient = factory.createResourceProviderClient(azureCredential, this.config.provision.subscriptionId);
        await factory.ensureResourceProvider(rpClient, constants_1.AzureConstants.requiredResourceProviders);
        // 1. Do bot registration.
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.PROVISION_STEP_BOT_REG));
        const botAuthCreds = await this.createOrGetBotAppRegistration();
        if (!common_1.isArmSupportEnabled()) {
            await this.provisionBotServiceOnAzure(botAuthCreds);
            await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.PROVISION_STEP_WEB_APP));
            // 2. Provision azure web app for hosting bot project.
            await this.provisionWebApp();
            this.config.saveConfigIntoContext(context);
            logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedBot);
        }
        return result_1.FxBotPluginResultFactory.Success();
    }
    async updateArmTemplates(ctx) {
        logger_1.Logger.info(messages_1.Messages.UpdatingArmTemplatesBot);
        const azureSolutionSettings = ctx.projectSettings.solutionSettings;
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(azureSolutionSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.PathInfo.BicepTemplateRelativeDir);
        const configModule = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.PathInfo.ConfigurationModuleTemplateFileName), pluginCtx);
        const result = {
            Reference: {
                resourceId: constants_1.BotBicep.resourceId,
                hostName: constants_1.BotBicep.hostName,
                webAppEndpoint: constants_1.BotBicep.webAppEndpoint,
            },
            Configuration: {
                Modules: { bot: configModule },
            },
        };
        logger_1.Logger.info(messages_1.Messages.SuccessfullyUpdateArmTemplatesBot);
        return result_1.FxBotPluginResultFactory.Success(result);
    }
    async generateArmTemplates(ctx) {
        logger_1.Logger.info(messages_1.Messages.GeneratingArmTemplatesBot);
        const azureSolutionSettings = ctx.projectSettings.solutionSettings;
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(azureSolutionSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.PathInfo.BicepTemplateRelativeDir);
        const provisionOrchestration = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.PathInfo.ProvisionModuleTemplateFileName), pluginCtx);
        const configOrchestration = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ConfigFileName), pluginCtx);
        const configModule = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.PathInfo.ConfigurationModuleTemplateFileName), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { bot: provisionModules },
            },
            Configuration: {
                Orchestration: configOrchestration,
                Modules: { bot: configModule },
            },
            Reference: {
                resourceId: constants_1.BotBicep.resourceId,
                hostName: constants_1.BotBicep.hostName,
                webAppEndpoint: constants_1.BotBicep.webAppEndpoint,
            },
            Parameters: JSON.parse(await fs.readFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ParameterFileName), constants_2.ConstantString.UTF8Encoding)),
        };
        logger_1.Logger.info(messages_1.Messages.SuccessfullyGenerateArmTemplatesBot);
        return result_1.FxBotPluginResultFactory.Success(result);
    }
    async provisionWebApp() {
        var _a, _b, _c, _d, _e;
        errors_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.projectSettings) === null || _b === void 0 ? void 0 : _b.appName);
        const serviceClientCredentials = await this.getAzureAccountCredenial();
        // Suppose we get creds and subs from context.
        const webSiteMgmtClient = factory.createWebSiteMgmtClient(serviceClientCredentials, this.config.provision.subscriptionId);
        // 1. Provsion app service plan.
        const appServicePlanName = (_c = this.config.provision.appServicePlan) !== null && _c !== void 0 ? _c : resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, (_e = (_d = this.ctx) === null || _d === void 0 ? void 0 : _d.projectSettings) === null || _e === void 0 ? void 0 : _e.appName, constants_1.MaxLengths.APP_SERVICE_PLAN_NAME);
        logger_1.Logger.info(messages_1.Messages.ProvisioningAzureAppServicePlan);
        await azureOps_1.AzureOperations.CreateOrUpdateAppServicePlan(webSiteMgmtClient, this.config.provision.resourceGroup, appServicePlanName, utils.generateAppServicePlanConfig(this.config.provision.location, this.config.provision.skuName));
        logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedAzureAppServicePlan);
        // 2. Provision web app.
        const siteEnvelope = languageStrategy_1.LanguageStrategy.getSiteEnvelope(this.config.scaffold.programmingLanguage, appServicePlanName, this.config.provision.location);
        logger_1.Logger.info(messages_1.Messages.ProvisioningAzureWebApp);
        const webappResponse = await azureOps_1.AzureOperations.CreateOrUpdateAzureWebApp(webSiteMgmtClient, this.config.provision.resourceGroup, this.config.provision.siteName, siteEnvelope);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedAzureWebApp);
        if (!this.config.provision.siteEndpoint) {
            this.config.provision.siteEndpoint = `${strings_1.CommonStrings.HTTPS_PREFIX}${webappResponse.defaultHostName}`;
        }
        if (!this.config.provision.appServicePlan) {
            this.config.provision.appServicePlan = appServicePlanName;
        }
        // Update config for manifest.json
        this.ctx.config.set(strings_1.PluginBot.VALID_DOMAIN, `${this.config.provision.siteName}.${constants_1.WebAppConstants.WEB_APP_SITE_DOMAIN}`);
    }
    async postProvision(context) {
        if (common_1.isArmSupportEnabled()) {
            return result_1.FxBotPluginResultFactory.Success();
        }
        logger_1.Logger.info(messages_1.Messages.PostProvisioningStart);
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        // 1. Get required config items from other plugins.
        // 2. Update bot hosting env"s app settings.
        const botId = this.config.scaffold.botId;
        const botPassword = this.config.scaffold.botPassword;
        const teamsAppClientId = this.config.teamsAppClientId;
        const teamsAppClientSecret = this.config.teamsAppClientSecret;
        const teamsAppTenant = this.config.teamsAppTenant;
        const applicationIdUris = this.config.applicationIdUris;
        const siteEndpoint = this.config.provision.siteEndpoint;
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.BOT_ID, botId);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.BOT_PASSWORD, botPassword);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.AUTH_CLIENT_ID, teamsAppClientId);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.AUTH_CLIENT_SECRET, teamsAppClientSecret);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.AUTH_TENANT, teamsAppTenant);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.AUTH_APPLICATION_ID_URIS, applicationIdUris);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.SITE_ENDPOINT, siteEndpoint);
        const serviceClientCredentials = await this.getAzureAccountCredenial();
        const webSiteMgmtClient = factory.createWebSiteMgmtClient(serviceClientCredentials, this.config.provision.subscriptionId);
        const appSettings = [
            { name: constants_1.AuthEnvNames.BOT_ID, value: botId },
            { name: constants_1.AuthEnvNames.BOT_PASSWORD, value: botPassword },
            { name: constants_1.AuthEnvNames.M365_CLIENT_ID, value: teamsAppClientId },
            { name: constants_1.AuthEnvNames.M365_CLIENT_SECRET, value: teamsAppClientSecret },
            { name: constants_1.AuthEnvNames.M365_TENANT_ID, value: teamsAppTenant },
            { name: constants_1.AuthEnvNames.M365_AUTHORITY_HOST, value: constants_1.AuthValues.M365_AUTHORITY_HOST },
            {
                name: constants_1.AuthEnvNames.INITIATE_LOGIN_ENDPOINT,
                value: `${this.config.provision.siteEndpoint}${strings_1.CommonStrings.AUTH_LOGIN_URI_SUFFIX}`,
            },
            { name: constants_1.AuthEnvNames.M365_APPLICATION_ID_URI, value: applicationIdUris },
        ];
        if (this.config.provision.sqlEndpoint) {
            appSettings.push({
                name: constants_1.AuthEnvNames.SQL_ENDPOINT,
                value: this.config.provision.sqlEndpoint,
            });
        }
        if (this.config.provision.sqlDatabaseName) {
            appSettings.push({
                name: constants_1.AuthEnvNames.SQL_DATABASE_NAME,
                value: this.config.provision.sqlDatabaseName,
            });
        }
        if (this.config.provision.sqlUserName) {
            appSettings.push({
                name: constants_1.AuthEnvNames.SQL_USER_NAME,
                value: this.config.provision.sqlUserName,
            });
        }
        if (this.config.provision.sqlPassword) {
            appSettings.push({
                name: constants_1.AuthEnvNames.SQL_PASSWORD,
                value: this.config.provision.sqlPassword,
            });
        }
        if (this.config.provision.identityClientId) {
            appSettings.push({
                name: constants_1.AuthEnvNames.IDENTITY_ID,
                value: this.config.provision.identityClientId,
            });
        }
        if (this.config.provision.functionEndpoint) {
            appSettings.push({
                name: constants_1.AuthEnvNames.API_ENDPOINT,
                value: this.config.provision.functionEndpoint,
            });
        }
        const siteEnvelope = languageStrategy_1.LanguageStrategy.getSiteEnvelope(this.config.scaffold.programmingLanguage, this.config.provision.appServicePlan, this.config.provision.location, appSettings);
        if (this.config.provision.identityResourceId) {
            siteEnvelope.identity = {
                type: constants_1.IdentityConstants.IDENTITY_TYPE_USER_ASSIGNED,
                userAssignedIdentities: {
                    [this.config.provision.identityResourceId]: {},
                },
            };
        }
        logger_1.Logger.info(messages_1.Messages.UpdatingAzureWebAppSettings);
        await azureOps_1.AzureOperations.CreateOrUpdateAzureWebApp(webSiteMgmtClient, this.config.provision.resourceGroup, this.config.provision.siteName, siteEnvelope, true);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyUpdatedAzureWebAppSettings);
        // 3. Update message endpoint for bot registration.
        await this.updateMessageEndpointOnAzure(`${this.config.provision.siteEndpoint}${strings_1.CommonStrings.MESSAGE_ENDPOINT_SUFFIX}`);
        this.config.saveConfigIntoContext(context);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyPostProvisionedBot);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async preDeploy(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        logger_1.Logger.info(messages_1.Messages.PreDeployingBot);
        // Preconditions checking.
        const packDirExisted = await fs.pathExists(this.config.scaffold.workingDir);
        if (!packDirExisted) {
            throw new errors_1.PackDirExistenceError();
        }
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.SITE_ENDPOINT, this.config.provision.siteEndpoint);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.PROGRAMMING_LANGUAGE, this.config.scaffold.programmingLanguage);
        if (common_1.isArmSupportEnabled()) {
            errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.BOT_SERVICE_RESOURCE_ID, this.config.provision.botWebAppResourceId);
        }
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.SUBSCRIPTION_ID, this.config.provision.subscriptionId);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.RESOURCE_GROUP, this.config.provision.resourceGroup);
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async deploy(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        if (common_1.isArmSupportEnabled()) {
            this.config.provision.subscriptionId = common_1.getSubscriptionIdFromResourceId(this.config.provision.botWebAppResourceId);
            this.config.provision.resourceGroup = common_1.getResourceGroupNameFromResourceId(this.config.provision.botWebAppResourceId);
            this.config.provision.siteName = common_1.getSiteNameFromResourceId(this.config.provision.botWebAppResourceId);
        }
        logger_1.Logger.info(messages_1.Messages.DeployingBot);
        const workingDir = this.config.scaffold.workingDir;
        if (!workingDir) {
            throw new errors_1.PreconditionError(messages_1.Messages.WorkingDirIsMissing, []);
        }
        const deployTimeCandidate = Date.now();
        const deployMgr = new deployMgr_1.DeployMgr(workingDir, this.ctx.envInfo.envName);
        await deployMgr.init();
        if (!(await deployMgr.needsToRedeploy())) {
            logger_1.Logger.debug(messages_1.Messages.SkipDeployNoUpdates);
            return result_1.FxBotPluginResultFactory.Success();
        }
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.DEPLOY_TITLE, constants_1.ProgressBarConstants.DEPLOY_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.DEPLOY_STEP_START));
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.DEPLOY_STEP_NPM_INSTALL));
        await languageStrategy_1.LanguageStrategy.localBuild(this.config.scaffold.programmingLanguage, workingDir, this.config.deploy.unPackFlag === "true" ? true : false);
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.DEPLOY_STEP_ZIP_FOLDER));
        const zipBuffer = utils.zipAFolder(workingDir, constants_1.DeployConfigs.UN_PACK_DIRS, [
            `${constants_1.FolderNames.NODE_MODULES}/${constants_1.FolderNames.KEYTAR}`,
        ]);
        // 2.2 Retrieve publishing credentials.
        const webSiteMgmtClient = new appService.WebSiteManagementClient(await this.getAzureAccountCredenial(), this.config.provision.subscriptionId);
        const listResponse = await azureOps_1.AzureOperations.ListPublishingCredentials(webSiteMgmtClient, this.config.provision.resourceGroup, this.config.provision.siteName);
        const publishingUserName = listResponse.publishingUserName
            ? listResponse.publishingUserName
            : "";
        const publishingPassword = listResponse.publishingPassword
            ? listResponse.publishingPassword
            : "";
        const encryptedCreds = utils.toBase64(`${publishingUserName}:${publishingPassword}`);
        const config = {
            headers: {
                Authorization: `Basic ${encryptedCreds}`,
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
        };
        const zipDeployEndpoint = zipDeploy_1.getZipDeployEndpoint(this.config.provision.siteName);
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.DEPLOY_STEP_ZIP_DEPLOY));
        await azureOps_1.AzureOperations.ZipDeployPackage(zipDeployEndpoint, zipBuffer, config);
        await deployMgr.updateLastDeployTime(deployTimeCandidate);
        this.config.saveConfigIntoContext(context);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyDeployedBot);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async localDebug(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.LOCAL_DEBUG_TITLE, constants_1.ProgressBarConstants.LOCAL_DEBUG_STEPS_NUM, this.ctx);
        await (handler === null || handler === void 0 ? void 0 : handler.start(constants_1.ProgressBarConstants.LOCAL_DEBUG_STEP_START));
        await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.LOCAL_DEBUG_STEP_BOT_REG));
        await this.createNewBotRegistrationOnAppStudio();
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async postLocalDebug(context) {
        this.ctx = context;
        await this.config.restoreConfigFromContext(context);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCAL_ENDPOINT, this.config.localDebug.localEndpoint);
        await this.updateMessageEndpointOnAppStudio(`${this.config.localDebug.localEndpoint}${strings_1.CommonStrings.MESSAGE_ENDPOINT_SUFFIX}`);
        this.config.saveConfigIntoContext(context);
        return result_1.FxBotPluginResultFactory.Success();
    }
    async migrateV1Project(ctx) {
        try {
            logger_1.Logger.info(messages_1.Messages.StartMigrateV1Project(constants_1.Alias.TEAMS_BOT_PLUGIN));
            const handler = await progressBars_1.ProgressBarFactory.newProgressBar(constants_1.ProgressBarConstants.MIGRATE_V1_PROJECT_TITLE, constants_1.ProgressBarConstants.MIGRATE_V1_PROJECT_STEPS_NUM, ctx);
            await (handler === null || handler === void 0 ? void 0 : handler.start());
            await (handler === null || handler === void 0 ? void 0 : handler.next(constants_1.ProgressBarConstants.MIGRATE_V1_PROJECT_STEP_MIGRATE));
            const sourceFolder = path_1.default.join(ctx.root, teamsfx_api_1.ArchiveFolderName);
            const distFolder = path_1.default.join(ctx.root, strings_1.CommonStrings.BOT_WORKING_DIR_NAME);
            const excludeFiles = [
                { fileName: teamsfx_api_1.ArchiveFolderName, recursive: false },
                { fileName: teamsfx_api_1.ArchiveLogFileName, recursive: false },
                { fileName: teamsfx_api_1.AppPackageFolderName, recursive: false },
                { fileName: strings_1.CommonStrings.NODE_PACKAGE_FOLDER_NAME, recursive: true },
            ];
            await common_1.copyFiles(sourceFolder, distFolder, excludeFiles);
            await (handler === null || handler === void 0 ? void 0 : handler.end(true));
            logger_1.Logger.info(messages_1.Messages.EndMigrateV1Project(constants_1.Alias.TEAMS_BOT_PLUGIN));
        }
        catch (err) {
            throw new errors_1.MigrateV1ProjectError(err);
        }
        return result_1.FxBotPluginResultFactory.Success();
    }
    async updateMessageEndpointOnAppStudio(endpoint) {
        var _a, _b, _c;
        const appStudioToken = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.appStudioToken) === null || _b === void 0 ? void 0 : _b.getAccessToken());
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.LOCAL_BOT_ID, this.config.localDebug.localBotId);
        const botReg = {
            botId: this.config.localDebug.localBotId,
            name: ((_c = this.ctx.projectSettings) === null || _c === void 0 ? void 0 : _c.appName) + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
            description: "",
            iconUrl: "",
            messagingEndpoint: endpoint,
            callingEndpoint: "",
        };
        await appStudio_1.AppStudio.updateMessageEndpoint(appStudioToken, botReg.botId, botReg);
    }
    async updateMessageEndpointOnAzure(endpoint) {
        var _a, _b;
        const serviceClientCredentials = await this.getAzureAccountCredenial();
        const botClient = factory.createAzureBotServiceClient(serviceClientCredentials, this.config.provision.subscriptionId);
        if (!this.config.provision.botChannelRegName) {
            throw new errors_1.SomethingMissingError(strings_1.CommonStrings.BOT_CHANNEL_REGISTRATION);
        }
        const botChannelRegistrationName = this.config.provision.botChannelRegName;
        logger_1.Logger.info(messages_1.Messages.UpdatingBotMessageEndpoint);
        await azureOps_1.AzureOperations.UpdateBotChannelRegistration(botClient, this.config.provision.resourceGroup, botChannelRegistrationName, this.config.scaffold.botId, endpoint, (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.projectSettings) === null || _b === void 0 ? void 0 : _b.appName);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyUpdatedBotMessageEndpoint);
    }
    async createNewBotRegistrationOnAppStudio() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const token = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.graphTokenProvider) === null || _b === void 0 ? void 0 : _b.getAccessToken());
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.GRAPH_TOKEN, token);
        errors_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, (_d = (_c = this.ctx) === null || _c === void 0 ? void 0 : _c.projectSettings) === null || _d === void 0 ? void 0 : _d.appName);
        // 1. Create a new AAD App Registraion with client secret.
        const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, (_f = (_e = this.ctx) === null || _e === void 0 ? void 0 : _e.projectSettings) === null || _f === void 0 ? void 0 : _f.appName, constants_1.MaxLengths.AAD_DISPLAY_NAME);
        let botAuthCreds = new botAuthCredential_1.BotAuthCredential();
        if (this.config.localDebug.botAADCreated()
        // if user input AAD, the object id is not required
        // && (await AppStudio.isAADAppExisting(appStudioToken!, this.config.localDebug.localObjectId!))
        ) {
            botAuthCreds.clientId = this.config.localDebug.localBotId;
            botAuthCreds.clientSecret = this.config.localDebug.localBotPassword;
            botAuthCreds.objectId = this.config.localDebug.localObjectId;
            logger_1.Logger.debug(messages_1.Messages.SuccessfullyGetExistingBotAadAppCredential);
        }
        else {
            logger_1.Logger.info(messages_1.Messages.ProvisioningBotRegistration);
            botAuthCreds = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(token, aadDisplayName, this.config.localDebug.localObjectId, this.config.localDebug.localBotId);
            logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
        }
        // 2. Register bot by app studio.
        const botReg = {
            botId: botAuthCreds.clientId,
            name: ((_g = this.ctx.projectSettings) === null || _g === void 0 ? void 0 : _g.appName) + strings_1.PluginLocalDebug.LOCAL_DEBUG_SUFFIX,
            description: "",
            iconUrl: "",
            messagingEndpoint: "",
            callingEndpoint: "",
        };
        logger_1.Logger.info(messages_1.Messages.ProvisioningBotRegistration);
        const appStudioToken = await ((_j = (_h = this.ctx) === null || _h === void 0 ? void 0 : _h.appStudioToken) === null || _j === void 0 ? void 0 : _j.getAccessToken());
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.APPSTUDIO_TOKEN, appStudioToken);
        await appStudio_1.AppStudio.createBotRegistration(appStudioToken, botReg);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedBotRegistration);
        if (!this.config.localDebug.localBotId) {
            this.config.localDebug.localBotId = botAuthCreds.clientId;
        }
        if (!this.config.localDebug.localBotPassword) {
            this.config.localDebug.localBotPassword = botAuthCreds.clientSecret;
        }
        if (!this.config.localDebug.localObjectId) {
            this.config.localDebug.localObjectId = botAuthCreds.objectId;
        }
    }
    async createOrGetBotAppRegistration() {
        var _a, _b, _c, _d, _e, _f;
        const token = await ((_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.graphTokenProvider) === null || _b === void 0 ? void 0 : _b.getAccessToken());
        errors_1.CheckThrowSomethingMissing(strings_1.ConfigNames.GRAPH_TOKEN, token);
        errors_1.CheckThrowSomethingMissing(strings_1.CommonStrings.SHORT_APP_NAME, (_d = (_c = this.ctx) === null || _c === void 0 ? void 0 : _c.projectSettings) === null || _d === void 0 ? void 0 : _d.appName);
        let botAuthCreds = new botAuthCredential_1.BotAuthCredential();
        if (!this.config.scaffold.botAADCreated()) {
            const aadDisplayName = resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, (_f = (_e = this.ctx) === null || _e === void 0 ? void 0 : _e.projectSettings) === null || _f === void 0 ? void 0 : _f.appName, constants_1.MaxLengths.AAD_DISPLAY_NAME);
            botAuthCreds = await aadRegistration_1.AADRegistration.registerAADAppAndGetSecretByGraph(token, aadDisplayName, this.config.scaffold.objectId, this.config.scaffold.botId);
            this.config.scaffold.botId = botAuthCreds.clientId;
            this.config.scaffold.botPassword = botAuthCreds.clientSecret;
            this.config.scaffold.objectId = botAuthCreds.objectId;
            this.config.saveConfigIntoContext(this.ctx); // Checkpoint for aad app provision.
            logger_1.Logger.info(messages_1.Messages.SuccessfullyCreatedBotAadApp);
        }
        else {
            botAuthCreds.clientId = this.config.scaffold.botId;
            botAuthCreds.clientSecret = this.config.scaffold.botPassword;
            botAuthCreds.objectId = this.config.scaffold.objectId;
            logger_1.Logger.info(messages_1.Messages.SuccessfullyGetExistingBotAadAppCredential);
        }
        return botAuthCreds;
    }
    async provisionBotServiceOnAzure(botAuthCreds) {
        var _a, _b, _c, _d;
        const serviceClientCredentials = await this.getAzureAccountCredenial();
        // Provision a bot channel registration resource on azure.
        const botClient = factory.createAzureBotServiceClient(serviceClientCredentials, this.config.provision.subscriptionId);
        const botChannelRegistrationName = this.config.provision.botChannelRegName
            ? this.config.provision.botChannelRegName
            : resourceNameFactory_1.ResourceNameFactory.createCommonName(this.config.resourceNameSuffix, (_b = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.projectSettings) === null || _b === void 0 ? void 0 : _b.appName, constants_1.MaxLengths.BOT_CHANNEL_REG_NAME);
        logger_1.Logger.info(messages_1.Messages.ProvisioningAzureBotChannelRegistration);
        await azureOps_1.AzureOperations.CreateBotChannelRegistration(botClient, this.config.provision.resourceGroup, botChannelRegistrationName, botAuthCreds.clientId, (_d = (_c = this.ctx) === null || _c === void 0 ? void 0 : _c.projectSettings) === null || _d === void 0 ? void 0 : _d.appName);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedAzureBotChannelRegistration);
        // Add Teams Client as a channel to the resource above.
        logger_1.Logger.info(messages_1.Messages.ProvisioningMsTeamsChannel);
        await azureOps_1.AzureOperations.LinkTeamsChannel(botClient, this.config.provision.resourceGroup, botChannelRegistrationName);
        logger_1.Logger.info(messages_1.Messages.SuccessfullyProvisionedMsTeamsChannel);
        if (!this.config.provision.botChannelRegName) {
            this.config.provision.botChannelRegName = botChannelRegistrationName;
        }
    }
}
exports.TeamsBotImpl = TeamsBotImpl;
//# sourceMappingURL=plugin.js.map