export declare enum ErrorType {
    User = 0,
    System = 1
}
export declare class PluginError extends Error {
    name: string;
    details: string;
    suggestions: string[];
    errorType: ErrorType;
    innerError?: any;
    helpLink?: string;
    constructor(type: ErrorType, name: string, details: string, suggestions: string[], innerError?: any, helpLink?: string);
    genMessage(): string;
    inferFromInnerError(): void;
}
export declare class PreconditionError extends PluginError {
    constructor(message: string, suggestions: string[]);
}
export declare class SomethingMissingError extends PreconditionError {
    constructor(something: string);
}
export declare function CheckThrowSomethingMissing(name: string, value: any): void;
export declare class UserInputsError extends PluginError {
    constructor(input: string, value: string);
}
export declare class AADAppCheckingError extends PluginError {
    constructor(innerError?: any);
}
export declare class CreateAADAppError extends PluginError {
    constructor(innerError?: any);
}
export declare class CreateAADSecretError extends PluginError {
    constructor(innerError?: any);
}
export declare class TemplateZipFallbackError extends PluginError {
    constructor();
}
export declare class ClientCreationError extends PluginError {
    constructor(clientName: string, innerError?: any);
}
export declare class ProvisionError extends PluginError {
    constructor(resource: string, innerError?: any);
}
export declare class MissingSubscriptionRegistrationError extends PluginError {
    constructor();
}
export declare class UnzipError extends PluginError {
    constructor(path?: string);
}
export declare class ConfigUpdatingError extends PluginError {
    constructor(configName: string, innerError?: any);
}
export declare class ConfigValidationError extends PluginError {
    constructor(name: string, value: string);
}
export declare class PackDirExistenceError extends PluginError {
    constructor();
}
export declare class ListPublishingCredentialsError extends PluginError {
    constructor(innerError?: any);
}
export declare class ZipDeployError extends PluginError {
    constructor(innerError?: any);
}
export declare class MessageEndpointUpdatingError extends PluginError {
    constructor(endpoint: string, innerError?: any);
}
export declare class DownloadError extends PluginError {
    constructor(url: string, innerError?: any);
}
export declare class TemplateProjectNotFoundError extends PluginError {
    constructor();
}
export declare class CommandExecutionError extends PluginError {
    constructor(cmd: string, innerError?: any);
}
export declare class FreeServerFarmsQuotaError extends PluginError {
    constructor(innerError?: any);
}
export declare class InvalidBotDataError extends PluginError {
    constructor(innerError: any);
}
export declare class RegisterResourceProviderError extends PluginError {
    constructor(innerError?: any);
}
export declare class MigrateV1ProjectError extends PluginError {
    constructor(innerError?: any);
}
//# sourceMappingURL=errors.d.ts.map