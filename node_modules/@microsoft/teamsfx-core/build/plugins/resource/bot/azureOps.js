"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureOperations = void 0;
const tslib_1 = require("tslib");
const errors_1 = require("./errors");
const strings_1 = require("./resources/strings");
const utils = tslib_1.__importStar(require("./utils/common"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const constants_1 = require("./constants");
class AzureOperations {
    static async CreateBotChannelRegistration(botClient, resourceGroup, botChannelRegistrationName, msaAppId, displayName) {
        let botResponse = undefined;
        try {
            botResponse = await botClient.bots.create(resourceGroup, botChannelRegistrationName, {
                location: "global",
                kind: "bot",
                properties: {
                    displayName: displayName !== null && displayName !== void 0 ? displayName : botChannelRegistrationName,
                    endpoint: "",
                    msaAppId: msaAppId,
                },
            });
        }
        catch (e) {
            if (e.code === "MissingSubscriptionRegistration") {
                throw new errors_1.MissingSubscriptionRegistrationError();
            }
            else if (e.code === "InvalidBotData") {
                throw new errors_1.InvalidBotDataError(e);
            }
            else {
                throw new errors_1.ProvisionError(strings_1.CommonStrings.BOT_CHANNEL_REGISTRATION, e);
            }
        }
        if (!botResponse || !utils.isHttpCodeOkOrCreated(botResponse._response.status)) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.BOT_CHANNEL_REGISTRATION);
        }
    }
    static async UpdateBotChannelRegistration(botClient, resourceGroup, botChannelRegistrationName, msaAppId, endpoint, displayName) {
        let botResponse = undefined;
        try {
            botResponse = await botClient.bots.update(resourceGroup, botChannelRegistrationName, {
                properties: {
                    displayName: displayName !== null && displayName !== void 0 ? displayName : botChannelRegistrationName,
                    endpoint: endpoint,
                    msaAppId: msaAppId,
                },
            });
        }
        catch (e) {
            throw new errors_1.MessageEndpointUpdatingError(endpoint, e);
        }
        if (!botResponse || !utils.isHttpCodeOkOrCreated(botResponse._response.status)) {
            throw new errors_1.MessageEndpointUpdatingError(endpoint);
        }
    }
    static async LinkTeamsChannel(botClient, resourceGroup, botChannelRegistrationName) {
        let channelResponse = undefined;
        try {
            channelResponse = await botClient.channels.create(resourceGroup, botChannelRegistrationName, "MsTeamsChannel", {
                location: "global",
                kind: "bot",
                properties: {
                    channelName: "MsTeamsChannel",
                    properties: {
                        isEnabled: true,
                    },
                },
            });
        }
        catch (e) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.MS_TEAMS_CHANNEL, e);
        }
        if (!channelResponse || !utils.isHttpCodeOkOrCreated(channelResponse._response.status)) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.MS_TEAMS_CHANNEL);
        }
    }
    static async CreateOrUpdateAppServicePlan(webSiteMgmtClient, resourceGroup, appServicePlanName, appServicePlan) {
        var _a;
        let planResponse = undefined;
        try {
            planResponse = await webSiteMgmtClient.appServicePlans.createOrUpdate(resourceGroup, appServicePlanName, appServicePlan);
        }
        catch (e) {
            if ((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes(constants_1.ErrorMessagesForChecking.FreeServerFarmsQuotaErrorFromAzure)) {
                throw new errors_1.FreeServerFarmsQuotaError(e);
            }
            else {
                throw new errors_1.ProvisionError(strings_1.CommonStrings.APP_SERVICE_PLAN, e);
            }
        }
        if (!planResponse || !utils.isHttpCodeOkOrCreated(planResponse._response.status)) {
            throw new errors_1.ProvisionError(strings_1.CommonStrings.APP_SERVICE_PLAN);
        }
    }
    static async CreateOrUpdateAzureWebApp(webSiteMgmtClient, resourceGroup, siteName, siteEnvelope, update) {
        let webappResponse = undefined;
        try {
            webappResponse = await webSiteMgmtClient.webApps.createOrUpdate(resourceGroup, siteName, siteEnvelope);
        }
        catch (e) {
            if (!update) {
                throw new errors_1.ProvisionError(strings_1.CommonStrings.AZURE_WEB_APP, e);
            }
            else {
                throw new errors_1.ConfigUpdatingError(strings_1.ConfigNames.AZURE_WEB_APP_AUTH_CONFIGS, e);
            }
        }
        if (!webappResponse || !utils.isHttpCodeOkOrCreated(webappResponse._response.status)) {
            if (!update) {
                throw new errors_1.ProvisionError(strings_1.CommonStrings.AZURE_WEB_APP);
            }
            else {
                throw new errors_1.ConfigUpdatingError(strings_1.ConfigNames.AZURE_WEB_APP_AUTH_CONFIGS);
            }
        }
        return webappResponse;
    }
    static async ListPublishingCredentials(webSiteMgmtClient, resourceGroup, siteName) {
        let listResponse = undefined;
        try {
            listResponse = await webSiteMgmtClient.webApps.listPublishingCredentials(resourceGroup, siteName);
        }
        catch (e) {
            throw new errors_1.ListPublishingCredentialsError(e);
        }
        if (!listResponse || !utils.isHttpCodeOkOrCreated(listResponse._response.status)) {
            throw new errors_1.ListPublishingCredentialsError();
        }
        return listResponse;
    }
    static async ZipDeployPackage(zipDeployEndpoint, zipBuffer, config) {
        let res = undefined;
        try {
            res = await axios_1.default.post(zipDeployEndpoint, zipBuffer, config);
        }
        catch (e) {
            throw new errors_1.ZipDeployError(e);
        }
        if (!res || !utils.isHttpCodeOkOrCreated(res === null || res === void 0 ? void 0 : res.status)) {
            throw new errors_1.ZipDeployError();
        }
    }
}
exports.AzureOperations = AzureOperations;
//# sourceMappingURL=azureOps.js.map