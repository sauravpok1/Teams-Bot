"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalDebugConfig = void 0;
const tslib_1 = require("tslib");
const common_1 = require("../../../../common");
const localSettingsConstants_1 = require("../../../../common/localSettingsConstants");
const strings_1 = require("../resources/strings");
const utils = tslib_1.__importStar(require("../utils/common"));
class LocalDebugConfig {
    botAADCreated() {
        if (this.localBotId && this.localBotPassword) {
            return true;
        }
        return false;
    }
    async restoreConfigFromContext(context) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        if (common_1.isMultiEnvEnabled()) {
            this.localEndpoint = (_b = (_a = context.localSettings) === null || _a === void 0 ? void 0 : _a.bot) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsBotKeys.BotEndpoint);
            this.localRedirectUri = this.localEndpoint
                ? `${this.localEndpoint}${strings_1.CommonStrings.AUTH_REDIRECT_URI_SUFFIX}`
                : undefined;
            this.localBotId = (_d = (_c = context.localSettings) === null || _c === void 0 ? void 0 : _c.bot) === null || _d === void 0 ? void 0 : _d.get(localSettingsConstants_1.LocalSettingsBotKeys.BotId);
            this.localBotPassword = (_f = (_e = context.localSettings) === null || _e === void 0 ? void 0 : _e.bot) === null || _f === void 0 ? void 0 : _f.get(localSettingsConstants_1.LocalSettingsBotKeys.BotPassword);
            this.localObjectId = (_h = (_g = context.localSettings) === null || _g === void 0 ? void 0 : _g.bot) === null || _h === void 0 ? void 0 : _h.get(localSettingsConstants_1.LocalSettingsBotKeys.BotAadObjectId);
            this.localRedirectUri = (_k = (_j = context.localSettings) === null || _j === void 0 ? void 0 : _j.bot) === null || _k === void 0 ? void 0 : _k.get(localSettingsConstants_1.LocalSettingsBotKeys.BotRedirectUri);
        }
        else {
            const localBotEndpoint = (_l = context.envInfo.state
                .get(strings_1.PluginLocalDebug.PLUGIN_NAME)) === null || _l === void 0 ? void 0 : _l.get(strings_1.PluginLocalDebug.LOCAL_BOT_ENDPOINT);
            this.localEndpoint = localBotEndpoint;
            this.localRedirectUri = localBotEndpoint
                ? `${localBotEndpoint}${strings_1.CommonStrings.AUTH_REDIRECT_URI_SUFFIX}`
                : undefined;
            this.localBotId = context.config.get(strings_1.PluginBot.LOCAL_BOT_ID);
            this.localBotPassword = context.config.get(strings_1.PluginBot.LOCAL_BOT_PASSWORD);
            this.localObjectId = context.config.get(strings_1.PluginBot.LOCAL_OBJECT_ID);
            this.localRedirectUri = context.config.get(strings_1.PluginBot.LOCAL_REDIRECT_URI);
        }
    }
    saveConfigIntoContext(context) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (common_1.isMultiEnvEnabled()) {
            (_b = (_a = context.localSettings) === null || _a === void 0 ? void 0 : _a.bot) === null || _b === void 0 ? void 0 : _b.set(localSettingsConstants_1.LocalSettingsBotKeys.BotId, this.localBotId);
            (_d = (_c = context.localSettings) === null || _c === void 0 ? void 0 : _c.bot) === null || _d === void 0 ? void 0 : _d.set(localSettingsConstants_1.LocalSettingsBotKeys.BotPassword, this.localBotPassword);
            (_f = (_e = context.localSettings) === null || _e === void 0 ? void 0 : _e.bot) === null || _f === void 0 ? void 0 : _f.set(localSettingsConstants_1.LocalSettingsBotKeys.BotAadObjectId, this.localObjectId);
            (_h = (_g = context.localSettings) === null || _g === void 0 ? void 0 : _g.bot) === null || _h === void 0 ? void 0 : _h.set(localSettingsConstants_1.LocalSettingsBotKeys.BotRedirectUri, this.localRedirectUri);
        }
        else {
            utils.checkAndSaveConfig(context, strings_1.PluginBot.LOCAL_BOT_ID, this.localBotId);
            utils.checkAndSaveConfig(context, strings_1.PluginBot.LOCAL_BOT_PASSWORD, this.localBotPassword);
            utils.checkAndSaveConfig(context, strings_1.PluginBot.LOCAL_OBJECT_ID, this.localObjectId);
            utils.checkAndSaveConfig(context, strings_1.PluginBot.LOCAL_REDIRECT_URI, this.localRedirectUri);
        }
    }
}
exports.LocalDebugConfig = LocalDebugConfig;
//# sourceMappingURL=localDebugConfig.js.map