"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
class Messages {
}
exports.Messages = Messages;
Messages.SomethingIsInvalidWithValue = (something, value) => `'${something}' is invalid with value: '${value}'.`;
Messages.InputValidValueForSomething = (something) => `Please select valid values for '${something}'.`;
Messages.SomethingIsMissing = (something) => `'${something}' is missing.`;
Messages.SomethingIsNotFound = (something) => `'${something}' is not found.`;
Messages.SomethingIsNotExisting = (something) => `'${something}' is not existing.`;
Messages.SomethingIsInWrongFormat = (something) => `'${something}' is in wrong format.`;
Messages.FailToCreateSomeClient = (clientName) => `Failed to create '${clientName}'.`;
Messages.FailToProvisionSomeResource = (resource) => `Failed to provision '${resource}'.`;
Messages.FailToUpdateConfigs = (something) => `Failed to update configs for '${something}'.`;
Messages.FailToListPublishingCredentials = "Failed to list publishing credentials.";
Messages.FailToDoZipDeploy = "Failed to deploy zip file.";
Messages.FailToUpdateMessageEndpoint = (endpoint) => `Failed to update message endpoint with '${endpoint}'.`;
Messages.FailToDownloadFrom = (url) => `Failed to download from '${url}'.`;
Messages.FailToFindSomethingFor = (something, forsth) => `Failed to retrieve '${something}' for '${forsth}'.`;
Messages.ClickHelpButtonForDetails = "Please click 'Get Help' button for more details.";
Messages.ClickIssueButtonToReportIssue = "Please click 'Report Issue' button to report the issue.";
Messages.CommandExecutionFailed = (command) => `Failed to run '${command}'.`;
Messages.DoSthBeforeSth = (sth, beforeSth) => `Perform command '${sth}' before '${beforeSth}'.`;
Messages.FailToCallAppStudioForCheckingAADApp = "Failed to call App Studio's api to check AAD application's existence.";
Messages.SuccessfullyRetrievedTemplateZip = (zipUrl) => `Successfully retrieved zip package from ${zipUrl}.`;
Messages.FallingBackToUseLocalTemplateZip = "Falling back to use local template zip.";
Messages.ResourceProviderExist = (rp) => `Resource Provider ${rp} already exists, do not need to register.`;
Messages.BotResourceExist = (where) => `Bot resource already existed on ${where}, skip creating Bot resource.`;
Messages.WorkingDirIsMissing = "Working directory is missing.";
Messages.FailToGetAzureCreds = "Failed to retrieve Azure credentials.";
Messages.TryLoginAzure = "Login to Azure.";
Messages.SkipDeployNoUpdates = "Skipping deployment: no updates found.";
Messages.PreScaffoldingBot = "Pre-scaffolding bot.";
Messages.ScaffoldingBot = "Scaffolding bot.";
Messages.SuccessfullyScaffoldedBot = "Successfully scaffolded bot.";
Messages.PreProvisioningBot = "Pre-provisioning bot.";
Messages.ProvisioningBot = "Provisioning bot.";
Messages.SuccessfullyProvisionedBot = "Successfully provisioned bot.";
Messages.PreDeployingBot = "Pre-deploying bot.";
Messages.DeployingBot = "Deploying bot.";
Messages.SuccessfullyDeployedBot = "Successfully deployed bot.";
Messages.GeneratingArmTemplatesBot = "Generating ARM templates of bot.";
Messages.SuccessfullyGenerateArmTemplatesBot = "Successfully generating ARM templates of bot.";
Messages.UpdatingArmTemplatesBot = "Updating ARM templates of bot.";
Messages.SuccessfullyUpdateArmTemplatesBot = "Successfully updating ARM templates of bot.";
Messages.SuccessfullyGetExistingBotAadAppCredential = "Successfully get existing bot AAD app credential.";
Messages.SuccessfullyCreatedBotAadApp = "Successfully created bot AAD app.";
Messages.ProvisioningAzureBotChannelRegistration = "Provisioning azure bot channel registration.";
Messages.SuccessfullyProvisionedAzureBotChannelRegistration = "Successfully provisioned azure bot channel registration.";
Messages.ProvisioningMsTeamsChannel = "Provisioning microsoft teams channel.";
Messages.SuccessfullyProvisionedMsTeamsChannel = "Successfully provisioned microsoft teams channel.";
Messages.ProvisioningAzureAppServicePlan = "Provisioning azure app service plan.";
Messages.SuccessfullyProvisionedAzureAppServicePlan = "Successfully provisioned azure app service plan.";
Messages.ProvisioningAzureWebApp = "Provisioning azure web app.";
Messages.SuccessfullyProvisionedAzureWebApp = "Successfully provisioned azure web app.";
Messages.UpdatingAzureWebAppSettings = "Updating azure web app's app settings.";
Messages.SuccessfullyUpdatedAzureWebAppSettings = "Successfully updated azure web app's app settings.";
Messages.UpdatingBotMessageEndpoint = "Updating bot's message endpoint.";
Messages.SuccessfullyUpdatedBotMessageEndpoint = "Successfully updated bot's message endpoint";
Messages.ProvisioningAADApp = "Provisioning aad app.";
Messages.SuccessfullyProvisionedAADApp = "Successfully provisioned aad app.";
Messages.ProvisioningBotRegistration = "Provisioning bot registration.";
Messages.SuccessfullyProvisionedBotRegistration = "Successfully provisioned bot registration.";
Messages.TheSubsNotRegisterToUseBotService = "The subscription didn't register to use namespace 'Microsoft.BotService'.";
Messages.MaxFreeAppServicePlanIsTen = "The maximum number of Free App Service Plan allowed in a Subscription is 10.";
// Suggestions
Messages.RetryTheCurrentStep = "Please retry the current step.";
Messages.RegisterYouSubsToUseBot = "Please register your subscription to use namespace 'Microsoft.BotService'.";
Messages.DeleteFreeAppServicePlanOrChangeSku = "Delete a free app service plan or change app service plan's sku in config file and retry.";
Messages.RecoverConfig = "Please recover the config value.";
Messages.RecreateTheProject = "Please recreate the project.";
Messages.CheckCommandOutputAndTryToFixIt = "Please check the command output and try to fix it.";
Messages.DeleteExistingBotChannelRegistration = "Please delete existing azure bot channel registrations.";
Messages.DeleteBotAfterAzureAccountSwitching = "If azure account is switched, don't forget to delete azure bot channel registration under the previous account.";
Messages.CheckOutputLogAndTryToFix = "Please check log in output channel and try to fix this issue.";
Messages.RegisterRequiredRP = (resourceProviders) => `Register ${resourceProviders.join(",")} resource provider for your subscription manually.`;
Messages.ReopenWorkingDir = (path = "") => `Please check whether the path ${path} exists and you have write access to it, if no, please move the project to a valid path.`;
Messages.PostProvisioningStart = "Start to Post Provision.";
Messages.SuccessfullyPostProvisionedBot = "Successfully post-provisioned bot.";
// for the use of migrating v1 project
Messages.StartMigrateV1Project = (name) => `Migrating '${name}'.`;
Messages.EndMigrateV1Project = (name) => `Successfully migrated '${name}'.`;
Messages.RollbackToV1Project = `Rollback your project from '${teamsfx_api_1.ArchiveFolderName}' folder.`;
//# sourceMappingURL=messages.js.map