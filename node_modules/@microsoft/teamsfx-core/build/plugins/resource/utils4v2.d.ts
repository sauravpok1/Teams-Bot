import { ConfigMap, Func, FxError, Inputs, Json, Plugin, PluginContext, QTreeNode, Result, TokenProvider, Void, v2 } from "@microsoft/teamsfx-api";
import { Context, DeepReadonly, DeploymentInputs, EnvInfoV2, ProvisionInputs, ResourceProvisionOutput, ResourceTemplate } from "@microsoft/teamsfx-api/build/v2";
export declare function convert2PluginContext(pluginName: string, ctx: Context, inputs: Inputs, ignoreEmptyProjectPath?: boolean): PluginContext;
export declare function scaffoldSourceCodeAdapter(ctx: Context, inputs: Inputs, plugin: Plugin): Promise<Result<Void, FxError>>;
export declare function generateResourceTemplateAdapter(ctx: Context, inputs: Inputs, plugin: Plugin): Promise<Result<ResourceTemplate, FxError>>;
export declare function updateResourceTemplateAdapter(ctx: Context, inputs: Inputs, plugin: Plugin): Promise<Result<ResourceTemplate, FxError>>;
export declare function provisionResourceAdapter(ctx: Context, inputs: ProvisionInputs, envInfo: Readonly<EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<ResourceProvisionOutput, FxError>>;
export declare function flattenConfigMap(configMap: ConfigMap): ConfigMap;
export declare function legacyConfig2EnvState(config: ConfigMap, pluginName: string): {
    output: Json;
    secrets: Json;
};
export declare function configureResourceAdapter(ctx: Context, inputs: ProvisionInputs, envInfo: Readonly<EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<ResourceProvisionOutput, FxError>>;
export declare function deployAdapter(ctx: Context, inputs: DeploymentInputs, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<Void, FxError>>;
export declare function provisionLocalResourceAdapter(ctx: Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<Json, FxError>>;
export declare function configureLocalResourceAdapter(ctx: Context, inputs: Inputs, localSettings: Json, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<Json, FxError>>;
export declare function executeUserTaskAdapter(ctx: Context, inputs: Inputs, func: Func, localSettings: Json, envInfo: EnvInfoV2, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<unknown, FxError>>;
export declare function getQuestionsForScaffoldingAdapter(ctx: Context, inputs: Inputs, plugin: Plugin): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsAdapter(ctx: Context, inputs: Inputs, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForUserTaskAdapter(ctx: Context, inputs: Inputs, func: Func, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider, plugin: Plugin): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function setStateV2ByConfigMapInc(pluginName: string, state: Json, config: ConfigMap): void;
export declare function setEnvInfoV1ByStateV2(pluginName: string, pluginContext: PluginContext, envInfoV2: EnvInfoV2): void;
export declare function assignJsonInc(target?: Json, source?: Json): Json | undefined;
export declare function collaborationApiAdaptor(ctx: Context, inputs: v2.InputsWithProjectPath, envInfo: DeepReadonly<EnvInfoV2>, tokenProvider: TokenProvider, userInfo: Json, plugin: Plugin, taskName: "grantPermission" | "listCollaborator" | "checkPermission"): Promise<Result<Json, FxError>>;
//# sourceMappingURL=utils4v2.d.ts.map