"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlazorPluginImpl = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./constants");
const messages_1 = require("./resources/messages");
const uuid_1 = require("uuid");
const Provision = tslib_1.__importStar(require("./ops/provision"));
const azure_client_1 = require("./utils/azure-client");
const enum_1 = require("./enum");
const errors_1 = require("./resources/errors");
const Deploy = tslib_1.__importStar(require("./ops/deploy"));
const logger_1 = require("../utils/logger");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const __1 = require("../../../..");
class BlazorPluginImpl {
    constructor() {
        this.config = {};
    }
    syncConfigFromContext(ctx) {
        const solutionConfig = ctx.envInfo.state.get(constants_1.DependentPluginInfo.solutionPluginName);
        this.config.resourceGroupName = solutionConfig === null || solutionConfig === void 0 ? void 0 : solutionConfig.get(constants_1.DependentPluginInfo.resourceGroupName);
        this.config.subscriptionId = solutionConfig === null || solutionConfig === void 0 ? void 0 : solutionConfig.get(constants_1.DependentPluginInfo.subscriptionId);
        this.config.resourceNameSuffix = solutionConfig === null || solutionConfig === void 0 ? void 0 : solutionConfig.get(constants_1.DependentPluginInfo.resourceNameSuffix);
        this.config.location = solutionConfig === null || solutionConfig === void 0 ? void 0 : solutionConfig.get(constants_1.DependentPluginInfo.location);
        this.config.webAppName = ctx.config.get(constants_1.BlazorConfigInfo.webAppName);
        this.config.appServicePlanName = ctx.config.get(constants_1.BlazorConfigInfo.appServicePlanName);
        this.config.projectFilePath = ctx.config.get(constants_1.BlazorConfigInfo.projectFilePath);
        // Resource id priors to other configs
        const webAppResourceId = ctx.config.get(enum_1.BlazorConfigKey.webAppResourceId);
        if (webAppResourceId) {
            this.config.webAppResourceId = webAppResourceId;
            this.config.resourceGroupName = __1.getResourceGroupNameFromResourceId(webAppResourceId);
            this.config.webAppName = __1.getSiteNameFromResourceId(webAppResourceId);
            this.config.subscriptionId = __1.getSubscriptionIdFromResourceId(webAppResourceId);
        }
    }
    syncConfigToContext(ctx) {
        Object.entries(this.config)
            .filter((kv) => constants_1.BlazorPluginInfo.persistentConfig.find((x) => x === kv[0] && kv[1]))
            .forEach((kv) => ctx.config.set(kv[0], kv[1]));
    }
    checkAndGet(v, key) {
        if (v) {
            return v;
        }
        throw new errors_1.FetchConfigError(key);
    }
    isPluginEnabled(ctx, plugin) {
        var _a;
        const selectedPlugins = ((_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings)
            .activeResourcePlugins;
        return selectedPlugins.includes(plugin);
    }
    async preProvision(ctx) {
        var _a, _b, _c, _d;
        var _e, _f;
        this.syncConfigFromContext(ctx);
        const teamsAppName = this.checkAndGet((_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.appName, enum_1.BlazorConfigKey.teamsAppName);
        const suffix = (_b = this.config.resourceNameSuffix) !== null && _b !== void 0 ? _b : uuid_1.v4().substr(0, 6);
        (_c = (_e = this.config).webAppName) !== null && _c !== void 0 ? _c : (_e.webAppName = Provision.generateWebAppName(teamsAppName, constants_1.BlazorPluginInfo.alias, suffix));
        (_d = (_f = this.config).appServicePlanName) !== null && _d !== void 0 ? _d : (_f.appServicePlanName = this.config.webAppName);
        this.syncConfigToContext(ctx);
        return teamsfx_api_1.ok(undefined);
    }
    async provision(ctx) {
        var _a;
        logger_1.Logger.info(messages_1.Messages.StartProvision(constants_1.BlazorPluginInfo.displayName));
        // TODO: const progressHandler = await ProgressHelper.startProvisionProgressHandler(ctx);
        this.syncConfigFromContext(ctx);
        const resourceGroupName = this.checkAndGet(this.config.resourceGroupName, enum_1.BlazorConfigKey.resourceGroupName);
        const subscriptionId = this.checkAndGet(this.config.subscriptionId, enum_1.BlazorConfigKey.subscriptionId);
        const location = this.checkAndGet(this.config.location, enum_1.BlazorConfigKey.location);
        const appServicePlanName = this.checkAndGet(this.config.appServicePlanName, enum_1.BlazorConfigKey.appServicePlanName);
        const webAppName = this.checkAndGet(this.config.webAppName, enum_1.BlazorConfigKey.webAppName);
        const credential = this.checkAndGet(await ((_a = ctx.azureAccountProvider) === null || _a === void 0 ? void 0 : _a.getAccountCredentialAsync()), enum_1.BlazorConfigKey.credential);
        const client = azure_client_1.AzureClientFactory.getWebSiteManagementClient(credential, subscriptionId);
        const appServicePlanId = await Provision.ensureAppServicePlan(client, resourceGroupName, appServicePlanName, location);
        const site = await Provision.ensureWebApp(client, resourceGroupName, location, webAppName, appServicePlanId);
        this.config.site = site;
        if (!this.config.endpoint) {
            this.config.endpoint = `https://${site.defaultHostName}`;
            this.config.domain = site.defaultHostName;
        }
        this.syncConfigToContext(ctx);
        // TODO: await ProgressHelper.endProvisionProgress(true);
        logger_1.Logger.info(messages_1.Messages.EndProvision(constants_1.BlazorPluginInfo.displayName));
        return teamsfx_api_1.ok(undefined);
    }
    async postProvision(ctx) {
        var _a;
        if (__1.isArmSupportEnabled()) {
            return teamsfx_api_1.ok(undefined);
        }
        this.syncConfigFromContext(ctx);
        const resourceGroupName = this.checkAndGet(this.config.resourceGroupName, enum_1.BlazorConfigKey.resourceGroupName);
        const subscriptionId = this.checkAndGet(this.config.subscriptionId, enum_1.BlazorConfigKey.subscriptionId);
        const webAppName = this.checkAndGet(this.config.webAppName, enum_1.BlazorConfigKey.webAppName);
        const credential = this.checkAndGet(await ((_a = ctx.azureAccountProvider) === null || _a === void 0 ? void 0 : _a.getAccountCredentialAsync()), enum_1.BlazorConfigKey.credential);
        const site = this.checkAndGet(this.config.site, enum_1.BlazorConfigKey.site);
        this.config.site = undefined;
        const client = azure_client_1.AzureClientFactory.getWebSiteManagementClient(credential, subscriptionId);
        const res = await errors_1.runWithErrorCatchAndWrap((error) => new errors_1.ConfigureWebAppError(error.code), async () => await client.webApps.listApplicationSettings(resourceGroupName, webAppName));
        if (res.properties) {
            Object.entries(res.properties).forEach((kv) => {
                this.pushAppSettings(site, kv[0], kv[1]);
            });
        }
        this.collectAppSettings(ctx, site);
        await errors_1.runWithErrorCatchAndWrap((error) => new errors_1.ConfigureWebAppError(error.code), async () => await client.webApps.update(resourceGroupName, webAppName, site));
        return teamsfx_api_1.ok(undefined);
    }
    collectAppSettings(ctx, site) {
        this.collectAppSettingsSelf(site);
        const aadConfig = ctx.envInfo.state.get(constants_1.DependentPluginInfo.aadPluginName);
        if (this.isPluginEnabled(ctx, constants_1.DependentPluginInfo.aadPluginName) && aadConfig) {
            this.collectAppSettingsFromAAD(site, aadConfig);
        }
        const botConfig = ctx.envInfo.state.get(constants_1.DependentPluginInfo.botPluginName);
        if (this.isPluginEnabled(ctx, constants_1.DependentPluginInfo.botPluginName) && botConfig) {
            this.collectAppSettingsFromBot(site, botConfig);
        }
    }
    collectAppSettingsSelf(site) {
        const endpoint = this.checkAndGet(this.config.endpoint, enum_1.BlazorConfigKey.webAppEndpoint);
        this.pushAppSettings(site, enum_1.AppSettingsKey.tabAppEndpoint, endpoint);
    }
    collectAppSettingsFromBot(site, botConfig) {
        const botId = this.checkAndGet(botConfig.get(constants_1.DependentPluginInfo.botId), constants_1.DependentPluginInfo.botId);
        const botPassword = this.checkAndGet(botConfig.get(constants_1.DependentPluginInfo.botPassword), constants_1.DependentPluginInfo.botPassword);
        this.pushAppSettings(site, enum_1.AppSettingsKey.botId, botId);
        this.pushAppSettings(site, enum_1.AppSettingsKey.botPassword, botPassword);
    }
    collectAppSettingsFromAAD(site, aadConfig) {
        const clientId = this.checkAndGet(aadConfig.get(constants_1.DependentPluginInfo.clientID), constants_1.DependentPluginInfo.clientID);
        const clientSecret = this.checkAndGet(aadConfig.get(constants_1.DependentPluginInfo.aadClientSecret), constants_1.DependentPluginInfo.aadClientSecret);
        const oauthHost = this.checkAndGet(aadConfig.get(constants_1.DependentPluginInfo.oauthHost), constants_1.DependentPluginInfo.oauthHost);
        const tenantId = this.checkAndGet(aadConfig.get(constants_1.DependentPluginInfo.tenantId), constants_1.DependentPluginInfo.tenantId);
        const applicationIdUris = this.checkAndGet(aadConfig.get(constants_1.DependentPluginInfo.applicationIdUris), constants_1.DependentPluginInfo.applicationIdUris);
        this.pushAppSettings(site, enum_1.AppSettingsKey.clientId, clientId);
        this.pushAppSettings(site, enum_1.AppSettingsKey.clientSecret, clientSecret);
        this.pushAppSettings(site, enum_1.AppSettingsKey.oauthHost, `${oauthHost}/${tenantId}`);
        this.pushAppSettings(site, enum_1.AppSettingsKey.identifierUri, applicationIdUris);
        this.pushAppSettings(site, enum_1.AppSettingsKey.aadMetadataAddress, constants_1.AzureInfo.aadMetadataAddress(tenantId));
    }
    pushAppSettings(site, newName, newValue, replace = true) {
        if (!site.siteConfig) {
            site.siteConfig = {};
        }
        if (!site.siteConfig.appSettings) {
            site.siteConfig.appSettings = [];
        }
        const kv = site.siteConfig.appSettings.find((kv) => kv.name === newName);
        if (!kv) {
            site.siteConfig.appSettings.push({
                name: newName,
                value: newValue,
            });
        }
        else if (replace) {
            kv.value = newValue;
        }
    }
    async deploy(ctx) {
        var _a;
        logger_1.Logger.info(messages_1.Messages.StartDeploy(constants_1.BlazorPluginInfo.displayName));
        this.syncConfigFromContext(ctx);
        const webAppName = this.checkAndGet(this.config.webAppName, enum_1.BlazorConfigKey.webAppName);
        const resourceGroupName = this.checkAndGet(this.config.resourceGroupName, enum_1.BlazorConfigKey.resourceGroupName);
        const subscriptionId = this.checkAndGet(this.config.subscriptionId, enum_1.BlazorConfigKey.subscriptionId);
        const credential = this.checkAndGet(await ((_a = ctx.azureAccountProvider) === null || _a === void 0 ? void 0 : _a.getAccountCredentialAsync()), enum_1.BlazorConfigKey.credential);
        const projectFilePath = path_1.default.resolve(ctx.root, this.checkAndGet(this.config.projectFilePath, enum_1.BlazorConfigKey.projectFilePath));
        await errors_1.runWithErrorCatchAndThrow(new errors_1.ProjectPathError(projectFilePath), async () => await fs_extra_1.default.pathExists(projectFilePath));
        const projectPath = path_1.default.dirname(projectFilePath);
        const framework = await Deploy.getFrameworkVersion(projectFilePath);
        const runtime = constants_1.BlazorPluginInfo.defaultRuntime;
        const client = azure_client_1.AzureClientFactory.getWebSiteManagementClient(credential, subscriptionId);
        await Deploy.build(projectPath, runtime);
        const folderToBeZipped = constants_1.BlazorPathInfo.publishFolderPath(projectPath, framework, runtime);
        await Deploy.zipDeploy(client, resourceGroupName, webAppName, folderToBeZipped);
        logger_1.Logger.info(messages_1.Messages.EndDeploy(constants_1.BlazorPluginInfo.displayName));
        return teamsfx_api_1.ok(undefined);
    }
}
exports.BlazorPluginImpl = BlazorPluginImpl;
//# sourceMappingURL=plugin.js.map