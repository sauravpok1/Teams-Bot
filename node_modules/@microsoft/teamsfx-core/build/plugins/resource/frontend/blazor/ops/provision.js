"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureAppServicePlan = exports.ensureWebApp = exports.generateWebAppName = void 0;
const constants_1 = require("../constants");
const azure_client_1 = require("../utils/azure-client");
const errors_1 = require("../resources/errors");
const enum_1 = require("../enum");
function normalize(raw) {
    return raw.replace(constants_1.RegularExpr.allCharToBeSkippedInName, constants_1.Constants.emptyString).toLowerCase();
}
function concatName(appName, mergedSuffix) {
    const suffix = normalize(mergedSuffix).substr(0, constants_1.AzureInfo.suffixLenMax);
    const paddingLength = constants_1.AzureInfo.webappNameLenMax - suffix.length;
    const normalizedAppName = normalize(appName).substr(0, paddingLength);
    return normalizedAppName + suffix;
}
function generateWebAppName(appName, classSuffix, identSuffix) {
    const mergedSuffix = classSuffix + identSuffix;
    return concatName(appName, mergedSuffix);
}
exports.generateWebAppName = generateWebAppName;
async function ensureWebApp(client, resourceGroupName, location, webAppName, appServiceId) {
    const siteEnvelope = Object.assign(Object.assign({}, constants_1.DefaultProvisionConfigs.webAppConfig(location)), { serverFarmId: appServiceId });
    const site = await errors_1.runWithErrorCatchAndWrap((error) => new errors_1.ProvisionError(enum_1.ResourceType.webApp, error.code), async () => await azure_client_1.AzureLib.ensureWebApp(client, resourceGroupName, webAppName, siteEnvelope));
    if (!site.defaultHostName) {
        // TODO: Logger.error("failToGetWebAppEndpoint");
        throw new errors_1.ProvisionError(enum_1.ResourceType.webApp);
    }
    return site;
}
exports.ensureWebApp = ensureWebApp;
async function ensureAppServicePlan(client, resourceGroupName, appServicePlanName, location) {
    const appServicePlan = await errors_1.runWithErrorCatchAndWrap((error) => new errors_1.ProvisionError(enum_1.ResourceType.appServicePlan, error.code), async () => await azure_client_1.AzureLib.ensureAppServicePlan(client, resourceGroupName, appServicePlanName, constants_1.DefaultProvisionConfigs.appServicePlansConfig(location)));
    const appServicePlanId = appServicePlan.id;
    if (!appServicePlanId) {
        // TODO: Logger.error("failToGetAppServicePlanId");
        throw new errors_1.ProvisionError(enum_1.ResourceType.appServicePlan);
    }
    return appServicePlanId;
}
exports.ensureAppServicePlan = ensureAppServicePlan;
//# sourceMappingURL=provision.js.map