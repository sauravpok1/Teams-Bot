import { Providers } from "@azure/arm-resources";
import { TokenCredentialsBase } from "@azure/ms-rest-nodeauth";
import { WebSiteManagementClient, WebSiteManagementModels } from "@azure/arm-appservice";
import { Provider } from "@azure/arm-resources/esm/models";
export declare class AzureClientFactory {
    static getResourceProviderClient(credentials: TokenCredentialsBase, subscriptionId: string): Providers;
    static getWebSiteManagementClient(credentials: TokenCredentialsBase, subscriptionId: string): WebSiteManagementClient;
}
declare type Site = WebSiteManagementModels.Site;
declare type AppServicePlan = WebSiteManagementModels.AppServicePlan;
export declare class AzureLib {
    static ensureResource<T>(createFn: () => Promise<T>, findFn?: () => Promise<T | undefined>): Promise<T>;
    static findResourceProvider(client: Providers, namespace: string): Promise<Provider | undefined>;
    static ensureResourceProviders(client: Providers, providerNamespaces: string[]): Promise<Provider[]>;
    static findAppServicePlans(client: WebSiteManagementClient, resourceGroupName: string, appServicePlanName: string): Promise<AppServicePlan | undefined>;
    static ensureAppServicePlan(client: WebSiteManagementClient, resourceGroupName: string, appServicePlanName: string, options: AppServicePlan): Promise<AppServicePlan>;
    static findWebApp(client: WebSiteManagementClient, resourceGroupName: string, webAppName: string): Promise<Site | undefined>;
    static ensureWebApp(client: WebSiteManagementClient, resourceGroupName: string, webAppName: string, siteEnvelope: Site): Promise<Site>;
}
export {};
//# sourceMappingURL=azure-client.d.ts.map