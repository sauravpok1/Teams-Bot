"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureLib = exports.AzureClientFactory = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const arm_resources_1 = require("@azure/arm-resources");
const arm_appservice_1 = require("@azure/arm-appservice");
class AzureClientFactory {
    static getResourceProviderClient(credentials, subscriptionId) {
        return new arm_resources_1.Providers(new arm_resources_1.ResourceManagementClientContext(credentials, subscriptionId));
    }
    static getWebSiteManagementClient(credentials, subscriptionId) {
        return new arm_appservice_1.WebSiteManagementClient(credentials, subscriptionId);
    }
}
exports.AzureClientFactory = AzureClientFactory;
class AzureLib {
    static async ensureResource(createFn, findFn) {
        const _t = await (findFn === null || findFn === void 0 ? void 0 : findFn());
        return _t !== null && _t !== void 0 ? _t : createFn();
    }
    static async findResourceProvider(client, namespace) {
        const provider = await client.get(namespace);
        if (provider.registrationState === "Registered") {
            return provider;
        }
    }
    static async ensureResourceProviders(client, providerNamespaces) {
        return Promise.all(providerNamespaces.map((namespace) => AzureLib.ensureResource(() => client.register(namespace), () => AzureLib.findResourceProvider(client, namespace))));
    }
    static async findAppServicePlans(client, resourceGroupName, appServicePlanName) {
        const appServicePlansRes = await client.appServicePlans.listByResourceGroup(resourceGroupName);
        return appServicePlansRes.find((plan) => plan.name === appServicePlanName);
    }
    static async ensureAppServicePlan(client, resourceGroupName, appServicePlanName, options) {
        return this.ensureResource(() => client.appServicePlans.createOrUpdate(resourceGroupName, appServicePlanName, options), () => this.findAppServicePlans(client, resourceGroupName, appServicePlanName));
    }
    static async findWebApp(client, resourceGroupName, webAppName) {
        const webAppCollection = await client.webApps.listByResourceGroup(resourceGroupName);
        return webAppCollection.find((webApp) => webApp.name === webAppName);
    }
    static async ensureWebApp(client, resourceGroupName, webAppName, siteEnvelope) {
        return this.ensureResource(() => client.webApps.createOrUpdate(resourceGroupName, webAppName, siteEnvelope), () => this.findWebApp(client, resourceGroupName, webAppName));
    }
}
exports.AzureLib = AzureLib;
//# sourceMappingURL=azure-client.js.map