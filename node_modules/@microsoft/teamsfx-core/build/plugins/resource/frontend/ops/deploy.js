"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrontendDeployment = void 0;
const tslib_1 = require("tslib");
const errors_1 = require("../resources/errors");
const constants_1 = require("../constants");
const progress_helper_1 = require("../utils/progress-helper");
const logger_1 = require("../utils/logger");
const messages_1 = require("../resources/messages");
const utils_1 = require("../utils");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const telemetry_helper_1 = require("../utils/telemetry-helper");
const env_1 = require("../env");
class FrontendDeployment {
    static async needBuild(componentPath, envName) {
        const lastBuildTime = await FrontendDeployment.getLastBuildTime(componentPath, envName);
        if (!lastBuildTime) {
            return true;
        }
        return FrontendDeployment.hasUpdatedContent(componentPath, lastBuildTime, (itemPath) => !itemPath.startsWith(env_1.envFileNamePrefix) || itemPath === env_1.envFileName(envName));
    }
    static async needDeploy(componentPath, envName) {
        const lastBuildTime = await FrontendDeployment.getLastBuildTime(componentPath, envName);
        const lastDeployTime = await FrontendDeployment.getLastDeploymentTime(componentPath, envName);
        if (!lastBuildTime || !lastDeployTime) {
            return true;
        }
        return lastDeployTime < lastBuildTime;
    }
    static async doFrontendBuild(componentPath, envs, envName) {
        if (!(await FrontendDeployment.needBuild(componentPath, envName))) {
            return FrontendDeployment.skipBuild();
        }
        const progressHandler = progress_helper_1.ProgressHelper.deployProgress;
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.NPMInstall));
        await errors_1.runWithErrorCatchAndThrow(new errors_1.NpmInstallError(), async () => {
            await utils_1.Utils.execute(constants_1.Commands.InstallNodePackages, componentPath);
        });
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.Build));
        await errors_1.runWithErrorCatchAndThrow(new errors_1.BuildError(), async () => {
            await utils_1.Utils.execute(constants_1.Commands.BuildFrontend, componentPath, Object.assign(Object.assign({}, envs.customizedRemoteEnvs), envs.teamsfxRemoteEnvs));
        });
        await FrontendDeployment.saveDeploymentInfo(componentPath, envName, {
            lastBuildTime: new Date().toISOString(),
        });
    }
    static async skipBuild() {
        logger_1.Logger.info(messages_1.Messages.SkipBuild);
        const progressHandler = progress_helper_1.ProgressHelper.deployProgress;
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.NPMInstall));
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.Build));
    }
    static async getBuiltPath(componentPath) {
        const builtPath = path_1.default.join(componentPath, constants_1.FrontendPathInfo.BuildPath);
        const pathExists = await fs_extra_1.default.pathExists(builtPath);
        if (!pathExists) {
            throw new errors_1.NoBuildPathError();
        }
        return builtPath;
    }
    static async doFrontendDeployment(client, componentPath, envName) {
        if (!(await FrontendDeployment.needDeploy(componentPath, envName))) {
            return FrontendDeployment.skipDeployment();
        }
        const progressHandler = progress_helper_1.ProgressHelper.deployProgress;
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.getSrcAndDest));
        const builtPath = await FrontendDeployment.getBuiltPath(componentPath);
        const container = await errors_1.runWithErrorCatchAndThrow(new errors_1.GetContainerError(), async () => await client.getContainer(constants_1.Constants.AzureStorageWebContainer));
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.Clear));
        await errors_1.runWithErrorCatchAndThrow(new errors_1.ClearStorageError(), async () => {
            await client.deleteAllBlobs(container);
        });
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.Upload));
        await errors_1.runWithErrorCatchAndThrow(new errors_1.UploadToStorageError(), async () => {
            await client.uploadFiles(container, builtPath);
        });
        await FrontendDeployment.saveDeploymentInfo(componentPath, envName, {
            lastDeployTime: new Date().toISOString(),
        });
    }
    static async skipDeployment() {
        telemetry_helper_1.TelemetryHelper.sendGeneralEvent(constants_1.TelemetryEvent.SkipDeploy);
        logger_1.Logger.warning(messages_1.Messages.SkipDeploy);
        const progressHandler = progress_helper_1.ProgressHelper.deployProgress;
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.getSrcAndDest));
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.Clear));
        await (progressHandler === null || progressHandler === void 0 ? void 0 : progressHandler.next(progress_helper_1.DeploySteps.Upload));
    }
    static async hasUpdatedContent(componentPath, referenceTime, filter) {
        const folderFilter = (itemPath) => !constants_1.FrontendPathInfo.TabDeployIgnoreFolder.includes(path_1.default.basename(itemPath));
        let changed = false;
        await utils_1.Utils.forEachFileAndDir(componentPath, (itemPath, stats) => {
            const relativePath = path_1.default.relative(componentPath, itemPath);
            if (relativePath && referenceTime < stats.mtime && (!filter || filter(relativePath))) {
                changed = true;
                return true;
            }
        }, folderFilter);
        return changed;
    }
    static async getDeploymentInfo(componentPath, envName) {
        const deploymentDir = path_1.default.join(componentPath, constants_1.FrontendPathInfo.TabDeploymentFolderName);
        const deploymentInfoPath = path_1.default.join(deploymentDir, constants_1.FrontendPathInfo.TabDeploymentInfoFileName);
        try {
            const deploymentInfoJson = await fs_extra_1.default.readJSON(deploymentInfoPath);
            if (!deploymentInfoJson) {
                return undefined;
            }
            return deploymentInfoJson[envName];
        }
        catch (_a) {
            telemetry_helper_1.TelemetryHelper.sendGeneralEvent(constants_1.TelemetryEvent.DeploymentInfoNotFound);
            return undefined;
        }
    }
    static async getLastBuildTime(componentPath, envName) {
        const deploymentInfoJson = await FrontendDeployment.getDeploymentInfo(componentPath, envName);
        return (deploymentInfoJson === null || deploymentInfoJson === void 0 ? void 0 : deploymentInfoJson.lastBuildTime)
            ? new Date(deploymentInfoJson.lastBuildTime)
            : undefined;
    }
    static async getLastDeploymentTime(componentPath, envName) {
        const deploymentInfoJson = await FrontendDeployment.getDeploymentInfo(componentPath, envName);
        return (deploymentInfoJson === null || deploymentInfoJson === void 0 ? void 0 : deploymentInfoJson.lastDeployTime)
            ? new Date(deploymentInfoJson.lastDeployTime)
            : undefined;
    }
    static async saveDeploymentInfo(componentPath, envName, deploymentInfo) {
        var _a, _b, _c;
        const deploymentDir = path_1.default.join(componentPath, constants_1.FrontendPathInfo.TabDeploymentFolderName);
        const deploymentInfoPath = path_1.default.join(deploymentDir, constants_1.FrontendPathInfo.TabDeploymentInfoFileName);
        await fs_extra_1.default.ensureDir(deploymentDir);
        let deploymentInfoJson = {};
        try {
            deploymentInfoJson = await fs_extra_1.default.readJSON(deploymentInfoPath);
        }
        catch (_d) {
            // Failed to read info file, which doesn't block deployment
        }
        (_a = deploymentInfoJson[envName]) !== null && _a !== void 0 ? _a : (deploymentInfoJson[envName] = {});
        deploymentInfoJson[envName].lastBuildTime =
            (_b = deploymentInfo.lastBuildTime) !== null && _b !== void 0 ? _b : deploymentInfoJson[envName].lastBuildTime;
        deploymentInfoJson[envName].lastDeployTime =
            (_c = deploymentInfo.lastDeployTime) !== null && _c !== void 0 ? _c : deploymentInfoJson[envName].lastDeployTime;
        try {
            await fs_extra_1.default.writeJSON(deploymentInfoPath, deploymentInfoJson);
        }
        catch (_e) {
            // Failed to write deployment info, which doesn't block deployment
        }
    }
}
exports.FrontendDeployment = FrontendDeployment;
//# sourceMappingURL=deploy.js.map