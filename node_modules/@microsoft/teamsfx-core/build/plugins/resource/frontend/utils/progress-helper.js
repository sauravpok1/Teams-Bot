"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressHelper = exports.MigrateSteps = exports.DeploySteps = exports.PreDeploySteps = exports.PostProvisionSteps = exports.ProvisionSteps = exports.ScaffoldSteps = void 0;
const messages_1 = require("../resources/messages");
exports.ScaffoldSteps = {
    Scaffold: messages_1.Messages.ProgressScaffold,
};
exports.ProvisionSteps = {
    RegisterResourceProvider: messages_1.Messages.ProgressRegisterRP,
    CreateStorage: messages_1.Messages.ProgressCreateStorage,
    Configure: messages_1.Messages.ProgressConfigure,
};
exports.PostProvisionSteps = {
    EnableStaticWebsite: messages_1.Messages.ProgressEnableStorageStaticWebsite,
};
exports.PreDeploySteps = {
    CheckStorage: messages_1.Messages.ProgressCheckStorage,
};
exports.DeploySteps = {
    NPMInstall: messages_1.Messages.ProgressNPMInstall,
    Build: messages_1.Messages.ProgressBuild,
    getSrcAndDest: messages_1.Messages.ProgressGetSrcAndDest,
    Clear: messages_1.Messages.ProgressClear,
    Upload: messages_1.Messages.ProgressUpload,
};
exports.MigrateSteps = {
    Migrate: messages_1.Messages.ProgressMigrate,
};
class ProgressHelper {
    static async startScaffoldProgressHandler(ctx) {
        var _a, _b, _c;
        await ((_a = this.scaffoldProgress) === null || _a === void 0 ? void 0 : _a.end(true));
        this.scaffoldProgress = (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.createProgressBar(messages_1.Messages.ScaffoldProgressTitle, Object.entries(exports.ScaffoldSteps).length);
        await ((_c = this.scaffoldProgress) === null || _c === void 0 ? void 0 : _c.start(messages_1.Messages.ProgressStart));
        return this.scaffoldProgress;
    }
    static async startPostProvisionProgressHandler(ctx) {
        var _a, _b, _c;
        await ((_a = this.postProvisionProgress) === null || _a === void 0 ? void 0 : _a.end(true));
        this.postProvisionProgress = (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.createProgressBar(messages_1.Messages.PostProvisionProgressTitle, Object.entries(exports.PostProvisionSteps).length);
        await ((_c = this.postProvisionProgress) === null || _c === void 0 ? void 0 : _c.start(messages_1.Messages.ProgressStart));
        return this.postProvisionProgress;
    }
    static async startProvisionProgressHandler(ctx) {
        var _a, _b, _c;
        await ((_a = this.provisionProgress) === null || _a === void 0 ? void 0 : _a.end(true));
        this.provisionProgress = (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.createProgressBar(messages_1.Messages.ProvisionProgressTitle, Object.entries(exports.ProvisionSteps).length);
        await ((_c = this.provisionProgress) === null || _c === void 0 ? void 0 : _c.start(messages_1.Messages.ProgressStart));
        return this.provisionProgress;
    }
    static async createPreDeployProgressHandler(ctx) {
        var _a, _b, _c;
        await ((_a = this.preDeployProgress) === null || _a === void 0 ? void 0 : _a.end(true));
        this.preDeployProgress = (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.createProgressBar(messages_1.Messages.PreDeployProgressTitle, Object.entries(exports.PreDeploySteps).length);
        await ((_c = this.preDeployProgress) === null || _c === void 0 ? void 0 : _c.start(messages_1.Messages.ProgressStart));
        return this.preDeployProgress;
    }
    static async startDeployProgressHandler(ctx) {
        var _a, _b, _c;
        await ((_a = this.deployProgress) === null || _a === void 0 ? void 0 : _a.end(true));
        this.deployProgress = (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.createProgressBar(messages_1.Messages.DeployProgressTitle, Object.entries(exports.DeploySteps).length);
        await ((_c = this.deployProgress) === null || _c === void 0 ? void 0 : _c.start(messages_1.Messages.ProgressStart));
        return this.deployProgress;
    }
    static async startMigrateProgressHandler(ctx) {
        var _a, _b, _c;
        await ((_a = this.migrateProgress) === null || _a === void 0 ? void 0 : _a.end(true));
        this.migrateProgress = (_b = ctx.ui) === null || _b === void 0 ? void 0 : _b.createProgressBar(messages_1.Messages.MigrateProgressTitle, Object.entries(exports.MigrateSteps).length);
        await ((_c = this.migrateProgress) === null || _c === void 0 ? void 0 : _c.start(messages_1.Messages.ProgressStart));
        return this.migrateProgress;
    }
    static async endAllHandlers(success) {
        await this.endScaffoldProgress(success);
        await this.endProvisionProgress(success);
        await this.endPreDeployProgress(success);
        await this.endDeployProgress(success);
        await this.endMigrateProgress(success);
    }
    static async endScaffoldProgress(success) {
        var _a;
        await ((_a = this.scaffoldProgress) === null || _a === void 0 ? void 0 : _a.end(success));
        this.scaffoldProgress = undefined;
    }
    static async endProvisionProgress(success) {
        var _a;
        await ((_a = this.provisionProgress) === null || _a === void 0 ? void 0 : _a.end(success));
        this.provisionProgress = undefined;
    }
    static async endPostProvisionProgress(success) {
        var _a;
        await ((_a = this.postProvisionProgress) === null || _a === void 0 ? void 0 : _a.end(success));
        this.postProvisionProgress = undefined;
    }
    static async endPreDeployProgress(success) {
        var _a;
        await ((_a = this.preDeployProgress) === null || _a === void 0 ? void 0 : _a.end(success));
        this.preDeployProgress = undefined;
    }
    static async endDeployProgress(success) {
        var _a;
        await ((_a = this.deployProgress) === null || _a === void 0 ? void 0 : _a.end(success));
        this.deployProgress = undefined;
    }
    static async endMigrateProgress(success) {
        var _a;
        await ((_a = this.migrateProgress) === null || _a === void 0 ? void 0 : _a.end(success));
        this.migrateProgress = undefined;
    }
}
exports.ProgressHelper = ProgressHelper;
//# sourceMappingURL=progress-helper.js.map