"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWithErrorCatchAndWrap = exports.runWithErrorCatchAndThrow = exports.UnhandledErrorMessage = exports.UnhandledErrorCode = exports.UserTaskNotImplementedError = exports.NotImplemented = exports.MigrateV1ProjectError = exports.InvalidAadPluginConfigError = exports.InvalidAuthPluginConfigError = exports.InvalidTabLanguageError = exports.NpmInstallError = exports.BuildError = exports.NoBuildPathError = exports.FileSystemError = exports.UnzipTemplateError = exports.TemplateZipFallbackError = exports.TemplateManifestError = exports.UnknownScaffoldError = exports.GetContainerError = exports.UploadToStorageError = exports.ClearStorageError = exports.EnableStaticWebsiteError = exports.CreateStorageAccountError = exports.RegisterResourceProviderError = exports.StorageAccountAlreadyTakenError = exports.InvalidStorageNameError = exports.StaticWebsiteDisabledError = exports.NoStorageError = exports.CheckStorageError = exports.NoResourceGroupError = exports.CheckResourceGroupError = exports.InvalidConfigError = exports.NoPreStepError = exports.UnauthenticatedError = exports.FrontendPluginError = exports.ErrorType = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("../constants");
const logger_1 = require("../utils/logger");
const path_1 = tslib_1.__importDefault(require("path"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
const tips = {
    checkLog: "Check log for more information.",
    reScaffold: `Run 'Start A New Project' again.`,
    doProvision: `Run 'Provision Resource' before this command.`,
    doLogin: "Login to Azure.",
    reLogin: "Sign out and login to Azure again.",
    reProvision: `Run 'Provision Resource' again.`,
    doNpmInstall: `Run 'npm install' in the folder: '${constants_1.FrontendPathInfo.WorkingDir}'.`,
    doBuild: `Run 'npm run build' in the folder: '${constants_1.FrontendPathInfo.WorkingDir}'.`,
    ensureBuildPath: `Ensure your built project exists: '${constants_1.FrontendPathInfo.BuildPath}'.`,
    ensureResourceGroup: "Ensure your resource group exists.",
    ensureAppNameValid: "Ensure your app name only contains alphabetical and numeric characters, and does not contain trademark or reserved words.",
    deleteSameNameStorage: "Delete your Azure Storage Account with same name in another resource group or subscription.",
    checkNetwork: "Check your network connection.",
    checkFsPermissions: "Check if you have Read/Write permissions to your file system.",
    checkStoragePermissions: "Check if you have permissions to your Azure Storage Account.",
    checkSystemTime: "You may get expired credentials, check if your system time is correct.",
    restoreEnvironment: `If you manually updated configuration files (under directory .${teamsfx_api_1.ConfigFolderName}), recover them.`,
    registerRequiredRP: `Register required resource provider '${constants_1.AzureInfo.RequiredResourceProviders.join(`', '`)}' for your subscription manually.`,
    migrateV1Project: `Rollback your project from '${teamsfx_api_1.ArchiveFolderName}' folder.`,
};
class FrontendPluginError extends Error {
    constructor(errorType, code, message, suggestions, helpLink) {
        super(message);
        this.code = code;
        this.message = message;
        this.suggestions = suggestions;
        this.errorType = errorType;
        this.helpLink = helpLink;
    }
    getMessage() {
        return `${this.message} Suggestions: ${this.suggestions.join(" ")}`;
    }
    setInnerError(error) {
        this.innerError = error;
    }
    getInnerError() {
        return this.innerError;
    }
}
exports.FrontendPluginError = FrontendPluginError;
class UnauthenticatedError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "UnauthenticatedError", "Failed to get user login information.", [
            tips.doLogin,
        ]);
    }
}
exports.UnauthenticatedError = UnauthenticatedError;
class NoPreStepError extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "NoPreStepError", "The pre-step is not done.", [tips.checkLog]);
    }
}
exports.NoPreStepError = NoPreStepError;
class InvalidConfigError extends FrontendPluginError {
    constructor(key, detailedErrorMessage) {
        const detailedMsg = detailedErrorMessage ? ` Error message: ${detailedErrorMessage}` : "";
        super(ErrorType.User, "InvalidConfigError", `Get invalid ${key}.${detailedMsg}`, [
            tips.restoreEnvironment,
        ]);
    }
}
exports.InvalidConfigError = InvalidConfigError;
class CheckResourceGroupError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "CheckResourceGroupError", "Failed to check resource group existence.", [
            tips.checkLog,
        ]);
    }
}
exports.CheckResourceGroupError = CheckResourceGroupError;
class NoResourceGroupError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NoResourceGroupError", "Failed to find resource group.", [
            tips.ensureResourceGroup,
        ]);
    }
}
exports.NoResourceGroupError = NoResourceGroupError;
class CheckStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "CheckStorageError", "Failed to check Azure Storage Account availability.", [tips.checkSystemTime, tips.checkLog]);
    }
}
exports.CheckStorageError = CheckStorageError;
class NoStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NoStorageError", "Failed to find Azure Storage Account.", [
            tips.reProvision,
        ]);
    }
}
exports.NoStorageError = NoStorageError;
class StaticWebsiteDisabledError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "StaticWebsiteDisableError", "Static website hosting feature is disabled for Azure Storage Account.", [tips.reProvision], constants_1.FrontendPluginInfo.HelpLink);
    }
}
exports.StaticWebsiteDisabledError = StaticWebsiteDisabledError;
class InvalidStorageNameError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "InvalidStorageNameError", "Azure Storage Name is invalid.", [
            tips.ensureAppNameValid,
        ]);
    }
}
exports.InvalidStorageNameError = InvalidStorageNameError;
class StorageAccountAlreadyTakenError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "StorageAccountAlreadyTakenError", "Azure Storage Name is already in use.", [tips.deleteSameNameStorage]);
    }
}
exports.StorageAccountAlreadyTakenError = StorageAccountAlreadyTakenError;
// TODO: help link for this error
class RegisterResourceProviderError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "RegisterResourceProviderError", "Failed to register required resource provider for Tab frontend app.", [tips.registerRequiredRP, tips.checkLog]);
    }
}
exports.RegisterResourceProviderError = RegisterResourceProviderError;
class CreateStorageAccountError extends FrontendPluginError {
    constructor(innerErrorCode) {
        super(ErrorType.User, "CreateStorageAccountError", `Failed to create Azure Storage Account${innerErrorCode ? `: ${innerErrorCode}` : ""}.`, [tips.checkLog]);
    }
}
exports.CreateStorageAccountError = CreateStorageAccountError;
class EnableStaticWebsiteError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "EnableStaticWebsiteError", "Failed to enable static website feature for Azure Storage Account.", [tips.checkSystemTime, tips.checkStoragePermissions], constants_1.FrontendPluginInfo.HelpLink);
    }
}
exports.EnableStaticWebsiteError = EnableStaticWebsiteError;
class ClearStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "ClearStorageError", "Failed to clear Azure Storage Account.", [
            tips.checkSystemTime,
            tips.checkNetwork,
        ]);
    }
}
exports.ClearStorageError = ClearStorageError;
class UploadToStorageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "UploadToStorageError", `Failed to upload local path ${path_1.default.join(constants_1.FrontendPathInfo.WorkingDir, constants_1.FrontendPathInfo.BuildPath)} to Azure Storage Account.`, [tips.checkSystemTime, tips.checkNetwork]);
    }
}
exports.UploadToStorageError = UploadToStorageError;
class GetContainerError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "GetContainerError", `Failed to get container '${constants_1.Constants.AzureStorageWebContainer}' from Azure Storage Account.`, [tips.checkSystemTime, tips.checkStoragePermissions, tips.checkNetwork]);
    }
}
exports.GetContainerError = GetContainerError;
class UnknownScaffoldError extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "UnknownScaffoldError", "Failed to scaffold project causes unknown reason.", [tips.checkLog]);
    }
}
exports.UnknownScaffoldError = UnknownScaffoldError;
class TemplateManifestError extends FrontendPluginError {
    constructor(msg) {
        super(ErrorType.User, "TemplateManifestError ", `Failed to find template from manifest: ${msg}`, [tips.checkNetwork]);
    }
}
exports.TemplateManifestError = TemplateManifestError;
class TemplateZipFallbackError extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "TemplateZipFallbackError", "Failed to download zip package and open local zip package.", [tips.checkLog, tips.checkNetwork]);
    }
}
exports.TemplateZipFallbackError = TemplateZipFallbackError;
class UnzipTemplateError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "UnzipTemplateError", "Failed to unzip template package.", [
            tips.checkFsPermissions,
        ]);
    }
}
exports.UnzipTemplateError = UnzipTemplateError;
class FileSystemError extends FrontendPluginError {
    constructor(message) {
        super(ErrorType.System, "FileSystemError", message, [tips.checkLog]);
    }
}
exports.FileSystemError = FileSystemError;
class NoBuildPathError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NoBuildPathError", `Failed to find 'build' folder.`, [
            tips.doBuild,
            tips.ensureBuildPath,
        ]);
    }
}
exports.NoBuildPathError = NoBuildPathError;
class BuildError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "BuildError", "Failed to build Tab app.", [tips.doBuild, tips.checkLog]);
    }
}
exports.BuildError = BuildError;
class NpmInstallError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "NpmInstallError", `Failed to run 'npm install' for Tab app.`, [
            tips.doNpmInstall,
            tips.checkLog,
        ]);
    }
}
exports.NpmInstallError = NpmInstallError;
class InvalidTabLanguageError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "InvalidTabLanguageError", "The selected programming language yet is not supported by Tab.", [tips.restoreEnvironment, tips.reScaffold]);
    }
}
exports.InvalidTabLanguageError = InvalidTabLanguageError;
class InvalidAuthPluginConfigError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "InvalidAuthPluginConfigError", "The auth plugin configuration is invalid.", [tips.restoreEnvironment, tips.reProvision]);
    }
}
exports.InvalidAuthPluginConfigError = InvalidAuthPluginConfigError;
class InvalidAadPluginConfigError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "InvalidAadPluginConfigError", "The aad plugin configuration is invalid.", [tips.restoreEnvironment, tips.reProvision]);
    }
}
exports.InvalidAadPluginConfigError = InvalidAadPluginConfigError;
class MigrateV1ProjectError extends FrontendPluginError {
    constructor() {
        super(ErrorType.User, "MigrateV1ProjectError", `Failed to migrate Teams Toolkit V1 project into '${constants_1.FrontendPathInfo.WorkingDir}'.`, [tips.migrateV1Project, tips.checkLog]);
    }
}
exports.MigrateV1ProjectError = MigrateV1ProjectError;
class NotImplemented extends FrontendPluginError {
    constructor() {
        super(ErrorType.System, "NotImplemented", "Not Implemented", []);
    }
}
exports.NotImplemented = NotImplemented;
class UserTaskNotImplementedError extends FrontendPluginError {
    constructor(taskName) {
        super(ErrorType.System, "UserTaskNotImplementedError", `User task '${taskName}' is not implemented.`, []);
    }
}
exports.UserTaskNotImplementedError = UserTaskNotImplementedError;
exports.UnhandledErrorCode = "UnhandledError";
exports.UnhandledErrorMessage = "Unhandled error.";
async function runWithErrorCatchAndThrow(error, fn) {
    try {
        const res = await Promise.resolve(fn());
        return res;
    }
    catch (e) {
        logger_1.Logger.error(e.toString());
        error.setInnerError(e);
        throw error;
    }
}
exports.runWithErrorCatchAndThrow = runWithErrorCatchAndThrow;
async function runWithErrorCatchAndWrap(wrap, fn) {
    try {
        const res = await Promise.resolve(fn());
        return res;
    }
    catch (e) {
        logger_1.Logger.error(e.toString());
        const error = wrap(e);
        error.setInnerError(e);
        throw error;
    }
}
exports.runWithErrorCatchAndWrap = runWithErrorCatchAndWrap;
//# sourceMappingURL=errors.js.map