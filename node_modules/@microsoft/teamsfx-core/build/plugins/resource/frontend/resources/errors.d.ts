export declare enum ErrorType {
    User = 0,
    System = 1
}
export declare class FrontendPluginError extends Error {
    code: string;
    message: string;
    suggestions: string[];
    errorType: ErrorType;
    helpLink?: string;
    innerError?: Error;
    constructor(errorType: ErrorType, code: string, message: string, suggestions: string[], helpLink?: string);
    getMessage(): string;
    setInnerError(error: Error): void;
    getInnerError(): Error | undefined;
}
export declare class UnauthenticatedError extends FrontendPluginError {
    constructor();
}
export declare class NoPreStepError extends FrontendPluginError {
    constructor();
}
export declare class InvalidConfigError extends FrontendPluginError {
    constructor(key: string, detailedErrorMessage?: string);
}
export declare class CheckResourceGroupError extends FrontendPluginError {
    constructor();
}
export declare class NoResourceGroupError extends FrontendPluginError {
    constructor();
}
export declare class CheckStorageError extends FrontendPluginError {
    constructor();
}
export declare class NoStorageError extends FrontendPluginError {
    constructor();
}
export declare class StaticWebsiteDisabledError extends FrontendPluginError {
    constructor();
}
export declare class InvalidStorageNameError extends FrontendPluginError {
    constructor();
}
export declare class StorageAccountAlreadyTakenError extends FrontendPluginError {
    constructor();
}
export declare class RegisterResourceProviderError extends FrontendPluginError {
    constructor();
}
export declare class CreateStorageAccountError extends FrontendPluginError {
    constructor(innerErrorCode?: string);
}
export declare class EnableStaticWebsiteError extends FrontendPluginError {
    constructor();
}
export declare class ClearStorageError extends FrontendPluginError {
    constructor();
}
export declare class UploadToStorageError extends FrontendPluginError {
    constructor();
}
export declare class GetContainerError extends FrontendPluginError {
    constructor();
}
export declare class UnknownScaffoldError extends FrontendPluginError {
    constructor();
}
export declare class TemplateManifestError extends FrontendPluginError {
    constructor(msg: string);
}
export declare class TemplateZipFallbackError extends FrontendPluginError {
    constructor();
}
export declare class UnzipTemplateError extends FrontendPluginError {
    constructor();
}
export declare class FileSystemError extends FrontendPluginError {
    constructor(message: string);
}
export declare class NoBuildPathError extends FrontendPluginError {
    constructor();
}
export declare class BuildError extends FrontendPluginError {
    constructor();
}
export declare class NpmInstallError extends FrontendPluginError {
    constructor();
}
export declare class InvalidTabLanguageError extends FrontendPluginError {
    constructor();
}
export declare class InvalidAuthPluginConfigError extends FrontendPluginError {
    constructor();
}
export declare class InvalidAadPluginConfigError extends FrontendPluginError {
    constructor();
}
export declare class MigrateV1ProjectError extends FrontendPluginError {
    constructor();
}
export declare class NotImplemented extends FrontendPluginError {
    constructor();
}
export declare class UserTaskNotImplementedError extends FrontendPluginError {
    constructor(taskName: string);
}
export declare const UnhandledErrorCode = "UnhandledError";
export declare const UnhandledErrorMessage = "Unhandled error.";
export declare function runWithErrorCatchAndThrow<T>(error: FrontendPluginError, fn: () => T | Promise<T>): Promise<T>;
export declare function runWithErrorCatchAndWrap<T>(wrap: (error: any) => FrontendPluginError, fn: () => T | Promise<T>): Promise<T>;
//# sourceMappingURL=errors.d.ts.map