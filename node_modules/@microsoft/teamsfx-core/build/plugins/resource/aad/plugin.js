"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadAppForTeamsImpl = void 0;
const tslib_1 = require("tslib");
const results_1 = require("./results");
const configs_1 = require("./utils/configs");
const telemetry_1 = require("./utils/telemetry");
const tokenProvider_1 = require("./utils/tokenProvider");
const aadAppClient_1 = require("./aadAppClient");
const errors_1 = require("./errors");
const models_1 = require("./interfaces/models");
const dialog_1 = require("./utils/dialog");
const constants_1 = require("./constants");
const uuid_1 = require("uuid");
const jsonPermissionList = tslib_1.__importStar(require("./permissions/permissions.json"));
const common_1 = require("./utils/common");
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const constants_2 = require("../../../common/constants");
const tools_1 = require("../../../common/tools");
const folder_1 = require("../../../folder");
class AadAppForTeamsImpl {
    async provision(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.StartProvision, constants_1.Messages.StartLocalDebug, isLocalDebug);
        const telemetryMessage = isLocalDebug
            ? constants_1.Messages.EndLocalDebug.telemetry
            : constants_1.Messages.EndProvision.telemetry;
        await tokenProvider_1.TokenProvider.init(ctx);
        // Move objectId etc. from input to output.
        const skip = common_1.Utils.skipAADProvision(ctx, isLocalDebug);
        if (skip && !tools_1.isMultiEnvEnabled()) {
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_1.Messages.getLog(constants_1.Messages.SkipProvision));
            if (configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, isLocalDebug) &&
                configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientId, isLocalDebug) &&
                configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientSecret, isLocalDebug) &&
                configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, isLocalDebug)) {
                const config = new configs_1.ProvisionConfig(isLocalDebug);
                config.oauth2PermissionScopeId = configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, isLocalDebug);
                config.saveConfigIntoContext(ctx, tokenProvider_1.TokenProvider.tenantId);
                common_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndProvision, constants_1.Messages.EndLocalDebug, isLocalDebug, { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes });
                return results_1.ResultFactory.Success();
            }
            else {
                const fileName = common_1.Utils.getInputFileName(ctx);
                throw results_1.ResultFactory.UserError(errors_1.GetSkipAppConfigError.name, errors_1.GetSkipAppConfigError.message(fileName), undefined, undefined, errors_1.GetSkipAppConfigError.helpLink);
            }
        }
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.Provision, constants_1.ProgressTitle.ProvisionSteps);
        let config = new configs_1.ProvisionConfig(isLocalDebug);
        await config.restoreConfigFromContext(ctx);
        const permissions = AadAppForTeamsImpl.parsePermission(config.permissionRequest, ctx.logProvider);
        await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.start(constants_1.ProgressDetail.Starting));
        if (config.objectId) {
            if (!skip) {
                await ((_c = dialog_1.DialogUtils.progress) === null || _c === void 0 ? void 0 : _c.next(constants_1.ProgressDetail.GetAadApp));
                config = await aadAppClient_1.AadAppClient.getAadApp(ctx, telemetryMessage, config.objectId, isLocalDebug, config.password);
                (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(constants_1.Messages.getLog(constants_1.Messages.GetAadAppSuccess));
            }
        }
        else {
            await ((_e = dialog_1.DialogUtils.progress) === null || _e === void 0 ? void 0 : _e.next(constants_1.ProgressDetail.ProvisionAadApp));
            await aadAppClient_1.AadAppClient.createAadApp(ctx, telemetryMessage, config);
            config.password = undefined;
            (_f = ctx.logProvider) === null || _f === void 0 ? void 0 : _f.info(constants_1.Messages.getLog(constants_1.Messages.CreateAadAppSuccess));
        }
        if (!config.password) {
            await ((_g = dialog_1.DialogUtils.progress) === null || _g === void 0 ? void 0 : _g.next(constants_1.ProgressDetail.CreateAadAppSecret));
            await aadAppClient_1.AadAppClient.createAadAppSecret(ctx, telemetryMessage, config);
            (_h = ctx.logProvider) === null || _h === void 0 ? void 0 : _h.info(constants_1.Messages.getLog(constants_1.Messages.CreateAadAppPasswordSuccess));
        }
        await ((_j = dialog_1.DialogUtils.progress) === null || _j === void 0 ? void 0 : _j.next(constants_1.ProgressDetail.UpdatePermission));
        await aadAppClient_1.AadAppClient.updateAadAppPermission(ctx, telemetryMessage, config.objectId, permissions, skip);
        (_k = ctx.logProvider) === null || _k === void 0 ? void 0 : _k.info(constants_1.Messages.getLog(constants_1.Messages.UpdatePermissionSuccess));
        await ((_l = dialog_1.DialogUtils.progress) === null || _l === void 0 ? void 0 : _l.end(true));
        config.saveConfigIntoContext(ctx, tokenProvider_1.TokenProvider.tenantId);
        common_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndProvision, constants_1.Messages.EndLocalDebug, isLocalDebug, skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {});
        return results_1.ResultFactory.Success();
    }
    setApplicationInContext(ctx, isLocalDebug = false) {
        var _a;
        const config = new configs_1.SetApplicationInContextConfig(isLocalDebug);
        config.restoreConfigFromContext(ctx);
        if (!config.frontendDomain && !config.botId) {
            throw results_1.ResultFactory.UserError(errors_1.AppIdUriInvalidError.name, errors_1.AppIdUriInvalidError.message());
        }
        let applicationIdUri = "api://";
        applicationIdUri += config.frontendDomain ? `${config.frontendDomain}/` : "";
        applicationIdUri += config.botId ? "botid-" + config.botId : config.clientId;
        config.applicationIdUri = applicationIdUri;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_1.Messages.getLog(constants_1.Messages.SetAppIdUriSuccess));
        config.saveConfigIntoContext(ctx);
        return results_1.ResultFactory.Success();
    }
    async postProvision(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d, _e, _f, _g;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.StartPostProvision, constants_1.Messages.StartPostLocalDebug, isLocalDebug);
        const skip = common_1.Utils.skipAADProvision(ctx, isLocalDebug);
        if (skip && !tools_1.isMultiEnvEnabled()) {
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_1.Messages.SkipProvision);
            common_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndPostProvision, constants_1.Messages.EndPostLocalDebug, isLocalDebug);
            return results_1.ResultFactory.Success();
        }
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.PostProvision, constants_1.ProgressTitle.PostProvisionSteps);
        await tokenProvider_1.TokenProvider.init(ctx);
        const config = new configs_1.PostProvisionConfig(isLocalDebug);
        config.restoreConfigFromContext(ctx);
        await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.start(constants_1.ProgressDetail.Starting));
        await ((_c = dialog_1.DialogUtils.progress) === null || _c === void 0 ? void 0 : _c.next(constants_1.ProgressDetail.UpdateRedirectUri));
        const redirectUris = AadAppForTeamsImpl.getRedirectUris(config.frontendEndpoint, config.botEndpoint);
        await aadAppClient_1.AadAppClient.updateAadAppRedirectUri(ctx, isLocalDebug ? constants_1.Messages.EndPostLocalDebug.telemetry : constants_1.Messages.EndPostProvision.telemetry, config.objectId, redirectUris, skip);
        (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(constants_1.Messages.getLog(constants_1.Messages.UpdateRedirectUriSuccess));
        await ((_e = dialog_1.DialogUtils.progress) === null || _e === void 0 ? void 0 : _e.next(constants_1.ProgressDetail.UpdateAppIdUri));
        await aadAppClient_1.AadAppClient.updateAadAppIdUri(ctx, isLocalDebug ? constants_1.Messages.EndPostLocalDebug.telemetry : constants_1.Messages.EndPostProvision.telemetry, config.objectId, config.applicationIdUri, skip);
        (_f = ctx.logProvider) === null || _f === void 0 ? void 0 : _f.info(constants_1.Messages.getLog(constants_1.Messages.UpdateAppIdUriSuccess));
        await ((_g = dialog_1.DialogUtils.progress) === null || _g === void 0 ? void 0 : _g.end(true));
        common_1.Utils.addLogAndTelemetryWithLocalDebug(ctx.logProvider, constants_1.Messages.EndPostProvision, constants_1.Messages.EndPostLocalDebug, isLocalDebug, skip ? { [constants_1.Telemetry.skip]: constants_1.Telemetry.yes } : {});
        return results_1.ResultFactory.Success();
    }
    async updatePermission(ctx) {
        var _a, _b, _c, _d, _e;
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartUpdatePermission);
        const skip = ctx.config.get(constants_1.ConfigKeys.skip);
        if (skip) {
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_1.Messages.SkipProvision);
            common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndUpdatePermission);
            return results_1.ResultFactory.Success();
        }
        dialog_1.DialogUtils.init(ctx.ui, constants_1.ProgressTitle.UpdatePermission, constants_1.ProgressTitle.UpdatePermissionSteps);
        const configs = await AadAppForTeamsImpl.getUpdatePermissionConfigs(ctx);
        if (!configs) {
            return results_1.ResultFactory.Success();
        }
        await tokenProvider_1.TokenProvider.init(ctx);
        const permissions = AadAppForTeamsImpl.parsePermission(configs[0].permissionRequest, ctx.logProvider);
        await ((_b = dialog_1.DialogUtils.progress) === null || _b === void 0 ? void 0 : _b.start(constants_1.ProgressDetail.Starting));
        await ((_c = dialog_1.DialogUtils.progress) === null || _c === void 0 ? void 0 : _c.next(constants_1.ProgressDetail.UpdatePermission));
        for (const config of configs) {
            await aadAppClient_1.AadAppClient.updateAadAppPermission(ctx, constants_1.Messages.EndUpdatePermission.telemetry, config.objectId, permissions);
        }
        (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(constants_1.Messages.getLog(constants_1.Messages.UpdatePermissionSuccess));
        await ((_e = dialog_1.DialogUtils.progress) === null || _e === void 0 ? void 0 : _e.end(true));
        dialog_1.DialogUtils.show(constants_1.Messages.UpdatePermissionSuccessMessage);
        return results_1.ResultFactory.Success();
    }
    async generateArmTemplates(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartGenerateArmTemplates);
        const result = {
            Parameters: JSON.parse(await fs.readFile(path.join(folder_1.getTemplatesFolder(), constants_1.TemplatePathInfo.BicepTemplateRelativeDir, constants_2.Bicep.ParameterFileName), constants_2.ConstantString.UTF8Encoding)),
        };
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndGenerateArmTemplates);
        return results_1.ResultFactory.Success(result);
    }
    async checkPermission(ctx, userInfo) {
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartCheckPermission);
        await tokenProvider_1.TokenProvider.init(ctx, tokenProvider_1.TokenAudience.Graph);
        const config = new configs_1.CheckGrantPermissionConfig();
        await config.restoreConfigFromContext(ctx);
        const userObjectId = userInfo.aadId;
        const isAadOwner = await aadAppClient_1.AadAppClient.checkPermission(ctx, constants_1.Messages.EndCheckPermission.telemetry, config.objectId, userObjectId);
        const result = [
            {
                name: constants_1.Constants.permissions.name,
                type: constants_1.Constants.permissions.type,
                roles: isAadOwner ? [constants_1.Constants.permissions.owner] : [constants_1.Constants.permissions.noPermission],
                resourceId: config.objectId,
            },
        ];
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndCheckPermission);
        return results_1.ResultFactory.Success(result);
    }
    async listCollaborator(ctx) {
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartListCollaborator);
        await tokenProvider_1.TokenProvider.init(ctx, tokenProvider_1.TokenAudience.Graph);
        const objectId = configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, false);
        if (!objectId) {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)));
        }
        const owners = await aadAppClient_1.AadAppClient.listCollaborator(ctx, constants_1.Messages.EndListCollaborator.telemetry, objectId);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndListCollaborator);
        return results_1.ResultFactory.Success(owners);
    }
    async grantPermission(ctx, userInfo) {
        telemetry_1.TelemetryUtils.init(ctx);
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.StartGrantPermission);
        await tokenProvider_1.TokenProvider.init(ctx, tokenProvider_1.TokenAudience.Graph);
        const config = new configs_1.CheckGrantPermissionConfig(true);
        await config.restoreConfigFromContext(ctx);
        const userObjectId = userInfo.aadId;
        await aadAppClient_1.AadAppClient.grantPermission(ctx, constants_1.Messages.EndCheckPermission.telemetry, config.objectId, userObjectId);
        const result = [
            {
                name: constants_1.Constants.permissions.name,
                type: constants_1.Constants.permissions.type,
                roles: [constants_1.Constants.permissions.owner],
                resourceId: config.objectId,
            },
        ];
        common_1.Utils.addLogAndTelemetry(ctx.logProvider, constants_1.Messages.EndGrantPermission);
        return results_1.ResultFactory.Success(result);
    }
    static getRedirectUris(frontendEndpoint, botEndpoint) {
        const redirectUris = [];
        if (frontendEndpoint) {
            redirectUris.push(`${frontendEndpoint}/auth-end.html`);
        }
        if (botEndpoint) {
            redirectUris.push(`${botEndpoint}/auth-end.html`);
        }
        return redirectUris;
    }
    static async getUpdatePermissionConfigs(ctx) {
        var _a;
        let azureAad = false;
        let localAad = false;
        if (ctx.config.get(constants_1.ConfigKeys.objectId)) {
            azureAad = true;
        }
        if (ctx.config.get(common_1.Utils.addLocalDebugPrefix(true, constants_1.ConfigKeys.objectId))) {
            localAad = true;
        }
        if (azureAad && localAad) {
            const ans = ctx.answers[constants_1.Constants.AskForEnvName];
            if (!ans) {
                (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(constants_1.Messages.UserCancelled);
                return undefined;
            }
            if (ans === models_1.Envs.Azure) {
                localAad = false;
            }
            else if (ans === models_1.Envs.LocalDebug) {
                azureAad = false;
            }
        }
        if (!azureAad && !localAad) {
            await dialog_1.DialogUtils.show(constants_1.Messages.NoSelection, "info");
            return undefined;
        }
        const configs = [];
        if (azureAad) {
            const config = new configs_1.UpdatePermissionConfig();
            await config.restoreConfigFromContext(ctx);
            configs.push(config);
        }
        if (localAad) {
            const config = new configs_1.UpdatePermissionConfig(true);
            await config.restoreConfigFromContext(ctx);
            configs.push(config);
        }
        return configs;
    }
    static parsePermission(permissionRequest, logProvider) {
        let permissionRequestParsed;
        try {
            permissionRequestParsed = JSON.parse(permissionRequest);
        }
        catch (error) {
            throw results_1.ResultFactory.UserError(errors_1.ParsePermissionError.name, errors_1.ParsePermissionError.message(), error, undefined, errors_1.ParsePermissionError.helpLink);
        }
        const permissions = AadAppForTeamsImpl.generateRequiredResourceAccess(permissionRequestParsed);
        if (!permissions) {
            throw results_1.ResultFactory.UserError(errors_1.ParsePermissionError.name, errors_1.ParsePermissionError.message(), undefined, undefined, errors_1.ParsePermissionError.helpLink);
        }
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(constants_1.Messages.getLog(constants_1.Messages.ParsePermissionSuccess));
        return permissions;
    }
    static generateRequiredResourceAccess(permissions) {
        if (!permissions) {
            return undefined;
        }
        const map = AadAppForTeamsImpl.getPermissionMap();
        const requiredResourceAccessList = [];
        permissions.forEach((permission) => {
            var _a, _b, _c, _d, _e, _f;
            const requiredResourceAccess = {};
            const resourceIdOrName = permission.resource;
            let resourceId = resourceIdOrName;
            if (!uuid_1.validate(resourceIdOrName)) {
                const res = map[resourceIdOrName];
                if (!res) {
                    throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionName.name, errors_1.UnknownPermissionName.message(resourceIdOrName), undefined, undefined, errors_1.UnknownPermissionName.helpLink);
                }
                const id = res.id;
                if (!id) {
                    throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionName.name, errors_1.UnknownPermissionName.message(resourceIdOrName), undefined, undefined, errors_1.UnknownPermissionName.helpLink);
                }
                resourceId = id;
            }
            requiredResourceAccess.resourceAppId = resourceId;
            requiredResourceAccess.resourceAccess = [];
            if (!permission.delegated) {
                permission.delegated = [];
            }
            if (!permission.application) {
                permission.application = [];
            }
            permission.delegated = (_a = permission.delegated) === null || _a === void 0 ? void 0 : _a.concat(permission.scopes);
            permission.delegated = (_b = permission.delegated) === null || _b === void 0 ? void 0 : _b.filter((scopeName, i) => { var _a; return i === ((_a = permission.delegated) === null || _a === void 0 ? void 0 : _a.indexOf(scopeName)); });
            permission.application = (_c = permission.application) === null || _c === void 0 ? void 0 : _c.concat(permission.roles);
            permission.application = (_d = permission.application) === null || _d === void 0 ? void 0 : _d.filter((roleName, i) => { var _a; return i === ((_a = permission.application) === null || _a === void 0 ? void 0 : _a.indexOf(roleName)); });
            (_e = permission.application) === null || _e === void 0 ? void 0 : _e.forEach((roleName) => {
                if (!roleName) {
                    return;
                }
                const resourceAccess = {
                    id: roleName,
                    type: "Role",
                };
                if (!uuid_1.validate(roleName)) {
                    const roleId = map[resourceId].roles[roleName];
                    if (!roleId) {
                        throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionRole.name, errors_1.UnknownPermissionRole.message(roleName, permission.resource), undefined, undefined, errors_1.UnknownPermissionRole.helpLink);
                    }
                    resourceAccess.id = roleId;
                }
                requiredResourceAccess.resourceAccess.push(resourceAccess);
            });
            (_f = permission.delegated) === null || _f === void 0 ? void 0 : _f.forEach((scopeName) => {
                if (!scopeName) {
                    return;
                }
                const resourceAccess = {
                    id: scopeName,
                    type: "Scope",
                };
                if (!uuid_1.validate(scopeName)) {
                    const scopeId = map[resourceId].scopes[scopeName];
                    if (!scopeId) {
                        throw results_1.ResultFactory.UserError(errors_1.UnknownPermissionScope.name, errors_1.UnknownPermissionScope.message(scopeName, permission.resource), undefined, undefined, errors_1.UnknownPermissionScope.helpLink);
                    }
                    resourceAccess.id = map[resourceId].scopes[scopeName];
                }
                requiredResourceAccess.resourceAccess.push(resourceAccess);
            });
            requiredResourceAccessList.push(requiredResourceAccess);
        });
        return requiredResourceAccessList;
    }
    static getPermissionMap() {
        const permissionList = jsonPermissionList;
        const map = {};
        permissionList.value.forEach((permission) => {
            const resourceId = permission.appId;
            map[resourceId] = {};
            map[resourceId].scopes = {};
            map[resourceId].roles = {};
            map[permission.displayName] = {};
            map[permission.displayName].id = resourceId;
            permission.oauth2PermissionScopes.forEach((scope) => {
                map[resourceId].scopes[scope.value] = scope.id;
            });
            permission.appRoles.forEach((appRole) => {
                map[resourceId].roles[appRole.value] = appRole.id;
            });
        });
        return map;
    }
}
exports.AadAppForTeamsImpl = AadAppForTeamsImpl;
//# sourceMappingURL=plugin.js.map