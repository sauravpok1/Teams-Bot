import { PluginContext } from "@microsoft/teamsfx-api";
import { AadOwner } from "../../../common/permissionInterface";
import { RequiredResourceAccess } from "./interfaces/IAADDefinition";
import { ProvisionConfig } from "./utils/configs";
export declare class AadAppClient {
    static createAadApp(ctx: PluginContext, stage: string, config: ProvisionConfig): Promise<void>;
    static createAadAppSecret(ctx: PluginContext, stage: string, config: ProvisionConfig): Promise<void>;
    static updateAadAppRedirectUri(ctx: PluginContext, stage: string, objectId: string, redirectUris: string[], skip?: boolean): Promise<void>;
    static updateAadAppIdUri(ctx: PluginContext, stage: string, objectId: string, applicationIdUri: string, skip?: boolean): Promise<void>;
    static updateAadAppPermission(ctx: PluginContext, stage: string, objectId: string, permissions: RequiredResourceAccess[], skip?: boolean): Promise<void>;
    static getAadApp(ctx: PluginContext, stage: string, objectId: string, islocalDebug: boolean, clientSecret: string | undefined, skip?: boolean): Promise<ProvisionConfig>;
    static checkPermission(ctx: PluginContext, stage: string, objectId: string, userObjectId: string): Promise<boolean>;
    static grantPermission(ctx: PluginContext, stage: string, objectId: string, userObjectId: string): Promise<void>;
    static listCollaborator(ctx: PluginContext, stage: string, objectId: string): Promise<AadOwner[] | undefined>;
    static retryHanlder(ctx: PluginContext, stage: string, fn: () => Promise<any>): Promise<any>;
    private static getAadAppProvisionObject;
    private static handleError;
    private static getAadUrlObject;
    private static getAadApplicationIdObject;
    private static getAadPermissionObject;
}
//# sourceMappingURL=aadAppClient.d.ts.map