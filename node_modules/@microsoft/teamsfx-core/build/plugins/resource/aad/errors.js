"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphClientErrorMessage = exports.AppStudioErrorMessage = exports.ConfigErrorMessages = exports.ListCollaboratorError = exports.GrantPermissionError = exports.CheckPermissionError = exports.MissingPermissionsRequestProvider = exports.GetConfigError = exports.TenantNotExistError = exports.GetTokenError = exports.UnknownPermissionScope = exports.UnknownPermissionRole = exports.UnknownPermissionName = exports.UnhandledError = exports.ParsePermissionError = exports.InvalidSelectedPluginsError = exports.AppIdUriInvalidError = exports.UpdatePermissionError = exports.UpdateAppIdUriError = exports.UpdateRedirectUriError = exports.CreateSecretError = exports.CreateAppError = exports.GetSkipAppConfigError = exports.GetAppConfigError = exports.GetAppError = void 0;
const tools_1 = require("../../../common/tools");
const constants_1 = require("./constants");
const referHelpLink = "Please refer to the help link for further steps.";
const aadHelpLink = "https://aka.ms/teamsfx-aad-help";
exports.GetAppError = {
    name: "AadGetAppError",
    message: (objectId, tenantId, fileName) => `Failed to get AAD app with Object Id "${objectId}" in tenant "${tenantId}". ` +
        "Please make sure the object id is valid, " +
        `or delete 'objectId' under ${constants_1.Plugins.pluginNameComplex} in ${fileName} and try again.`,
    helpLink: aadHelpLink,
};
exports.GetAppConfigError = {
    name: "AadGetAppConfigError",
    message: (config, fileName) => `Failed to get ${config} from Azure AD app settings.` +
        "Please make sure Azure AD app is correctly configured, " +
        `or delete 'objectId' under ${constants_1.Plugins.pluginNameComplex} in ${fileName} and try again.`,
};
exports.GetSkipAppConfigError = {
    name: "AadGetSkipAppConfigError",
    message: (fileName) => `Failed to get all necessary info. You need to set ${constants_1.ConfigKeys.objectId}, ${constants_1.ConfigKeys.clientId}, ${constants_1.ConfigKeys.clientSecret}, ` +
        `${tools_1.isMultiEnvEnabled() ? constants_1.ConfigKeys.accessAsUserScopeId : constants_1.ConfigKeys.oauth2PermissionScopeId} under ${tools_1.isMultiEnvEnabled() ? constants_1.Plugins.auth : constants_1.Plugins.pluginNameComplex} in ${fileName}.`,
    helpLink: aadHelpLink,
};
exports.CreateAppError = {
    name: "AadCreateAppError",
    message: () => `Failed to create an app in Azure Active Directory.`,
};
exports.CreateSecretError = {
    name: "AadCreateSecretError",
    message: () => `Failed to create an application secret in Azure Active Directory.`,
};
exports.UpdateRedirectUriError = {
    name: "UpdateRedirectUriError",
    message: () => `Failed to update application redirect URI in Azure Active Directory.`,
};
exports.UpdateAppIdUriError = {
    name: "UpdateAppIdUriError",
    message: () => `Failed to update Application ID URI in Azure Active Directory. ${referHelpLink}`,
    helpLink: aadHelpLink,
};
exports.UpdatePermissionError = {
    name: "AadUpdatePermissionError",
    message: () => `Failed to update application permission in Azure Active Directory.`,
};
exports.AppIdUriInvalidError = {
    name: "AadAppIdUriInvalid",
    message: () => "Invalid Application ID URI. Provision your application before continuing.",
};
exports.InvalidSelectedPluginsError = {
    name: "InvalidSelectedPlugins",
    message: (message) => `Invalid selected plugins. ${message}`,
};
exports.ParsePermissionError = {
    name: "ParsePermissionError",
    message: () => "Failed to parse permission request.",
    helpLink: aadHelpLink,
};
exports.UnhandledError = {
    name: "UnhandledError",
    message: () => "Unhandled Error. ",
};
exports.UnknownPermissionName = {
    name: "UnknownPermissionName",
    message: (name) => `Failed to find resource: ${name}. ${referHelpLink}`,
    helpLink: aadHelpLink,
};
exports.UnknownPermissionRole = {
    name: "UnknownPermissionRole",
    message: (roleName, resourceName) => `Failed to find role "${roleName}" for resource "${resourceName}". ${referHelpLink}`,
    helpLink: aadHelpLink,
};
exports.UnknownPermissionScope = {
    name: "UnknownPermissionScope",
    message: (scopeName, resourceName) => `Failed to find scope "${scopeName}" for resource "${resourceName}". ${referHelpLink}`,
    helpLink: aadHelpLink,
};
exports.GetTokenError = {
    name: "GetTokenError",
    message: (audience) => `Failed to get user login information for ${audience}.`,
};
exports.TenantNotExistError = {
    name: "TenantNotExistError",
    message: () => "Failed to get tenant information from user login.",
};
exports.GetConfigError = {
    name: "GetConfigError",
    message: (message) => message,
};
exports.MissingPermissionsRequestProvider = {
    name: "MissingPermissionsRequestProvider",
    message: () => "permissionRequestProvider is missing in plugin context",
};
exports.CheckPermissionError = {
    name: "CheckPermissionError",
    message: () => "Failed to check permission.",
};
exports.GrantPermissionError = {
    name: "CheckPermissionError",
    message: (resource, id) => `${resource}: ${id}. Failed to grant permission.`,
};
exports.ListCollaboratorError = {
    name: "ListCollaboratorError",
    message: () => "Failed to list collaborator.",
};
class ConfigErrorMessages {
}
exports.ConfigErrorMessages = ConfigErrorMessages;
ConfigErrorMessages.GetDisplayNameError = "Failed to get display name.";
ConfigErrorMessages.GetConfigError = (configName, plugin) => `Failed to get configuration value "${configName}" for ${plugin}.`;
ConfigErrorMessages.FormatError = (type, value) => `Invalid format for ${type}. Value: ${value}.`;
class AppStudioErrorMessage {
}
exports.AppStudioErrorMessage = AppStudioErrorMessage;
AppStudioErrorMessage.CreateFailed = "Failed to create an application registration in Azure Active Directory.";
AppStudioErrorMessage.UpdateFailed = "Failed to update application registration in Azure Active Directory.";
AppStudioErrorMessage.CreateSecretFailed = "Failed to create an application secret in Azure Active Directory.";
AppStudioErrorMessage.GetFailed = "Failed to retrieve Azure Active Directory application registration.";
AppStudioErrorMessage.AppDefinitionIsNull = "Missing application definition.";
AppStudioErrorMessage.AppObjectIdIsNull = "Missing Object ID.";
AppStudioErrorMessage.EmptyResponse = "Missing response.";
AppStudioErrorMessage.ReachRetryLimit = "Exceeded retry limit.";
class GraphClientErrorMessage {
}
exports.GraphClientErrorMessage = GraphClientErrorMessage;
GraphClientErrorMessage.CreateFailed = "Failed to create an application registration in Azure Active Directory.";
GraphClientErrorMessage.UpdateFailed = "Failed to update application registration in Azure Active Directory.";
GraphClientErrorMessage.CreateSecretFailed = "Failed to create an application secret in Azure Active Directory.";
GraphClientErrorMessage.GetFailed = "Failed to retrieve Azure Active Directory application registration.";
GraphClientErrorMessage.CheckPermissionFailed = "Failed to check permission in Azure Active Directory.";
GraphClientErrorMessage.GrantPermissionFailed = "Failed to grant permission in Azure Active Directory.";
GraphClientErrorMessage.AppDefinitionIsNull = "Missing application definition.";
GraphClientErrorMessage.AppObjectIdIsNull = "Missing Object ID.";
GraphClientErrorMessage.EmptyResponse = "Missing response.";
GraphClientErrorMessage.UserObjectIdIsNull = "Missing User's Object ID.";
//# sourceMappingURL=errors.js.map