"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckGrantPermissionConfig = exports.UpdatePermissionConfig = exports.PostProvisionConfig = exports.SetApplicationInContextConfig = exports.ProvisionConfig = exports.ConfigUtils = void 0;
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const format_1 = require("./format");
const common_1 = require("./common");
const results_1 = require("../results");
const uuid_1 = require("uuid");
const common_2 = require("../../../../common");
const localSettingsConstants_1 = require("../../../../common/localSettingsConstants");
class ConfigUtils {
    static getAadConfig(ctx, key, isLocalDebug = false) {
        var _a, _b, _c, _d, _e;
        if (isLocalDebug) {
            if (common_2.isMultiEnvEnabled()) {
                return (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.get(key);
            }
            else {
                return (_c = ctx.config) === null || _c === void 0 ? void 0 : _c.get(common_1.Utils.addLocalDebugPrefix(true, key));
            }
        }
        else {
            if (common_2.isMultiEnvEnabled()) {
                return (_d = ctx.envInfo.state.get(constants_1.Plugins.pluginNameComplex)) === null || _d === void 0 ? void 0 : _d.get(key);
            }
            else {
                return (_e = ctx.config) === null || _e === void 0 ? void 0 : _e.get(key);
            }
        }
    }
    static getLocalDebugConfigOfOtherPlugins(ctx, key) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const isMultiEnvEnable = common_2.isMultiEnvEnabled();
        switch (key) {
            case constants_1.ConfigKeysOfOtherPlugin.localDebugTabDomain:
                return isMultiEnvEnable
                    ? (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.frontend) === null || _b === void 0 ? void 0 : _b.get(localSettingsConstants_1.LocalSettingsFrontendKeys.TabDomain)
                    : (_c = ctx.envInfo.state.get(constants_1.Plugins.localDebug)) === null || _c === void 0 ? void 0 : _c.get(key);
            case constants_1.ConfigKeysOfOtherPlugin.localDebugTabEndpoint:
                return isMultiEnvEnable
                    ? (_e = (_d = ctx.localSettings) === null || _d === void 0 ? void 0 : _d.frontend) === null || _e === void 0 ? void 0 : _e.get(localSettingsConstants_1.LocalSettingsFrontendKeys.TabEndpoint)
                    : (_f = ctx.envInfo.state.get(constants_1.Plugins.localDebug)) === null || _f === void 0 ? void 0 : _f.get(key);
            case constants_1.ConfigKeysOfOtherPlugin.localDebugBotEndpoint:
                return isMultiEnvEnable
                    ? (_h = (_g = ctx.localSettings) === null || _g === void 0 ? void 0 : _g.bot) === null || _h === void 0 ? void 0 : _h.get(localSettingsConstants_1.LocalSettingsBotKeys.BotEndpoint)
                    : (_j = ctx.envInfo.state.get(constants_1.Plugins.localDebug)) === null || _j === void 0 ? void 0 : _j.get(key);
            case constants_1.ConfigKeysOfOtherPlugin.teamsBotIdLocal:
                return isMultiEnvEnable
                    ? (_l = (_k = ctx.localSettings) === null || _k === void 0 ? void 0 : _k.bot) === null || _l === void 0 ? void 0 : _l.get(localSettingsConstants_1.LocalSettingsBotKeys.BotId)
                    : (_m = ctx.envInfo.state.get(constants_1.Plugins.teamsBot)) === null || _m === void 0 ? void 0 : _m.get(key);
            default:
                return undefined;
        }
    }
    static checkAndSaveConfig(ctx, key, value, isLocalDebug = false) {
        var _a, _b, _c;
        if (!value) {
            return;
        }
        if (common_2.isMultiEnvEnabled()) {
            if (isLocalDebug) {
                (_b = (_a = ctx.localSettings) === null || _a === void 0 ? void 0 : _a.auth) === null || _b === void 0 ? void 0 : _b.set(key, value);
            }
            else {
                (_c = ctx.envInfo.state.get(constants_1.Plugins.pluginNameComplex)) === null || _c === void 0 ? void 0 : _c.set(key, value);
            }
        }
        else {
            ctx.config.set(common_1.Utils.addLocalDebugPrefix(isLocalDebug, key), value);
        }
    }
    static async getPermissionRequest(ctx) {
        if (ctx.permissionRequestProvider === undefined) {
            throw results_1.ResultFactory.SystemError(errors_1.MissingPermissionsRequestProvider.name, errors_1.MissingPermissionsRequestProvider.message());
        }
        const permissionRequestResult = await ctx.permissionRequestProvider.getPermissionRequest();
        if (permissionRequestResult.isOk()) {
            return permissionRequestResult.value;
        }
        else {
            throw permissionRequestResult.error;
        }
    }
}
exports.ConfigUtils = ConfigUtils;
class ProvisionConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
        this.oauth2PermissionScopeId = uuid_1.v4();
    }
    async restoreConfigFromContext(ctx) {
        const displayName = ctx.projectSettings.appName;
        if (displayName) {
            this.displayName = displayName.substr(0, constants_1.Constants.aadAppMaxLength);
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetDisplayNameError));
        }
        this.permissionRequest = await ConfigUtils.getPermissionRequest(ctx);
        const objectId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, this.isLocalDebug);
        if (objectId) {
            this.objectId = objectId;
        }
        const clientSecret = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientSecret, this.isLocalDebug);
        if (clientSecret) {
            this.password = clientSecret;
        }
    }
    saveConfigIntoContext(ctx, tenantId) {
        const oauthAuthority = ProvisionConfig.getOauthAuthority(tenantId);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientId, this.clientId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientSecret, this.password, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.objectId, this.objectId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, this.oauth2PermissionScopeId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.tenantId, tenantId, this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauthHost, constants_1.Constants.oauthAuthorityPrefix, common_2.isMultiEnvEnabled() && this.isLocalDebug);
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauthAuthority, oauthAuthority, common_2.isMultiEnvEnabled() && this.isLocalDebug);
    }
    static getOauthAuthority(tenantId) {
        return `${constants_1.Constants.oauthAuthorityPrefix}/${tenantId}`;
    }
}
exports.ProvisionConfig = ProvisionConfig;
class SetApplicationInContextConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
    }
    restoreConfigFromContext(ctx) {
        var _a, _b;
        let frontendDomain;
        if (this.isLocalDebug) {
            frontendDomain = ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.localDebugTabDomain);
        }
        else {
            frontendDomain = ctx.config.get(constants_1.ConfigKeys.domain);
            if (!frontendDomain) {
                frontendDomain = (_a = ctx.envInfo.state
                    .get(constants_1.Plugins.frontendHosting)) === null || _a === void 0 ? void 0 : _a.get(constants_1.ConfigKeysOfOtherPlugin.frontendHostingDomain);
            }
        }
        if (frontendDomain) {
            this.frontendDomain = format_1.format(frontendDomain, format_1.Formats.Domain);
        }
        const botId = this.isLocalDebug
            ? ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.teamsBotIdLocal)
            : (_b = ctx.envInfo.state.get(constants_1.Plugins.teamsBot)) === null || _b === void 0 ? void 0 : _b.get(constants_1.ConfigKeysOfOtherPlugin.teamsBotId);
        if (botId) {
            this.botId = format_1.format(botId, format_1.Formats.UUID);
        }
        const clientId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientId, this.isLocalDebug);
        if (clientId) {
            this.clientId = clientId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.clientId, constants_1.Plugins.pluginName)));
        }
    }
    saveConfigIntoContext(ctx) {
        ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.applicationIdUri, this.applicationIdUri, this.isLocalDebug);
    }
}
exports.SetApplicationInContextConfig = SetApplicationInContextConfig;
class PostProvisionConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
    }
    async restoreConfigFromContext(ctx) {
        var _a, _b;
        let frontendEndpoint;
        if (this.isLocalDebug) {
            frontendEndpoint = ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.localDebugTabEndpoint);
        }
        else {
            frontendEndpoint = ctx.config.get(constants_1.ConfigKeys.endpoint);
            if (!frontendEndpoint) {
                frontendEndpoint = (_a = ctx.envInfo.state
                    .get(constants_1.Plugins.frontendHosting)) === null || _a === void 0 ? void 0 : _a.get(constants_1.ConfigKeysOfOtherPlugin.frontendHostingEndpoint);
            }
        }
        if (frontendEndpoint) {
            this.frontendEndpoint = format_1.format(frontendEndpoint, format_1.Formats.Endpoint);
        }
        const botEndpoint = this.isLocalDebug
            ? ConfigUtils.getLocalDebugConfigOfOtherPlugins(ctx, constants_1.ConfigKeysOfOtherPlugin.localDebugBotEndpoint)
            : (_b = ctx.envInfo.state.get(constants_1.Plugins.teamsBot)) === null || _b === void 0 ? void 0 : _b.get(constants_1.ConfigKeysOfOtherPlugin.teamsBotEndpoint);
        if (botEndpoint) {
            this.botEndpoint = format_1.format(botEndpoint, format_1.Formats.Endpoint);
        }
        const objectId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, this.isLocalDebug);
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)));
        }
        const applicationIdUri = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.applicationIdUri, this.isLocalDebug);
        if (applicationIdUri) {
            this.applicationIdUri = applicationIdUri;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.applicationIdUri, constants_1.Plugins.pluginName)));
        }
    }
}
exports.PostProvisionConfig = PostProvisionConfig;
class UpdatePermissionConfig {
    constructor(isLocalDebug = false) {
        this.isLocalDebug = isLocalDebug;
    }
    async restoreConfigFromContext(ctx) {
        const objectId = ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, this.isLocalDebug);
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)));
        }
        this.permissionRequest = await ConfigUtils.getPermissionRequest(ctx);
    }
}
exports.UpdatePermissionConfig = UpdatePermissionConfig;
class CheckGrantPermissionConfig {
    constructor(isGrantPermission = false) {
        this.isGrantPermission = isGrantPermission;
    }
    async restoreConfigFromContext(ctx) {
        var _a;
        const objectId = (_a = ctx.config) === null || _a === void 0 ? void 0 : _a.get(constants_1.ConfigKeys.objectId);
        if (objectId) {
            this.objectId = objectId;
        }
        else {
            throw results_1.ResultFactory.SystemError(errors_1.GetConfigError.name, common_1.Utils.getPermissionErrorMessage(errors_1.GetConfigError.message(errors_1.ConfigErrorMessages.GetConfigError(constants_1.ConfigKeys.objectId, constants_1.Plugins.pluginName)), this.isGrantPermission));
        }
    }
}
exports.CheckGrantPermissionConfig = CheckGrantPermissionConfig;
//# sourceMappingURL=configs.js.map