"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const __1 = require("../../../..");
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const results_1 = require("../results");
const configs_1 = require("./configs");
const telemetry_1 = require("./telemetry");
class Utils {
    static addLogAndTelemetryWithLocalDebug(logProvider, message, messageLocal, isLocalDebug = false, properties) {
        if (!isLocalDebug) {
            logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(message.log);
            telemetry_1.TelemetryUtils.sendSuccessEvent(message.telemetry, properties);
        }
        else {
            logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(messageLocal.log);
            telemetry_1.TelemetryUtils.sendSuccessEvent(messageLocal.telemetry, properties);
        }
    }
    static addLogAndTelemetry(logProvider, message) {
        logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(message.log);
        telemetry_1.TelemetryUtils.sendSuccessEvent(message.telemetry);
    }
    static addLocalDebugPrefix(isLocalDebug, key) {
        return isLocalDebug ? constants_1.Constants.localDebugPrefix + key : key;
    }
    static getPermissionErrorMessage(message, isGrantPermission = false, objectId) {
        return isGrantPermission
            ? `${constants_1.Constants.permissions.name}: ${objectId}. Error: ${message}`
            : message;
    }
    static getConfigFileName(ctx, isLocalDebug) {
        if (__1.isMultiEnvEnabled()) {
            if (isLocalDebug) {
                return constants_1.ConfigFilePath.LocalSettings;
            }
            else {
                return constants_1.ConfigFilePath.State(ctx.envInfo.envName);
            }
        }
        else {
            return constants_1.ConfigFilePath.Default;
        }
    }
    static getInputFileName(ctx) {
        return __1.isMultiEnvEnabled() ? constants_1.ConfigFilePath.Input(ctx.envInfo.envName) : constants_1.ConfigFilePath.Default;
    }
    static async getCurrentTenantId(ctx) {
        var _a;
        const tokenObject = await ((_a = ctx.graphTokenProvider) === null || _a === void 0 ? void 0 : _a.getJsonObject());
        const tenantId = tokenObject.tid;
        return tenantId;
    }
    static skipAADProvision(ctx, isLocalDebug = false) {
        var _a, _b, _c, _d;
        if (!__1.isMultiEnvEnabled()) {
            const skip = ctx.config.get(constants_1.ConfigKeys.skip);
            return skip;
        }
        const objectId = isLocalDebug
            ? configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.objectId, true)
            : (_a = ctx.envInfo.config.auth) === null || _a === void 0 ? void 0 : _a.objectId;
        const clientId = isLocalDebug
            ? configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientId, true)
            : (_b = ctx.envInfo.config.auth) === null || _b === void 0 ? void 0 : _b.clientId;
        const oauth2PermissionScopeId = isLocalDebug
            ? configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, true)
            : (_c = ctx.envInfo.config.auth) === null || _c === void 0 ? void 0 : _c.accessAsUserScopeId;
        const clientSecret = isLocalDebug
            ? configs_1.ConfigUtils.getAadConfig(ctx, constants_1.ConfigKeys.clientSecret, true)
            : (_d = ctx.envInfo.config.auth) === null || _d === void 0 ? void 0 : _d.clientSecret;
        if (objectId && clientId && oauth2PermissionScopeId && clientSecret) {
            if (!isLocalDebug) {
                configs_1.ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.objectId, objectId);
                configs_1.ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientId, clientId);
                configs_1.ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.clientSecret, clientSecret);
                configs_1.ConfigUtils.checkAndSaveConfig(ctx, constants_1.ConfigKeys.oauth2PermissionScopeId, oauth2PermissionScopeId);
            }
            return true;
        }
        else if (objectId || clientId || oauth2PermissionScopeId || clientSecret) {
            throw results_1.ResultFactory.UserError(errors_1.GetSkipAppConfigError.name, errors_1.GetSkipAppConfigError.message(Utils.getInputFileName(ctx)));
        }
        else {
            return false;
        }
    }
}
exports.Utils = Utils;
//# sourceMappingURL=common.js.map