"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.format = exports.Formats = void 0;
const uuid_1 = require("uuid");
const errors_1 = require("../errors");
var Formats;
(function (Formats) {
    Formats["Endpoint"] = " endpoint";
    Formats["Domain"] = "domain";
    Formats["UUID"] = "uuid";
})(Formats = exports.Formats || (exports.Formats = {}));
function format(value, type) {
    if (!value) {
        return undefined;
    }
    if (type == Formats.Endpoint) {
        return formatEndpoint(value);
    }
    else if (type == Formats.Domain) {
        return formatDomain(value);
    }
    else if (type == Formats.UUID) {
        return formatUUID(value);
    }
    return undefined;
}
exports.format = format;
function formatEndpoint(endpoint) {
    endpoint = endpoint.replace(/\s/g, "");
    try {
        const url = new URL(endpoint);
        endpoint = url.href;
        if (endpoint.endsWith("/")) {
            endpoint = endpoint.slice(0, -1);
        }
        return endpoint;
    }
    catch (_a) {
        throw new Error(errors_1.ConfigErrorMessages.FormatError(Formats.Endpoint, endpoint));
    }
}
function formatDomain(domain) {
    domain = domain.replace(/\s/g, "");
    try {
        const url = new URL("https://" + domain);
        domain = url.host;
        return domain;
    }
    catch (_a) {
        throw new Error(errors_1.ConfigErrorMessages.FormatError(Formats.Domain, domain));
    }
}
function formatUUID(uuid) {
    if (uuid_1.validate(uuid)) {
        return uuid;
    }
    else {
        throw new Error(errors_1.ConfigErrorMessages.FormatError(Formats.UUID, uuid));
    }
}
//# sourceMappingURL=format.js.map