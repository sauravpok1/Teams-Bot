"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadAppClient = void 0;
const appStudio_1 = require("./appStudio");
const constants_1 = require("./constants");
const errorCodes_1 = require("./errorCodes");
const errors_1 = require("./errors");
const graph_1 = require("./graph");
const results_1 = require("./results");
const common_1 = require("./utils/common");
const configs_1 = require("./utils/configs");
const dialog_1 = require("./utils/dialog");
const telemetry_1 = require("./utils/telemetry");
const tokenProvider_1 = require("./utils/tokenProvider");
const tools_1 = require("../../../common/tools");
function delay(ms) {
    // tslint:disable-next-line no-string-based-set-timeout
    return new Promise((resolve) => setTimeout(resolve, ms));
}
class AadAppClient {
    static async createAadApp(ctx, stage, config) {
        try {
            const provisionObject = AadAppClient.getAadAppProvisionObject(config.displayName, config.oauth2PermissionScopeId);
            let provisionAadResponse;
            if (tokenProvider_1.TokenProvider.audience === tokenProvider_1.TokenAudience.AppStudio) {
                provisionAadResponse = (await this.retryHanlder(ctx, stage, () => appStudio_1.AppStudio.createAADAppV2(tokenProvider_1.TokenProvider.token, provisionObject)));
            }
            else {
                provisionAadResponse = (await this.retryHanlder(ctx, stage, () => graph_1.GraphClient.createAADApp(tokenProvider_1.TokenProvider.token, provisionObject)));
            }
            config.clientId = provisionAadResponse.appId;
            config.objectId = provisionAadResponse.id;
        }
        catch (error) {
            throw AadAppClient.handleError(error, errors_1.CreateAppError);
        }
    }
    static async createAadAppSecret(ctx, stage, config) {
        try {
            let createSecretObject;
            if (tokenProvider_1.TokenProvider.audience === tokenProvider_1.TokenAudience.AppStudio) {
                createSecretObject = (await AadAppClient.retryHanlder(ctx, stage, () => appStudio_1.AppStudio.createAADAppPassword(tokenProvider_1.TokenProvider.token, config.objectId)));
            }
            else {
                createSecretObject = (await AadAppClient.retryHanlder(ctx, stage, () => graph_1.GraphClient.createAadAppSecret(tokenProvider_1.TokenProvider.token, config.objectId)));
            }
            config.password = createSecretObject.value;
        }
        catch (error) {
            throw AadAppClient.handleError(error, errors_1.CreateSecretError);
        }
    }
    static async updateAadAppRedirectUri(ctx, stage, objectId, redirectUris, skip = false) {
        var _a;
        try {
            const updateRedirectUriObject = AadAppClient.getAadUrlObject(redirectUris);
            if (tokenProvider_1.TokenProvider.audience === tokenProvider_1.TokenAudience.AppStudio) {
                await AadAppClient.retryHanlder(ctx, stage, () => appStudio_1.AppStudio.updateAADApp(tokenProvider_1.TokenProvider.token, objectId, updateRedirectUriObject));
            }
            else {
                await AadAppClient.retryHanlder(ctx, stage, () => graph_1.GraphClient.updateAADApp(tokenProvider_1.TokenProvider.token, objectId, updateRedirectUriObject));
            }
        }
        catch (error) {
            if (skip) {
                const message = constants_1.Messages.StepFailedAndSkipped(constants_1.ProgressDetail.UpdateRedirectUri, constants_1.Messages.UpdateRedirectUriHelpMessage(redirectUris.join(", ")));
                (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.warning(constants_1.Messages.getLog(message));
                dialog_1.DialogUtils.show(message, constants_1.UILevels.Warn);
            }
            else {
                throw AadAppClient.handleError(error, errors_1.UpdateRedirectUriError);
            }
        }
    }
    static async updateAadAppIdUri(ctx, stage, objectId, applicationIdUri, skip = false) {
        var _a;
        try {
            const updateAppIdObject = AadAppClient.getAadApplicationIdObject(applicationIdUri);
            if (tokenProvider_1.TokenProvider.audience === tokenProvider_1.TokenAudience.AppStudio) {
                await AadAppClient.retryHanlder(ctx, stage, () => appStudio_1.AppStudio.updateAADApp(tokenProvider_1.TokenProvider.token, objectId, updateAppIdObject));
            }
            else {
                await AadAppClient.retryHanlder(ctx, stage, () => graph_1.GraphClient.updateAADApp(tokenProvider_1.TokenProvider.token, objectId, updateAppIdObject));
            }
        }
        catch (error) {
            if (skip) {
                const message = constants_1.Messages.StepFailedAndSkipped(constants_1.ProgressDetail.UpdateAppIdUri, constants_1.Messages.UpdateAppIdUriHelpMessage(applicationIdUri));
                (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.warning(constants_1.Messages.getLog(message));
                dialog_1.DialogUtils.show(message, constants_1.UILevels.Warn);
            }
            else {
                throw AadAppClient.handleError(error, errors_1.UpdateAppIdUriError);
            }
        }
    }
    static async updateAadAppPermission(ctx, stage, objectId, permissions, skip = false) {
        var _a;
        try {
            const updatePermissionObject = AadAppClient.getAadPermissionObject(permissions);
            if (tokenProvider_1.TokenProvider.audience === tokenProvider_1.TokenAudience.AppStudio) {
                await AadAppClient.retryHanlder(ctx, stage, () => appStudio_1.AppStudio.updateAADApp(tokenProvider_1.TokenProvider.token, objectId, updatePermissionObject));
            }
            else {
                await AadAppClient.retryHanlder(ctx, stage, () => graph_1.GraphClient.updateAADApp(tokenProvider_1.TokenProvider.token, objectId, updatePermissionObject));
            }
        }
        catch (error) {
            if (skip) {
                const message = constants_1.Messages.StepFailedAndSkipped(constants_1.ProgressDetail.UpdatePermission, constants_1.Messages.UpdatePermissionHelpMessage);
                (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.warning(constants_1.Messages.getLog(message));
                dialog_1.DialogUtils.show(message, constants_1.UILevels.Warn);
            }
            else {
                throw AadAppClient.handleError(error, errors_1.UpdatePermissionError);
            }
        }
    }
    static async getAadApp(ctx, stage, objectId, islocalDebug, clientSecret, skip = false) {
        var _a, _b, _c, _d;
        let getAppObject;
        try {
            if (tokenProvider_1.TokenProvider.audience === tokenProvider_1.TokenAudience.AppStudio) {
                getAppObject = (await this.retryHanlder(ctx, stage, () => appStudio_1.AppStudio.getAadApp(tokenProvider_1.TokenProvider.token, objectId)));
            }
            else {
                getAppObject = (await this.retryHanlder(ctx, stage, () => graph_1.GraphClient.getAadApp(tokenProvider_1.TokenProvider.token, objectId)));
            }
        }
        catch (error) {
            const tenantId = await common_1.Utils.getCurrentTenantId(ctx);
            const fileName = common_1.Utils.getConfigFileName(ctx, islocalDebug);
            throw AadAppClient.handleError(error, errors_1.GetAppError, objectId, tenantId, fileName);
        }
        const config = new configs_1.ProvisionConfig(islocalDebug);
        if (((_a = getAppObject.api) === null || _a === void 0 ? void 0 : _a.oauth2PermissionScopes) &&
            ((_b = getAppObject.api) === null || _b === void 0 ? void 0 : _b.oauth2PermissionScopes[0]) &&
            ((_c = getAppObject.api) === null || _c === void 0 ? void 0 : _c.oauth2PermissionScopes[0].id)) {
            config.oauth2PermissionScopeId = (_d = getAppObject.api) === null || _d === void 0 ? void 0 : _d.oauth2PermissionScopes[0].id;
        }
        else {
            const fileName = common_1.Utils.getConfigFileName(ctx, islocalDebug);
            throw results_1.ResultFactory.UserError(errors_1.GetAppConfigError.name, errors_1.GetAppConfigError.message(constants_1.ConfigKeys.oauth2PermissionScopeId, fileName));
        }
        config.objectId = objectId;
        config.clientId = getAppObject.appId;
        config.password = clientSecret;
        return config;
    }
    static async checkPermission(ctx, stage, objectId, userObjectId) {
        try {
            return (await this.retryHanlder(ctx, stage, () => graph_1.GraphClient.checkPermission(tokenProvider_1.TokenProvider.token, objectId, userObjectId)));
        }
        catch (error) {
            // TODO: Give out detailed help message for different errors.
            throw AadAppClient.handleError(error, errors_1.CheckPermissionError);
        }
    }
    static async grantPermission(ctx, stage, objectId, userObjectId) {
        var _a, _b, _c;
        try {
            await graph_1.GraphClient.grantPermission(tokenProvider_1.TokenProvider.token, objectId, userObjectId);
        }
        catch (error) {
            if (((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error.message) == constants_1.Constants.createOwnerDuplicatedMessage) {
                (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(constants_1.Messages.OwnerAlreadyAdded(userObjectId, objectId));
                return;
            }
            // TODO: Give out detailed help message for different errors.
            throw AadAppClient.handleError(error, errors_1.GrantPermissionError, constants_1.Constants.permissions.name, objectId);
        }
    }
    static async listCollaborator(ctx, stage, objectId) {
        try {
            return await this.retryHanlder(ctx, stage, () => graph_1.GraphClient.getAadOwners(tokenProvider_1.TokenProvider.token, objectId));
        }
        catch (error) {
            // TODO: Give out detailed help message for different errors.
            throw AadAppClient.handleError(error, errors_1.ListCollaboratorError);
        }
    }
    static async retryHanlder(ctx, stage, fn) {
        let retries = constants_1.Constants.maxRetryTimes;
        let response;
        telemetry_1.TelemetryUtils.init(ctx);
        while (retries > 0) {
            retries = retries - 1;
            try {
                response = await fn();
                telemetry_1.TelemetryUtils.sendEvent(stage, {
                    [constants_1.Telemetry.methodName]: fn.toString(),
                    [constants_1.Telemetry.retryTimes]: (constants_1.Constants.maxRetryTimes - retries - 1).toString(),
                });
                return response;
            }
            catch (error) {
                if (retries === 0) {
                    throw error;
                }
                else {
                    await delay(5000);
                }
            }
        }
        throw new Error(errors_1.AppStudioErrorMessage.ReachRetryLimit);
    }
    static getAadAppProvisionObject(displayName, oauth2PermissionScopeId) {
        return {
            displayName: displayName,
            signInAudience: "AzureADMyOrg",
            api: {
                requestedAccessTokenVersion: 2,
                oauth2PermissionScopes: [
                    {
                        adminConsentDescription: "Allows Teams to call the app’s web APIs as the current user.",
                        adminConsentDisplayName: "Teams can access app’s web APIs",
                        id: oauth2PermissionScopeId,
                        isEnabled: true,
                        type: "User",
                        userConsentDescription: "Enable Teams to call this app’s web APIs with the same rights that you have",
                        userConsentDisplayName: "Teams can access app’s web APIs and make requests on your behalf",
                        value: "access_as_user",
                    },
                ],
                preAuthorizedApplications: tools_1.getAllowedAppIds().map((appId) => {
                    return {
                        appId,
                        delegatedPermissionIds: [oauth2PermissionScopeId],
                    };
                }),
            },
            optionalClaims: {
                accessToken: [
                    {
                        name: "idtyp",
                        essential: false,
                        additionalProperties: [],
                    },
                ],
            },
        };
    }
    static handleError(error, errorDetail, ...args) {
        var _a, _b, _c, _d, _e;
        if (((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) >= constants_1.Constants.statusCodeUserError &&
            ((_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.status) < constants_1.Constants.statusCodeServerError) {
            // User Error
            // If known error code, will update help link.
            const errorCode = (_e = (_d = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.code;
            const helpLink = errorCodes_1.GraphErrorCodes.get(errorCode);
            return results_1.ResultFactory.UserError(errorDetail.name, errorDetail.message(...args), error, undefined, helpLink !== null && helpLink !== void 0 ? helpLink : errorDetail.helpLink);
        }
        else {
            // System Error
            return results_1.ResultFactory.SystemError(errorDetail.name, errorDetail.message(...args), error);
        }
    }
    static getAadUrlObject(redirectUris) {
        return {
            web: {
                redirectUris: redirectUris,
            },
        };
    }
    static getAadApplicationIdObject(applicationIdUri) {
        return {
            identifierUris: [applicationIdUri],
        };
    }
    static getAadPermissionObject(permissions) {
        return {
            requiredResourceAccess: permissions,
        };
    }
}
exports.AadAppClient = AadAppClient;
//# sourceMappingURL=aadAppClient.js.map