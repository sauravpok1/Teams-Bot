"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorMessage = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("./constants");
class ErrorMessage {
}
exports.ErrorMessage = ErrorMessage;
ErrorMessage.GetDetail = "Get the detailed error message in output.";
ErrorMessage.LinkHelpMessage = (link) => `You can follow ${link} to handle it.`;
ErrorMessage.SqlInputError = {
    name: "SqlInputError",
    message: () => "SQL admin name or password is empty",
};
ErrorMessage.SqlAskInputError = {
    name: "SqlAskInputError",
    message: () => "Failed to get answer for SQL questions",
};
ErrorMessage.SqlEndpointError = {
    name: "SqlEndpointError",
    message: (sqlName) => `SQL Server '${sqlName}' is invalid.`,
};
ErrorMessage.SqlCreateError = {
    name: "SqlCreateError",
    message: (sqlName, detail = "") => `Failed to create SQL Server '${sqlName}'. ${detail}`,
};
ErrorMessage.DatabaseCreateError = {
    name: "SqlDBCreateError",
    message: (databaseName, detail = "") => `Failed to create database '${databaseName}'. ${detail}`,
};
ErrorMessage.DatabaseUserCreateError = {
    name: "DatabaseUserCreateError",
    message: (sqlName, database, user) => `Failed to create user '${user}' in database '${sqlName}.${database}'`,
};
ErrorMessage.SqlAddAdminError = {
    name: "SqlAddAdminError",
    message: (account, detail = "") => `Failed to add AAD admin '${account}'. ${detail}`,
};
ErrorMessage.SqlAzureFirwallError = {
    name: "SqlAzureFirwallError",
    message: (sqlName, detail = "") => `Failed to add Azure Firewall for '${sqlName}'. ${detail}`,
};
ErrorMessage.SqlLocalFirwallError = {
    name: "SqlLocalFirwallError",
    message: (sqlName, detail = "") => `Failed to add local firewall for '${sqlName}'. ${detail}`,
};
ErrorMessage.SqlDeleteLocalFirwallError = {
    name: "SqlDeleteLocalFirwallError",
    message: (sqlName, detail = "") => `Failed to delete local firewall for '${sqlName}'. Delete '${constants_1.Constants.firewall.localRule}' manually. ${detail}`,
};
ErrorMessage.SqlUserInfoError = {
    name: "SqlUserInfoError",
    message: () => "Failed to get login user info.",
};
ErrorMessage.SqlGetConfigError = {
    name: "SqlGetConfigError",
    message: (pluginId, configKey) => `Failed to get config value of '${configKey}' from '${pluginId}'.`,
};
ErrorMessage.SqlInvalidConfigError = {
    name: "SqlInvalidConfigError",
    message: (configKey, reason) => `The config value of '${configKey}' is invalid for ${reason}.`,
};
ErrorMessage.SqlCheckError = {
    name: "SqlCheckError",
    message: (sqlName, detail = "") => `Failed to check SQL Server '${sqlName}'. ${detail}`,
};
ErrorMessage.SqlCheckDBError = {
    name: "SqlCheckDBError",
    message: (databaseName, detail = "") => `Failed to check database '${databaseName}'. ${detail}`,
};
ErrorMessage.SqlCheckAdminError = {
    name: "SqlCheckAdminError",
    message: (identity, detail = "") => `Failed to check AAD admin '${identity}'. ${detail}`,
};
ErrorMessage.SqlCheckDBUserError = {
    name: "SqlCheckDBUserError",
    message: (user, detail = "") => `Failed to check database user '${user}'. ${detail}`,
};
ErrorMessage.SqlAccessError = {
    name: "SqlAccessError",
    message: (sqlName, detail = "") => `Failed to access server '${sqlName}'. ${detail}`,
};
ErrorMessage.UnhandledError = {
    name: "UnhandledError",
    message: () => "Unhandled Error",
};
ErrorMessage.IdentityCredentialUndefine = (user, databaseName) => `Cannot access database to add managed identity user ${user}. Please add the user for database ${databaseName} manually`;
ErrorMessage.ServicePrincipalWarning = (user, databaseName) => `service principal admin in azure sql can't add database user <${user}>. You can add the user for ${databaseName} manually`;
ErrorMessage.DomainCode = "AADSTS53000";
ErrorMessage.DomainError = `Conditional Access policy requires a compliant device, and the device is not compliant. ${ErrorMessage.GetDetail}`;
ErrorMessage.GuestAdminMessage = "Server identity does not have Azure Active Directory Readers permission";
ErrorMessage.FirewallErrorReg = /Client with IP address .*? is not allowed to access the server./g;
ErrorMessage.GuestAdminError = `SQL admin does not have enough permission to add database user. ${ErrorMessage.GetDetail}`;
ErrorMessage.AccessMessage = "is not allowed to access the server";
//# sourceMappingURL=errors.js.map