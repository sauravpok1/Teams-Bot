"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlPluginImpl = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const managementClient_1 = require("./managementClient");
const errors_1 = require("./errors");
const results_1 = require("./results");
const dialogUtils_1 = require("./utils/dialogUtils");
const config_1 = require("./config");
const sqlClient_1 = require("./sqlClient");
const contextUtils_1 = require("./utils/contextUtils");
const commonUtils_1 = require("./utils/commonUtils");
const constants_1 = require("./constants");
const message_1 = require("./utils/message");
const telemetryUtils_1 = require("./utils/telemetryUtils");
const questions_1 = require("./questions");
const arm_resources_1 = require("@azure/arm-resources");
const path_1 = tslib_1.__importDefault(require("path"));
const folder_1 = require("../../../folder");
const constants_2 = require("../../../common/constants");
const fs = tslib_1.__importStar(require("fs-extra"));
const common_1 = require("../../../common");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../solution/fx-solution/v2/adaptor");
const tools_1 = require("../../../common/tools");
class SqlPluginImpl {
    constructor() {
        this.config = new config_1.SqlConfig();
    }
    async loadConfig(ctx) {
        this.loadConfigSubscription(ctx);
        this.loadConfigResourceGroup(ctx);
        this.config.resourceNameSuffix = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.solutionConfigKey.resourceNameSuffix);
        this.config.location = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.solutionConfigKey.location);
        this.config.tenantId = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.solutionConfigKey.tenantId);
        this.loadConfigSql(ctx);
    }
    async getQuestions(stage, ctx) {
        var _a;
        if (stage === teamsfx_api_1.Stage.provision && ((_a = ctx.answers) === null || _a === void 0 ? void 0 : _a.platform) === teamsfx_api_1.Platform.CLI_HELP) {
            const sqlNode = this.buildQuestionNode();
            return teamsfx_api_1.ok(sqlNode);
        }
        return teamsfx_api_1.ok(undefined);
    }
    async preProvision(ctx) {
        var _a, _b;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(message_1.Message.startPreProvision);
        await this.loadConfig(ctx);
        dialogUtils_1.DialogUtils.init(ctx);
        telemetryUtils_1.TelemetryUtils.init(ctx);
        telemetryUtils_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.preProvision + constants_1.Telemetry.startSuffix);
        await this.loadSkipAddingUser(ctx);
        await this.checkSqlExisting(ctx);
        if (!this.config.existSql) {
            await this.askInputs(ctx);
            this.config.admin = ctx.answers[constants_1.Constants.questionKey.adminName];
            this.config.adminPassword = ctx.answers[constants_1.Constants.questionKey.adminPassword];
            if (!this.config.admin || !this.config.adminPassword) {
                throw results_1.SqlResultFactory.SystemError(errors_1.ErrorMessage.SqlInputError.name, errors_1.ErrorMessage.SqlInputError.message());
            }
            ctx.config.set(constants_1.Constants.admin, this.config.admin);
            ctx.config.set(constants_1.Constants.adminPassword, this.config.adminPassword);
        }
        await this.parseLoginToken(ctx);
        if (common_1.isArmSupportEnabled()) {
            this.setContext(ctx);
        }
        telemetryUtils_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.preProvision, true);
        (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.info(message_1.Message.endPreProvision);
        return teamsfx_api_1.ok(undefined);
    }
    async provision(ctx) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(message_1.Message.startProvision);
        dialogUtils_1.DialogUtils.init(ctx, dialogUtils_1.ProgressTitle.Provision, Object.keys(dialogUtils_1.ProvisionMessage).length);
        telemetryUtils_1.TelemetryUtils.init(ctx);
        telemetryUtils_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.provision + constants_1.Telemetry.startSuffix);
        const managementClient = await managementClient_1.ManagementClient.create(ctx, this.config);
        await ((_b = dialogUtils_1.DialogUtils.progressBar) === null || _b === void 0 ? void 0 : _b.start());
        await ((_c = dialogUtils_1.DialogUtils.progressBar) === null || _c === void 0 ? void 0 : _c.next(dialogUtils_1.ProvisionMessage.checkProvider));
        if (!this.config.existSql) {
            try {
                (_d = ctx.logProvider) === null || _d === void 0 ? void 0 : _d.info(message_1.Message.checkProvider);
                const credentials = await ctx.azureAccountProvider.getAccountCredentialAsync();
                const resourceManagementClient = new arm_resources_1.Providers(new arm_resources_1.ResourceManagementClientContext(credentials, this.config.azureSubscriptionId));
                await resourceManagementClient.register(constants_1.Constants.resourceProvider);
            }
            catch (error) {
                (_e = ctx.logProvider) === null || _e === void 0 ? void 0 : _e.info(message_1.Message.registerResourceProviderFailed(error === null || error === void 0 ? void 0 : error.message));
            }
        }
        else {
            (_f = ctx.logProvider) === null || _f === void 0 ? void 0 : _f.info(message_1.Message.skipCheckProvider);
        }
        await ((_g = dialogUtils_1.DialogUtils.progressBar) === null || _g === void 0 ? void 0 : _g.next(dialogUtils_1.ProvisionMessage.provisionSQL));
        if (!this.config.existSql) {
            (_h = ctx.logProvider) === null || _h === void 0 ? void 0 : _h.info(message_1.Message.provisionSql);
            await managementClient.createAzureSQL();
        }
        else {
            (_j = ctx.logProvider) === null || _j === void 0 ? void 0 : _j.info(message_1.Message.skipProvisionSql);
        }
        await ((_k = dialogUtils_1.DialogUtils.progressBar) === null || _k === void 0 ? void 0 : _k.next(dialogUtils_1.ProvisionMessage.provisionDatabase));
        let existDatabase = false;
        if (this.config.existSql) {
            (_l = ctx.logProvider) === null || _l === void 0 ? void 0 : _l.info(message_1.Message.checkDatabase);
            existDatabase = await managementClient.existDatabase();
        }
        if (!existDatabase) {
            (_m = ctx.logProvider) === null || _m === void 0 ? void 0 : _m.info(message_1.Message.provisionDatabase);
            await managementClient.createDatabase();
        }
        else {
            (_o = ctx.logProvider) === null || _o === void 0 ? void 0 : _o.info(message_1.Message.skipProvisionDatabase);
        }
        ctx.config.set(constants_1.Constants.sqlEndpoint, this.config.sqlEndpoint);
        ctx.config.set(constants_1.Constants.databaseName, this.config.databaseName);
        telemetryUtils_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.provision, true);
        (_p = ctx.logProvider) === null || _p === void 0 ? void 0 : _p.info(message_1.Message.endProvision);
        await ((_q = dialogUtils_1.DialogUtils.progressBar) === null || _q === void 0 ? void 0 : _q.end(true));
        return teamsfx_api_1.ok(undefined);
    }
    async postProvision(ctx) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(message_1.Message.startPostProvision);
        await this.loadConfig(ctx);
        dialogUtils_1.DialogUtils.init(ctx, dialogUtils_1.ProgressTitle.PostProvision, Object.keys(dialogUtils_1.ConfigureMessage).length);
        telemetryUtils_1.TelemetryUtils.init(ctx);
        telemetryUtils_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.postProvision + constants_1.Telemetry.startSuffix, undefined, {
            [constants_1.Telemetry.properties.skipAddingUser]: this.config.skipAddingUser
                ? constants_1.Telemetry.valueYes
                : constants_1.Telemetry.valueNo,
        });
        if (common_1.isArmSupportEnabled()) {
            this.config.sqlServer = this.config.sqlEndpoint.split(".")[0];
            this.config.resourceGroup = common_1.getResourceGroupNameFromResourceId(this.config.sqlResourceId);
            this.config.azureSubscriptionId = common_1.getSubscriptionIdFromResourceId(this.config.sqlResourceId);
        }
        ctx.config.delete(constants_1.Constants.adminPassword);
        const managementClient = await managementClient_1.ManagementClient.create(ctx, this.config);
        (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.info(message_1.Message.addFirewall);
        await this.AddFireWallRules(managementClient);
        await ((_c = dialogUtils_1.DialogUtils.progressBar) === null || _c === void 0 ? void 0 : _c.start());
        await ((_d = dialogUtils_1.DialogUtils.progressBar) === null || _d === void 0 ? void 0 : _d.next(dialogUtils_1.ConfigureMessage.postProvisionAddAadmin));
        await this.CheckAndSetAadAdmin(ctx, managementClient);
        this.getIdentity(ctx);
        if (!this.config.skipAddingUser) {
            await ((_e = dialogUtils_1.DialogUtils.progressBar) === null || _e === void 0 ? void 0 : _e.next(dialogUtils_1.ConfigureMessage.postProvisionAddUser));
            // azure sql does not support service principal admin to add databse user currently, so just notice developer if so.
            if (this.config.aadAdminType === commonUtils_1.UserType.User) {
                (_f = ctx.logProvider) === null || _f === void 0 ? void 0 : _f.info(message_1.Message.connectDatabase);
                const sqlClient = await sqlClient_1.SqlClient.create(ctx, this.config);
                (_g = ctx.logProvider) === null || _g === void 0 ? void 0 : _g.info(message_1.Message.addDatabaseUser(this.config.identity));
                await this.addDatabaseUser(ctx, sqlClient, managementClient);
            }
            else {
                const message = errors_1.ErrorMessage.ServicePrincipalWarning(this.config.identity, this.config.databaseName);
                (_h = ctx.logProvider) === null || _h === void 0 ? void 0 : _h.warning(`[${constants_1.Constants.pluginName}] ${message}. You can follow ${constants_1.HelpLinks.default} to add database user ${this.config.identity}`);
            }
        }
        else {
            (_j = ctx.logProvider) === null || _j === void 0 ? void 0 : _j.warning(`[${constants_1.Constants.pluginName}] Skip adding database user. You can follow ${constants_1.HelpLinks.default} to add database user ${this.config.identity}`);
        }
        await managementClient.deleteLocalFirewallRule();
        telemetryUtils_1.TelemetryUtils.sendEvent(constants_1.Telemetry.stage.postProvision, true, {
            [constants_1.Telemetry.properties.skipAddingUser]: this.config.skipAddingUser
                ? constants_1.Telemetry.valueYes
                : constants_1.Telemetry.valueNo,
        });
        (_k = ctx.logProvider) === null || _k === void 0 ? void 0 : _k.info(message_1.Message.endPostProvision);
        await ((_l = dialogUtils_1.DialogUtils.progressBar) === null || _l === void 0 ? void 0 : _l.end(true));
        return teamsfx_api_1.ok(undefined);
    }
    async updateArmTemplates(ctx) {
        const result = {
            Reference: {
                sqlResourceId: constants_1.AzureSqlBicep.sqlResourceId,
                sqlEndpoint: constants_1.AzureSqlBicep.sqlEndpoint,
                databaseName: constants_1.AzureSqlBicep.databaseName,
            },
        };
        return teamsfx_api_1.ok(result);
    }
    async addDatabaseUser(ctx, sqlClient, managementClient) {
        var _a;
        let retryCount = 0;
        while (true) {
            try {
                await sqlClient.addDatabaseUser();
                return;
            }
            catch (error) {
                if (!sqlClient_1.SqlClient.isFireWallError(error === null || error === void 0 ? void 0 : error.innerError) ||
                    retryCount >= constants_1.Constants.maxRetryTimes) {
                    throw error;
                }
                else {
                    retryCount++;
                    (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.warning(`[${constants_1.Constants.pluginName}] Retry adding new firewall rule to access azure sql, because the local IP address has changed after added firewall rule for it. [Retry time: ${retryCount}]`);
                    await managementClient.addLocalFirewallRule();
                }
            }
        }
    }
    async generateArmTemplates(ctx) {
        const azureSolutionSettings = ctx.projectSettings.solutionSettings;
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(azureSolutionSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDirectory = path_1.default.join(folder_1.getTemplatesFolder(), "plugins", "resource", "sql", "bicep");
        const provisionOrchestration = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDirectory, constants_1.AzureSqlBicepFile.moduleTemplateFileName), pluginCtx);
        const provisionModules = await tools_1.generateBicepFromFile(path_1.default.join(bicepTemplateDirectory, constants_1.AzureSqlBicepFile.ProvisionModuleTemplateFileName), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { azureSql: provisionModules },
            },
            Parameters: JSON.parse(await fs.readFile(path_1.default.join(bicepTemplateDirectory, constants_2.Bicep.ParameterFileName), constants_2.ConstantString.UTF8Encoding)),
            Reference: {
                sqlResourceId: constants_1.AzureSqlBicep.sqlResourceId,
                sqlEndpoint: constants_1.AzureSqlBicep.sqlEndpoint,
                databaseName: constants_1.AzureSqlBicep.databaseName,
            },
        };
        return teamsfx_api_1.ok(result);
    }
    setContext(ctx) {
        ctx.config.set(constants_1.Constants.admin, this.config.admin);
        ctx.config.set(constants_1.Constants.adminPassword, this.config.adminPassword);
    }
    buildQuestionNode() {
        const sqlNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        sqlNode.addChild(new teamsfx_api_1.QTreeNode(questions_1.adminNameQuestion));
        sqlNode.addChild(new teamsfx_api_1.QTreeNode(questions_1.adminPasswordQuestion));
        sqlNode.addChild(new teamsfx_api_1.QTreeNode(questions_1.confirmPasswordQuestion));
        return sqlNode;
    }
    async AddFireWallRules(client) {
        await client.addLocalFirewallRule();
        if (!common_1.isArmSupportEnabled()) {
            await client.addAzureFirewallRule();
        }
    }
    async CheckAndSetAadAdmin(ctx, client) {
        var _a, _b, _c;
        let existAdmin = false;
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(message_1.Message.checkAadAdmin);
        existAdmin = await client.existAadAdmin();
        if (!existAdmin) {
            (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.info(message_1.Message.addSqlAadAdmin);
            await client.addAADadmin();
        }
        else {
            (_c = ctx.logProvider) === null || _c === void 0 ? void 0 : _c.info(message_1.Message.skipAddAadAdmin);
        }
    }
    getIdentity(ctx) {
        const identityConfig = ctx.envInfo.state.get(constants_1.Constants.identityPlugin);
        this.config.identity = identityConfig.get(constants_1.Constants.identityName);
        if (!this.config.identity) {
            const error = results_1.SqlResultFactory.SystemError(errors_1.ErrorMessage.SqlGetConfigError.name, errors_1.ErrorMessage.SqlGetConfigError.message(constants_1.Constants.identityPlugin, constants_1.Constants.identityName));
            throw error;
        }
    }
    async loadSkipAddingUser(ctx) {
        var _a, _b;
        const skipAddingUser = (_a = ctx.envInfo.config) === null || _a === void 0 ? void 0 : _a[constants_1.Constants.skipAddingSqlUser];
        if (skipAddingUser === undefined) {
            this.config.skipAddingUser = (await ((_b = ctx.azureAccountProvider) === null || _b === void 0 ? void 0 : _b.getIdentityCredentialAsync()))
                ? false
                : true;
        }
        else {
            this.config.skipAddingUser = skipAddingUser;
        }
    }
    async checkSqlExisting(ctx) {
        const managementClient = await managementClient_1.ManagementClient.create(ctx, this.config);
        if (common_1.isArmSupportEnabled()) {
            this.config.admin = ctx.config.get(constants_1.Constants.admin);
            this.config.adminPassword = ctx.config.get(constants_1.Constants.adminPassword);
            this.config.sqlEndpoint = ctx.config.get(constants_1.Constants.sqlEndpoint);
            if (this.config.sqlEndpoint && this.config.azureSubscriptionId) {
                this.config.existSql = await managementClient.existAzureSQL();
            }
        }
        else {
            this.config.existSql = await managementClient.existAzureSQL();
        }
    }
    async askInputs(ctx) {
        const node = this.buildQuestionNode();
        const res = await teamsfx_api_1.traverse(node, ctx.answers, ctx.ui);
        if (res.isErr()) {
            throw results_1.SqlResultFactory.UserError(errors_1.ErrorMessage.SqlAskInputError.name, errors_1.ErrorMessage.SqlAskInputError.message(), res.error);
        }
    }
    async parseLoginToken(ctx) {
        var _a;
        // get login user info to set aad admin in sql
        try {
            const credential = await ctx.azureAccountProvider.getAccountCredentialAsync();
            const token = await credential.getToken();
            const accessToken = token.accessToken;
            const tokenInfo = commonUtils_1.parseToken(accessToken);
            this.config.aadAdmin = tokenInfo.name;
            this.config.aadAdminObjectId = tokenInfo.objectId;
            this.config.aadAdminType = tokenInfo.userType;
            (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.debug(message_1.Message.adminName(tokenInfo.name));
        }
        catch (error) {
            throw results_1.SqlResultFactory.SystemError(errors_1.ErrorMessage.SqlUserInfoError.name, errors_1.ErrorMessage.SqlUserInfoError.message(), error);
        }
    }
    loadConfigResourceGroup(ctx) {
        if (common_1.isArmSupportEnabled()) {
            this.config.sqlResourceId = ctx.config.get(constants_1.Constants.sqlResourceId);
            if (this.config.sqlResourceId) {
                try {
                    this.config.resourceGroup = common_1.getResourceGroupNameFromResourceId(this.config.sqlResourceId);
                }
                catch (error) {
                    throw results_1.SqlResultFactory.UserError(errors_1.ErrorMessage.SqlInvalidConfigError.name, errors_1.ErrorMessage.SqlInvalidConfigError.message(this.config.sqlResourceId, error.message), error);
                }
            }
        }
        else {
            this.config.resourceGroup = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.solutionConfigKey.resourceGroupName);
        }
    }
    loadConfigSubscription(ctx) {
        if (common_1.isArmSupportEnabled()) {
            this.config.sqlResourceId = ctx.config.get(constants_1.Constants.sqlResourceId);
            if (this.config.sqlResourceId) {
                try {
                    this.config.azureSubscriptionId = common_1.getSubscriptionIdFromResourceId(this.config.sqlResourceId);
                }
                catch (error) {
                    throw results_1.SqlResultFactory.UserError(errors_1.ErrorMessage.SqlInvalidConfigError.name, errors_1.ErrorMessage.SqlInvalidConfigError.message(this.config.sqlResourceId, error.message), error);
                }
            }
        }
        else {
            this.config.azureSubscriptionId = contextUtils_1.ContextUtils.getConfig(ctx, constants_1.Constants.solution, constants_1.Constants.solutionConfigKey.subscriptionId);
        }
    }
    loadConfigSql(ctx) {
        if (common_1.isArmSupportEnabled()) {
            this.config.sqlEndpoint = ctx.config.get(constants_1.Constants.sqlEndpoint);
            this.config.databaseName = ctx.config.get(constants_1.Constants.databaseName);
            if (this.config.sqlEndpoint) {
                this.config.sqlServer = this.config.sqlEndpoint.split(".")[0];
            }
        }
        else {
            let defaultEndpoint = `${ctx.projectSettings.appName}-sql-${this.config.resourceNameSuffix}`;
            defaultEndpoint = commonUtils_1.formatEndpoint(defaultEndpoint);
            this.config.sqlServer = defaultEndpoint;
            this.config.sqlEndpoint = `${this.config.sqlServer}.database.windows.net`;
            const defaultDatabase = `${ctx.projectSettings.appName}-db-${this.config.resourceNameSuffix}`;
            this.config.databaseName = defaultDatabase;
        }
    }
}
exports.SqlPluginImpl = SqlPluginImpl;
//# sourceMappingURL=plugin.js.map