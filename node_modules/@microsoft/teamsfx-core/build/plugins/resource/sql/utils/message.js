"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("../constants");
class Message {
}
exports.Message = Message;
Message.startPreProvision = `[${constants_1.Constants.pluginName}] start preProvision`;
Message.startProvision = `[${constants_1.Constants.pluginName}] start provision`;
Message.startPostProvision = `[${constants_1.Constants.pluginName}] start postProvision`;
Message.startGetQuestions = `[${constants_1.Constants.pluginName}] start getQuestions`;
Message.endPreProvision = `[${constants_1.Constants.pluginName}] end preProvision`;
Message.endProvision = `[${constants_1.Constants.pluginName}] end provision`;
Message.endPostProvision = `[${constants_1.Constants.pluginName}] end postProvision`;
Message.endGetQuestions = `[${constants_1.Constants.pluginName}] end getQuestions`;
Message.checkProvider = `[${constants_1.Constants.pluginName}] check SQL resource provider`;
Message.provisionSql = `[${constants_1.Constants.pluginName}] provision SQL`;
Message.provisionDatabase = `[${constants_1.Constants.pluginName}] provision database`;
Message.checkSql = `[${constants_1.Constants.pluginName}] check SQL server`;
Message.checkDatabase = `[${constants_1.Constants.pluginName}] check database`;
Message.checkAadAdmin = `[${constants_1.Constants.pluginName}] check aad admin`;
Message.checkDatabaseUser = `[${constants_1.Constants.pluginName}] check database user`;
Message.connectDatabase = `[${constants_1.Constants.pluginName}] connect database`;
Message.skipCheckProvider = `[${constants_1.Constants.pluginName}] skip checking SQL resource provider`;
Message.skipProvisionSql = `[${constants_1.Constants.pluginName}] skip provisioning existing SQL`;
Message.skipProvisionDatabase = `[${constants_1.Constants.pluginName}] skip provisioning existing database`;
Message.skipAddAadAdmin = `[${constants_1.Constants.pluginName}] skip adding existing aad admin`;
Message.skipAddUser = `[${constants_1.Constants.pluginName}] skip adding user`;
Message.addFirewall = `[${constants_1.Constants.pluginName}] add firewall`;
Message.addSqlAadAdmin = `[${constants_1.Constants.pluginName}] add SQL aad admin`;
Message.addTable = `[${constants_1.Constants.pluginName}] add table`;
Message.registerResourceProviderFailed = (message) => `[${constants_1.Constants.pluginName}] Failed to register SQL resource provider. Reason: ${message}.`;
Message.addDatabaseUser = (name) => `[${constants_1.Constants.pluginName}] add database user ${name}`;
Message.adminName = (name) => `[${constants_1.Constants.pluginName}] AAD admin name is ${name}`;
Message.endpoint = (endpoint) => `[${constants_1.Constants.pluginName}] SQL endpoint is ${endpoint}`;
Message.inputCheck = {
    sqlUserNameEmpty: "SQL admin user name cannot be empty",
    sqlUserNameContainsSqlIdentifier: "SQL admin user name cannot contain a SQL Identifier or a typical system name (like admin, administrator, sa, root, dbmanager, loginmanager, etc.) or a built-in database user or role (like dbo, guest, public, etc.)",
    sqlUserNameContainsNonAlphanumeric: "SQL admin user name cannot include non-alphanumeric characters",
    sqlUserNameStartWithNumber: "SQL admin user name cannot start with a number",
    sqlPasswordEmpty: "SQL admin password cannot be empty",
    sqlPasswordLengthLessThan8: "SQL admin password must be at least 8 characters in length",
    sqlPasswordLengthGreatThan128: "SQL admin password must be no more than 128 characters in length",
    sqlPasswordMustContain3Categories: "Your password must contain characters from three of the following categories â€“ English uppercase letters, English lowercase letters, numbers (0-9), and non-alphanumeric characters (!, $, #, %, etc.)",
    sqlPasswordCannotContainUserName: "Your password cannot contain part or all of the user name",
    sqlPasswordMustMatch: "Password and password confirmation must match",
};
//# sourceMappingURL=message.js.map