"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlPlugin = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const __1 = require("../../..");
const question_1 = require("../../solution/fx-solution/question");
const ResourcePluginContainer_1 = require("../../solution/fx-solution/ResourcePluginContainer");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const plugin_1 = require("./plugin");
const results_1 = require("./results");
const dialogUtils_1 = require("./utils/dialogUtils");
const telemetryUtils_1 = require("./utils/telemetryUtils");
require("./v2");
let SqlPlugin = class SqlPlugin {
    constructor() {
        this.name = "fx-resource-azure-sql";
        this.displayName = "Azure SQL Database";
        this.sqlImpl = new plugin_1.SqlPluginImpl();
    }
    activate(solutionSettings) {
        const azureResources = solutionSettings.azureResources || [];
        const cap = solutionSettings.capabilities || [];
        return (solutionSettings.hostType === question_1.HostTypeOptionAzure.id &&
            cap.includes(question_1.TabOptionItem.id) &&
            azureResources.includes(question_1.AzureResourceSQL.id));
    }
    async preProvision(ctx) {
        return this.runWithSqlError(constants_1.Telemetry.stage.preProvision, () => this.sqlImpl.preProvision(ctx), ctx);
    }
    async provision(ctx) {
        if (!__1.isArmSupportEnabled()) {
            return this.runWithSqlError(constants_1.Telemetry.stage.provision, () => this.sqlImpl.provision(ctx), ctx);
        }
        else {
            return teamsfx_api_1.ok(undefined);
        }
    }
    async postProvision(ctx) {
        return this.runWithSqlError(constants_1.Telemetry.stage.postProvision, () => this.sqlImpl.postProvision(ctx), ctx);
    }
    async updateArmTemplates(ctx) {
        return this.runWithSqlError(constants_1.Telemetry.stage.generateArmTemplates, () => this.sqlImpl.updateArmTemplates(ctx), ctx);
    }
    async generateArmTemplates(ctx) {
        return this.runWithSqlError(constants_1.Telemetry.stage.generateArmTemplates, () => this.sqlImpl.generateArmTemplates(ctx), ctx);
    }
    async getQuestions(stage, ctx) {
        return this.runWithSqlError(constants_1.Telemetry.stage.getQuestion, () => this.sqlImpl.getQuestions(stage, ctx), ctx);
    }
    async runWithSqlError(stage, fn, ctx) {
        var _a, _b;
        try {
            return await fn();
        }
        catch (e) {
            await ((_a = dialogUtils_1.DialogUtils.progressBar) === null || _a === void 0 ? void 0 : _a.end(false));
            if (!(e instanceof Error || e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError)) {
                e = new Error(e.toString());
            }
            if (!(e instanceof teamsfx_api_1.SystemError) && !(e instanceof teamsfx_api_1.UserError)) {
                (_b = ctx.logProvider) === null || _b === void 0 ? void 0 : _b.error(e.message);
            }
            let res;
            if (e instanceof teamsfx_api_1.SystemError || e instanceof teamsfx_api_1.UserError) {
                res = teamsfx_api_1.err(e);
            }
            else {
                res = teamsfx_api_1.err(results_1.SqlResultFactory.SystemError(errors_1.ErrorMessage.UnhandledError.name, errors_1.ErrorMessage.UnhandledError.message(), e));
            }
            const errorCode = res.error.source + "." + res.error.name;
            const errorType = res.error instanceof teamsfx_api_1.SystemError ? constants_1.Telemetry.systemError : constants_1.Telemetry.userError;
            telemetryUtils_1.TelemetryUtils.init(ctx);
            let errorMessage = res.error.message;
            if (res.error.innerError) {
                errorMessage += ` Detailed error: ${e.innerError.message}.`;
            }
            telemetryUtils_1.TelemetryUtils.sendErrorEvent(stage, errorCode, errorType, errorMessage);
            return res;
        }
    }
};
SqlPlugin = tslib_1.__decorate([
    typedi_1.Service(ResourcePluginContainer_1.ResourcePlugins.SqlPlugin)
], SqlPlugin);
exports.SqlPlugin = SqlPlugin;
exports.default = new SqlPlugin();
//# sourceMappingURL=index.js.map