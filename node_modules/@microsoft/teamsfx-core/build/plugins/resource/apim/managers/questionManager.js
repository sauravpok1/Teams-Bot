"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliQuestionManager = exports.VscQuestionManager = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const error_1 = require("../error");
const tools_1 = require("../../../../common/tools");
class VscQuestionManager {
    constructor(apimServiceQuestion, openApiDocumentQuestion, apiPrefixQuestion, apiVersionQuestion, newApiVersionQuestion, existingOpenApiDocumentFunc) {
        this.apimServiceQuestion = apimServiceQuestion;
        this.openApiDocumentQuestion = openApiDocumentQuestion;
        this.apiPrefixQuestion = apiPrefixQuestion;
        this.apiVersionQuestion = apiVersionQuestion;
        this.newApiVersionQuestion = newApiVersionQuestion;
        this.existingOpenApiDocumentFunc = existingOpenApiDocumentFunc;
    }
    async callFunc(func, ctx) {
        throw error_1.BuildError(error_1.NotImplemented);
    }
    async addResource(ctx, apimConfig) {
        const rootNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        if (apimConfig.serviceName || tools_1.isArmSupportEnabled()) {
            return rootNode;
        }
        const question = this.apimServiceQuestion.getQuestion();
        const apimServiceNode = new teamsfx_api_1.QTreeNode(question);
        rootNode.addChild(apimServiceNode);
        return rootNode;
    }
    async deploy(ctx, apimConfig) {
        const rootNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        let documentNode;
        if (!apimConfig.apiDocumentPath) {
            const documentPathQuestion = this.openApiDocumentQuestion.getQuestion(ctx);
            documentNode = new teamsfx_api_1.QTreeNode(documentPathQuestion);
        }
        else {
            const documentPathFunc = this.existingOpenApiDocumentFunc.getQuestion(ctx);
            documentNode = new teamsfx_api_1.QTreeNode(documentPathFunc);
        }
        rootNode.addChild(documentNode);
        if (!apimConfig.apiPrefix) {
            const apiPrefixQuestion = this.apiPrefixQuestion.getQuestion();
            const apiPrefixQuestionNode = new teamsfx_api_1.QTreeNode(apiPrefixQuestion);
            documentNode.addChild(apiPrefixQuestionNode);
        }
        const versionQuestion = this.apiVersionQuestion.getQuestion(ctx);
        const versionQuestionNode = new teamsfx_api_1.QTreeNode(versionQuestion);
        documentNode.addChild(versionQuestionNode);
        const newVersionQuestion = this.newApiVersionQuestion.getQuestion();
        const newVersionQuestionNode = new teamsfx_api_1.QTreeNode(newVersionQuestion);
        newVersionQuestionNode.condition = this.newApiVersionQuestion.condition();
        versionQuestionNode.addChild(newVersionQuestionNode);
        return rootNode;
    }
}
exports.VscQuestionManager = VscQuestionManager;
class CliQuestionManager {
    constructor(apimServiceNameQuestion, apimResourceGroupQuestion, openApiDocumentQuestion, apiPrefixQuestion, apiVersionQuestion) {
        this.apimServiceNameQuestion = apimServiceNameQuestion;
        this.apimResourceGroupQuestion = apimResourceGroupQuestion;
        this.openApiDocumentQuestion = openApiDocumentQuestion;
        this.apiPrefixQuestion = apiPrefixQuestion;
        this.apiVersionQuestion = apiVersionQuestion;
    }
    async callFunc(func, ctx) {
        throw error_1.BuildError(error_1.NotImplemented);
    }
    async addResource(ctx) {
        const rootNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        const apimResourceGroupQuestion = this.apimResourceGroupQuestion.getQuestion();
        rootNode.addChild(new teamsfx_api_1.QTreeNode(apimResourceGroupQuestion));
        const apimServiceNameQuestion = this.apimServiceNameQuestion.getQuestion();
        rootNode.addChild(new teamsfx_api_1.QTreeNode(apimServiceNameQuestion));
        return rootNode;
    }
    async deploy() {
        const rootNode = new teamsfx_api_1.QTreeNode({
            type: "group",
        });
        const openApiDocumentQuestion = this.openApiDocumentQuestion.getQuestion();
        rootNode.addChild(new teamsfx_api_1.QTreeNode(openApiDocumentQuestion));
        const apiPrefixQuestion = this.apiPrefixQuestion.getQuestion();
        rootNode.addChild(new teamsfx_api_1.QTreeNode(apiPrefixQuestion));
        const apiVersionQuestion = this.apiVersionQuestion.getQuestion();
        rootNode.addChild(new teamsfx_api_1.QTreeNode(apiVersionQuestion));
        return rootNode;
    }
}
exports.CliQuestionManager = CliQuestionManager;
//# sourceMappingURL=questionManager.js.map