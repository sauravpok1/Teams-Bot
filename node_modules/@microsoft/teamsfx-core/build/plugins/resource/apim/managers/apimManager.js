"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimManager = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("../constants");
const error_1 = require("../error");
const config_1 = require("../config");
const commonUtils_1 = require("../utils/commonUtils");
const namingRules_1 = require("../utils/namingRules");
const path_1 = tslib_1.__importDefault(require("path"));
const constants_2 = require("../../../../common/constants");
const fs = tslib_1.__importStar(require("fs-extra"));
const tools_1 = require("../../../../common/tools");
const folder_1 = require("../../../../folder");
const ResourcePluginContainer_1 = require("../../../solution/fx-solution/ResourcePluginContainer");
const adaptor_1 = require("../../../solution/fx-solution/v2/adaptor");
const tools_2 = require("../../../../common/tools");
class ApimManager {
    constructor(lazyApimService, openApiProcessor, telemetryReporter, logger) {
        this.lazyApimService = lazyApimService;
        this.openApiProcessor = openApiProcessor;
        this.logger = logger;
        this.telemetryReporter = telemetryReporter;
    }
    async provision(apimConfig, solutionConfig, appName) {
        var _a, _b, _c;
        const apimService = await this.lazyApimService.getValue();
        const currentUserId = await apimService.getUserId();
        if (tools_1.isArmSupportEnabled()) {
            const apimServiceResource = apimConfig.serviceResourceId
                ? await apimService.getService(tools_1.getResourceGroupNameFromResourceId(apimConfig.serviceResourceId), commonUtils_1.getApimServiceNameFromResourceId(apimConfig.serviceResourceId))
                : undefined;
            apimConfig.publisherEmail = (apimServiceResource === null || apimServiceResource === void 0 ? void 0 : apimServiceResource.publisherEmail)
                ? apimServiceResource.publisherEmail
                : currentUserId;
            apimConfig.publisherName = (apimServiceResource === null || apimServiceResource === void 0 ? void 0 : apimServiceResource.publisherName)
                ? apimServiceResource.publisherName
                : currentUserId;
        }
        else {
            await apimService.ensureResourceProvider();
            const resourceGroupName = (_a = apimConfig.resourceGroupName) !== null && _a !== void 0 ? _a : solutionConfig.resourceGroupName;
            const apimServiceName = (_b = apimConfig.serviceName) !== null && _b !== void 0 ? _b : namingRules_1.NamingRules.apimServiceName.sanitize(appName, solutionConfig.resourceNameSuffix);
            await apimService.createService(resourceGroupName, apimServiceName, solutionConfig.location, currentUserId);
            apimConfig.serviceName = apimServiceName;
            const productId = (_c = apimConfig.productId) !== null && _c !== void 0 ? _c : namingRules_1.NamingRules.productId.sanitize(appName, solutionConfig.resourceNameSuffix);
            await apimService.createProduct(resourceGroupName, apimServiceName, productId);
            apimConfig.productId = productId;
        }
    }
    async postProvision(apimConfig, ctx, aadConfig, appName) {
        var _a, _b;
        if (!tools_1.isArmSupportEnabled()) {
            const solutionConfig = new config_1.SolutionConfig(ctx.envInfo);
            const apimService = await this.lazyApimService.getValue();
            const resourceGroupName = (_a = apimConfig.resourceGroupName) !== null && _a !== void 0 ? _a : solutionConfig.resourceGroupName;
            const apimServiceName = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.serviceName);
            const clientId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apimClientAADClientId);
            const clientSecret = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apimClientAADClientSecret);
            const oAuthServerId = (_b = apimConfig.oAuthServerId) !== null && _b !== void 0 ? _b : namingRules_1.NamingRules.oAuthServerId.sanitize(appName, solutionConfig.resourceNameSuffix);
            const scopeName = `${aadConfig.applicationIdUris}/${constants_1.ApimDefaultValues.enableScopeName}`;
            await apimService.createOrUpdateOAuthService(resourceGroupName, apimServiceName, oAuthServerId, solutionConfig.teamsAppTenantId, clientId, clientSecret, scopeName);
            apimConfig.oAuthServerId = oAuthServerId;
        }
    }
    async deploy(apimConfig, solutionConfig, functionConfig, answer, projectRootPath) {
        var _a, _b, _c, _d;
        const apimService = await this.lazyApimService.getValue();
        let resourceGroupName, apimServiceName, authServerId, productId;
        if (tools_1.isArmSupportEnabled()) {
            const apimServiceResourceId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.serviceResourceId);
            const apimProductResourceId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.productResourceId);
            const authServerResourceId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.authServerResourceId);
            resourceGroupName = tools_1.getResourceGroupNameFromResourceId(apimServiceResourceId);
            apimServiceName = commonUtils_1.getApimServiceNameFromResourceId(apimServiceResourceId);
            authServerId = commonUtils_1.getAuthServiceNameFromResourceId(authServerResourceId);
            productId = commonUtils_1.getproductNameFromResourceId(apimProductResourceId);
        }
        else {
            resourceGroupName = (_a = apimConfig.resourceGroupName) !== null && _a !== void 0 ? _a : solutionConfig.resourceGroupName;
            apimServiceName = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.serviceName);
            authServerId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.oAuthServerId);
            productId = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.productId);
        }
        const apiPrefix = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apiPrefix);
        const apiDocumentPath = apimConfig.checkAndGet(constants_1.ApimPluginConfigKeys.apiDocumentPath);
        const versionIdentity = error_1.AssertNotEmpty("versionAnswer.versionIdentity", answer.versionIdentity);
        const apiId = (_b = answer.apiId) !== null && _b !== void 0 ? _b : namingRules_1.NamingRules.apiId.sanitize(apiPrefix, versionIdentity, solutionConfig.resourceNameSuffix);
        const versionSetId = (_c = apimConfig.versionSetId) !== null && _c !== void 0 ? _c : namingRules_1.NamingRules.versionSetId.sanitize(apiPrefix, solutionConfig.resourceNameSuffix);
        const apiPath = (_d = apimConfig.apiPath) !== null && _d !== void 0 ? _d : namingRules_1.NamingRules.apiPath.sanitize(apiPrefix, solutionConfig.resourceNameSuffix);
        const openApiDocument = await this.openApiProcessor.loadOpenApiDocument(apiDocumentPath, projectRootPath);
        const spec = this.openApiProcessor.patchOpenApiDocument(openApiDocument.spec, openApiDocument.schemaVersion, functionConfig.functionEndpoint, constants_1.ApimDefaultValues.functionBasePath);
        const versionSetDisplayName = namingRules_1.NamingRules.versionSetDisplayName.sanitize(openApiDocument.spec.info.title);
        await apimService.createVersionSet(resourceGroupName, apimServiceName, versionSetId, versionSetDisplayName);
        apimConfig.versionSetId = versionSetId;
        await apimService.importApi(resourceGroupName, apimServiceName, apiId, apiPath, versionIdentity, versionSetId, authServerId, openApiDocument.schemaVersion, spec);
        apimConfig.apiPath = apiPath;
        await apimService.addApiToProduct(resourceGroupName, apimServiceName, productId, apiId);
    }
    async updateArmTemplates(ctx) {
        const azureSolutionSettings = ctx.projectSettings.solutionSettings;
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(azureSolutionSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.ApimPathInfo.BicepTemplateRelativeDir);
        const configModules = await tools_2.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.ApimPathInfo.ConfigurationModuleFileName), pluginCtx);
        const result = {
            Reference: {
                serviceResourceId: constants_1.ApimOutputBicepSnippet.ServiceResourceId,
            },
            Configuration: {
                Modules: { apim: configModules },
            },
        };
        return result;
    }
    async generateArmTemplates(ctx) {
        const azureSolutionSettings = ctx.projectSettings.solutionSettings;
        const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins(azureSolutionSettings).map((p) => new adaptor_1.NamedArmResourcePluginAdaptor(p));
        const pluginCtx = { plugins: plugins.map((obj) => obj.name) };
        const bicepTemplateDir = path_1.default.join(folder_1.getTemplatesFolder(), constants_1.ApimPathInfo.BicepTemplateRelativeDir);
        const provisionOrchestration = await tools_2.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ProvisionFileName), pluginCtx);
        const provisionModules = await tools_2.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.ApimPathInfo.ProvisionModuleFileName), pluginCtx);
        const configOrchestration = await tools_2.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ConfigFileName), pluginCtx);
        const configModules = await tools_2.generateBicepFromFile(path_1.default.join(bicepTemplateDir, constants_1.ApimPathInfo.ConfigurationModuleFileName), pluginCtx);
        const result = {
            Provision: {
                Orchestration: provisionOrchestration,
                Modules: { apim: provisionModules },
            },
            Configuration: {
                Orchestration: configOrchestration,
                Modules: { apim: configModules },
            },
            Reference: {
                serviceResourceId: constants_1.ApimOutputBicepSnippet.ServiceResourceId,
            },
            Parameters: JSON.parse(await fs.readFile(path_1.default.join(bicepTemplateDir, constants_2.Bicep.ParameterFileName), constants_2.ConstantString.UTF8Encoding)),
        };
        return result;
    }
}
exports.ApimManager = ApimManager;
//# sourceMappingURL=apimManager.js.map