import { EnvInfo, PluginConfig } from "@microsoft/teamsfx-api";
export interface IApimPluginConfig {
    resourceGroupName?: string | undefined;
    serviceName?: string | undefined;
    productId?: string | undefined;
    oAuthServerId?: string | undefined;
    apimClientAADObjectId?: string | undefined;
    apimClientAADClientId?: string | undefined;
    apimClientAADClientSecret?: string | undefined;
    apiPrefix?: string | undefined;
    versionSetId?: string | undefined;
    apiPath?: string | undefined;
    apiDocumentPath?: string | undefined;
    serviceResourceId?: string | undefined;
    productResourceId?: string | undefined;
    authServerResourceId?: string | undefined;
    publisherEmail?: string | undefined;
    publisherName?: string | undefined;
    checkAndGet(key: string): string;
}
export interface IFunctionPluginConfig {
    functionEndpoint: string;
}
export interface IAadPluginConfig {
    objectId: string;
    clientId: string;
    oauth2PermissionScopeId: string;
    applicationIdUris: string;
}
export interface ISolutionConfig {
    resourceNameSuffix: string;
    teamsAppTenantId: string;
    resourceGroupName: string;
    location: string;
    remoteTeamsAppId?: string | undefined;
    subscriptionId: string | undefined;
}
export declare class ApimPluginConfig implements IApimPluginConfig {
    private readonly config;
    private readonly envName;
    constructor(config: PluginConfig, envName: string);
    get resourceGroupName(): string | undefined;
    set resourceGroupName(value: string | undefined);
    get serviceName(): string | undefined;
    set serviceName(value: string | undefined);
    get productId(): string | undefined;
    set productId(value: string | undefined);
    get oAuthServerId(): string | undefined;
    set oAuthServerId(value: string | undefined);
    get apimClientAADObjectId(): string | undefined;
    set apimClientAADObjectId(value: string | undefined);
    get apimClientAADClientId(): string | undefined;
    set apimClientAADClientId(value: string | undefined);
    get apimClientAADClientSecret(): string | undefined;
    set apimClientAADClientSecret(value: string | undefined);
    get apiPrefix(): string | undefined;
    set apiPrefix(value: string | undefined);
    get versionSetId(): string | undefined;
    set versionSetId(value: string | undefined);
    get apiPath(): string | undefined;
    set apiPath(value: string | undefined);
    get apiDocumentPath(): string | undefined;
    set apiDocumentPath(value: string | undefined);
    get serviceResourceId(): string | undefined;
    set serviceResourceId(value: string | undefined);
    get productResourceId(): string | undefined;
    set productResourceId(value: string | undefined);
    get authServerResourceId(): string | undefined;
    set authServerResourceId(value: string | undefined);
    get publisherEmail(): string | undefined;
    set publisherEmail(value: string | undefined);
    get publisherName(): string | undefined;
    set publisherName(value: string | undefined);
    private getValue;
    private setValue;
    checkAndGet(key: string): string;
}
export declare class FunctionPluginConfig implements IFunctionPluginConfig {
    private readonly configOfOtherPlugins;
    private readonly envName;
    constructor(envInfo: EnvInfo);
    get functionEndpoint(): string;
    private checkAndGet;
}
export declare class AadPluginConfig implements IAadPluginConfig {
    private readonly configOfOtherPlugins;
    private readonly envName;
    constructor(envInfo: EnvInfo);
    get objectId(): string;
    get clientId(): string;
    get oauth2PermissionScopeId(): string;
    get applicationIdUris(): string;
    private checkAndGet;
}
export declare class SolutionConfig implements ISolutionConfig {
    private readonly configOfOtherPlugins;
    private readonly envName;
    constructor(envInfo: EnvInfo);
    get resourceNameSuffix(): string;
    get teamsAppTenantId(): string;
    get resourceGroupName(): string;
    get location(): string;
    get remoteTeamsAppId(): string | undefined;
    get subscriptionId(): string | undefined;
    private checkAndGet;
}
//# sourceMappingURL=config.d.ts.map