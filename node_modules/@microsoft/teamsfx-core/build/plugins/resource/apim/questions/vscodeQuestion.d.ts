import { LogProvider, SingleSelectQuestion, PluginContext, FuncQuestion, TextInputQuestion, TelemetryReporter, ValidationSchema } from "@microsoft/teamsfx-api";
import { ApimService } from "../services/apimService";
import { OpenApiProcessor } from "../utils/openApiProcessor";
import { BaseQuestionService, IQuestionService } from "./question";
import { Lazy } from "../utils/commonUtils";
export declare class ApimServiceQuestion extends BaseQuestionService implements IQuestionService {
    private readonly lazyApimService;
    constructor(lazyApimService: Lazy<ApimService>, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(): SingleSelectQuestion;
    private getDynamicOptions;
}
export declare class OpenApiDocumentQuestion extends BaseQuestionService implements IQuestionService {
    private readonly openApiProcessor;
    constructor(openApiProcessor: OpenApiProcessor, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(ctx: PluginContext): SingleSelectQuestion;
    private getDynamicOptions;
}
export declare class ExistingOpenApiDocumentFunc extends BaseQuestionService implements IQuestionService {
    private readonly openApiProcessor;
    constructor(openApiProcessor: OpenApiProcessor, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(ctx: PluginContext): FuncQuestion;
}
export declare class ApiPrefixQuestion extends BaseQuestionService implements IQuestionService {
    constructor(telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(): TextInputQuestion;
}
export declare class ApiVersionQuestion extends BaseQuestionService implements IQuestionService {
    private readonly lazyApimService;
    constructor(lazyApimService: Lazy<ApimService>, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getQuestion(ctx: PluginContext): SingleSelectQuestion;
    private getDynamicOptions;
}
export declare class NewApiVersionQuestion extends BaseQuestionService implements IQuestionService {
    constructor(telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    condition(): {
        target?: string;
    } & ValidationSchema;
    getQuestion(): TextInputQuestion;
}
//# sourceMappingURL=vscodeQuestion.d.ts.map