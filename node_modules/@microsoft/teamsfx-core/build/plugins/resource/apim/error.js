"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssertConfigNotEmpty = exports.AssertNotEmpty = exports.BuildError = exports.FailedToParseResourceIdError = exports.UnhandledError = exports.ShortenToEmpty = exports.InvalidPropertyType = exports.EmptyProperty = exports.InvalidApimServiceChoice = exports.InvalidAzureResourceId = exports.InvalidFunctionEndpoint = exports.NotImplemented = exports.InvalidCliOptionError = exports.AadOperationError = exports.ApimOperationError = exports.InvalidConfigValue = exports.NoPluginConfig = exports.EmptyConfigValue = exports.InvalidAadObjectId = exports.EmptyVersionInOpenApiDocument = exports.EmptyTitleInOpenApiDocument = exports.InvalidOpenApiDocument = exports.NoValidOpenApiDocument = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const common_1 = require("../../../common");
const constants_1 = require("./constants");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["User"] = 0] = "User";
    ErrorType[ErrorType["System"] = 1] = "System";
})(ErrorType || (ErrorType = {}));
// User error
exports.NoValidOpenApiDocument = {
    type: ErrorType.User,
    code: "NoValidOpenApiDocument",
    message: () => "No valid OpenApi document in the current workspace.",
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.InvalidOpenApiDocument = {
    type: ErrorType.User,
    code: "InvalidOpenApiDocument",
    message: (filePath) => `The file '${filePath}' is not a valid OpenApi document.`,
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.EmptyTitleInOpenApiDocument = {
    type: ErrorType.User,
    code: "EmptyTitleInOpenApiDocument",
    message: (filePath) => `The property 'title' cannot be empty in the OpenApi document '${filePath}'.`,
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.EmptyVersionInOpenApiDocument = {
    type: ErrorType.User,
    code: "EmptyVersionInOpenApiDocument",
    message: (filePath) => `The property 'version' cannot be empty in the OpenApi document '${filePath}'.`,
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.InvalidAadObjectId = {
    type: ErrorType.User,
    code: "InvalidAadObjectId",
    message: (objectId) => `The Azure Active Directory application with object id '${objectId}' could not be found.`,
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.EmptyConfigValue = {
    type: ErrorType.User,
    code: "EmptyConfigValue",
    message: (component, name, filePath, retryOperation) => `Project configuration '${name}' of '${component}' is missing in '${filePath}'. Retry ${retryOperation} or set the value manually.`,
};
exports.NoPluginConfig = {
    type: ErrorType.User,
    code: "NoPluginConfig",
    message: (component, retryOperation) => `Cannot found ${component} configuration. Retry ${retryOperation}.`,
};
exports.InvalidConfigValue = {
    type: ErrorType.User,
    code: "InvalidConfigValue",
    message: (component, name, message) => `Project configuration '${name}' of '${component}' is invalid. ${message}`,
};
exports.ApimOperationError = {
    type: ErrorType.User,
    code: "ApimOperationError",
    message: (operation, resourceType) => `Failed to ${operation} ${resourceType}.`,
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.AadOperationError = {
    type: ErrorType.User,
    code: "AadOperationError",
    message: (operation, resourceType) => `Failed to ${operation} ${resourceType}.`,
    helpLink: constants_1.ProjectConstants.helpLink,
};
exports.InvalidCliOptionError = {
    type: ErrorType.User,
    code: "InvalidCliOptionError",
    message: (reason) => `Option is invalid. ${reason}`,
};
// System error
exports.NotImplemented = {
    type: ErrorType.System,
    code: "NotImplemented",
    message: () => `Not implemented.`,
};
exports.InvalidFunctionEndpoint = {
    type: ErrorType.System,
    code: "InvalidFunctionEndpoint",
    message: () => `The function endpoint scheme should be 'http' or 'https'.`,
};
exports.InvalidAzureResourceId = {
    type: ErrorType.System,
    code: "InvalidAzureResourceId",
    message: (resourceId) => `Invalid Azure resource id ${resourceId}.`,
};
exports.InvalidApimServiceChoice = {
    type: ErrorType.System,
    code: "InvalidApimServiceChoice",
    message: (serviceName) => `The selected API Management service '${serviceName}' is invalid.`,
};
exports.EmptyProperty = {
    type: ErrorType.System,
    code: "EmptyProperty",
    message: (name) => `Property '${name}' is empty.`,
};
exports.InvalidPropertyType = {
    type: ErrorType.System,
    code: "InvalidPropertyType",
    message: (name, type) => `Property '${name}' is not type '${type}'`,
};
exports.ShortenToEmpty = {
    type: ErrorType.System,
    code: "ShortenToEmpty",
    message: (value) => `The value '${value}' cannot be shorten to empty.`,
};
exports.UnhandledError = {
    type: ErrorType.System,
    code: "UnhandledError",
    message: () => `Unhandled error.`,
};
exports.FailedToParseResourceIdError = {
    type: ErrorType.User,
    code: "FailedToParseResourceId",
    message: (name, resourceId) => `Failed to get '${name}' from resource id: '${resourceId}'`,
};
function BuildError(pluginError, ...params) {
    let innerError = undefined;
    if (params.length > 0 && params[0] instanceof Error) {
        innerError = params.shift();
    }
    const message = !innerError
        ? pluginError.message(...params)
        : `${pluginError.message(...params)} ${innerError === null || innerError === void 0 ? void 0 : innerError.message}`;
    switch (pluginError.type) {
        case ErrorType.User:
            return teamsfx_api_1.returnUserError(new Error(message), constants_1.ProjectConstants.pluginShortName, pluginError.code, pluginError.helpLink, innerError);
        case ErrorType.System:
            return teamsfx_api_1.returnSystemError(new Error(message), constants_1.ProjectConstants.pluginShortName, pluginError.code, pluginError.helpLink, innerError);
    }
}
exports.BuildError = BuildError;
function AssertNotEmpty(name, value) {
    if (!value) {
        throw BuildError(exports.EmptyProperty, name);
    }
    return value;
}
exports.AssertNotEmpty = AssertNotEmpty;
function AssertConfigNotEmpty(component, name, value, envName) {
    if (!value) {
        throw BuildError(exports.EmptyConfigValue, component, name, common_1.isArmSupportEnabled()
            ? constants_1.ProjectConstants.configFilePathArmSupported(envName)
            : constants_1.ProjectConstants.configFilePath, constants_1.ConfigRetryOperations[component][name]);
    }
    return value;
}
exports.AssertConfigNotEmpty = AssertConfigNotEmpty;
//# sourceMappingURL=error.js.map