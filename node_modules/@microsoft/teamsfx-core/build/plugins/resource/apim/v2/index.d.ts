import { AzureSolutionSettings, Func, FxError, Inputs, Json, QTreeNode, Result, TokenProvider, v2, Void } from "@microsoft/teamsfx-api";
import { Context, DeepReadonly, DeploymentInputs, ProvisionInputs, ResourcePlugin, ResourceProvisionOutput } from "@microsoft/teamsfx-api/build/v2";
import { ApimPlugin } from "..";
export declare class ApimPluginV2 implements ResourcePlugin {
    name: string;
    displayName: string;
    plugin: ApimPlugin;
    activate(solutionSettings: AzureSolutionSettings): boolean;
    getQuestions(ctx: Context, inputs: Inputs, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<QTreeNode | undefined, FxError>>;
    getQuestionsForScaffolding(ctx: Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
    getQuestionsForUserTask(ctx: Context, inputs: Inputs, func: Func, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<QTreeNode | undefined, FxError>>;
    scaffoldSourceCode(ctx: Context, inputs: Inputs): Promise<Result<Void, FxError>>;
    provisionResource(ctx: Context, inputs: ProvisionInputs, envInfo: Readonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<ResourceProvisionOutput, FxError>>;
    configureResource(ctx: Context, inputs: ProvisionInputs, envInfo: Readonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<ResourceProvisionOutput, FxError>>;
    deploy(ctx: Context, inputs: DeploymentInputs, envInfo: DeepReadonly<v2.EnvInfoV2>, tokenProvider: TokenProvider): Promise<Result<Void, FxError>>;
    executeUserTask(ctx: Context, inputs: Inputs, func: Func, localSettings: Json, envInfo: v2.EnvInfoV2, tokenProvider: TokenProvider): Promise<Result<unknown, FxError>>;
    generateResourceTemplate(ctx: Context, inputs: Inputs): Promise<Result<v2.ResourceTemplate, FxError>>;
    updateResourceTemplate(ctx: Context, inputs: Inputs): Promise<Result<v2.ResourceTemplate, FxError>>;
}
//# sourceMappingURL=index.d.ts.map