"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApimOutputBicepSnippet = exports.UserTask = exports.OpenApiSchemaVersion = exports.ErrorHandlerResult = exports.Operation = exports.AzureResource = exports.OperationStatus = exports.ProgressMessages = exports.PluginLifeCycleToProgressStep = exports.ProgressStep = exports.PluginLifeCycle = exports.ConfigRetryOperations = exports.ComponentRetryOperations = exports.RetryOperation = exports.TeamsToolkitComponent = exports.SolutionConfigKeys = exports.AadPluginConfigKeys = exports.FunctionPluginConfigKeys = exports.ApimPluginConfigKeys = exports.ApimPathInfo = exports.ValidationConstants = exports.QuestionConstants = exports.AadDefaultValues = exports.ApimDefaultValues = exports.ProjectConstants = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
class ProjectConstants {
}
exports.ProjectConstants = ProjectConstants;
ProjectConstants.pluginShortName = "APIM";
ProjectConstants.pluginName = "fx-resource-apim";
ProjectConstants.pluginDisplayName = "API Management";
ProjectConstants.configFilePathArmSupported = (envName) => `state.${envName}.json`;
ProjectConstants.configFilePath = "env.default.json";
ProjectConstants.workingDir = "openapi";
ProjectConstants.openApiDocumentFileName = "openapi.json";
ProjectConstants.readMeFileName = "README.md";
ProjectConstants.maxRetries = 15;
ProjectConstants.retryTimeInterval = 1000;
ProjectConstants.helpLink = "https://aka.ms/teamsfx-apim-help";
ProjectConstants.apimResourceProvider = "Microsoft.ApiManagement";
class ApimDefaultValues {
}
exports.ApimDefaultValues = ApimDefaultValues;
ApimDefaultValues.functionBasePath = "/api";
ApimDefaultValues.productDescription = "Created by TeamsFx.";
ApimDefaultValues.oAuthServerDescription = "Created by TeamsFx.";
ApimDefaultValues.enableScopeName = ".default";
ApimDefaultValues.userId = "sample@microsoft.com";
ApimDefaultValues.apiPrefix = "api-title";
ApimDefaultValues.apiVersion = "v1";
class AadDefaultValues {
}
exports.AadDefaultValues = AadDefaultValues;
AadDefaultValues.graphApiBasePath = "https://graph.microsoft.com/v1.0";
AadDefaultValues.redirectUris = [];
class QuestionConstants {
}
exports.QuestionConstants = QuestionConstants;
QuestionConstants.namespace = "fx-solution-azure/fx-resource-apim";
QuestionConstants.VSCode = (_a = class {
    },
    _a.Apim = (_b = class {
        },
        _b.questionName = "vsc-apim-service",
        _b.description = "Select API Management service",
        _b.createNewApimOption = "+ Create a new API Management service",
        _b),
    _a.OpenApiDocument = (_c = class {
        },
        _c.questionName = "vsc-open-api-document",
        _c.funcName = "open-api-document-option",
        _c.description = "Select Open API document",
        _c.excludeFolders = ["node_modules"],
        _c.openApiDocumentFileExtensions = ["json", "yaml"],
        _c),
    _a.ExistingOpenApiDocument = (_d = class {
        },
        // Same to OpenApiDocument.questionName
        _d.questionName = "vsc-open-api-document",
        _d),
    _a.ApiPrefix = (_e = class {
        },
        _e.questionName = "vsc-api-prefix",
        _e.description = "Input the API name prefix.",
        _e.prompt = "The unique name of the API will be '{api-prefix}-{resource-suffix}-{api-version}'.",
        _e),
    _a.ApiVersion = (_f = class {
        },
        _f.questionName = "vsc-api-version",
        _f.description = "Select an API version.",
        _f.createNewApiVersionOption = "+ Create a new API version",
        _f),
    _a.NewApiVersion = (_g = class {
        },
        _g.questionName = "vsc-new-api-version",
        _g.description = "Input the API version.",
        _g),
    _a);
QuestionConstants.CLI = (_h = class {
    },
    _h.ApimResourceGroup = (_j = class {
        },
        _j.questionName = "apim-resource-group",
        _j.description = "The name of resource group.",
        _j),
    _h.ApimServiceName = (_k = class {
        },
        _k.questionName = "apim-service-name",
        _k.description = "The name of the API Management service instance.",
        _k),
    _h.OpenApiDocument = (_l = class {
        },
        _l.questionName = "open-api-document",
        _l.description = "The Open API document file path.",
        _l),
    _h.ApiPrefix = (_m = class {
        },
        _m.questionName = "api-prefix",
        _m.description = "The API name prefix. The default unique name of the API will be '{api-prefix}-{resource-suffix}-{api-version}'.",
        _m),
    _h.ApiId = (_o = class {
        },
        // The api id is displayed as api name in the Azure Portal
        _o.questionName = "api-name",
        _o.description = "The unique name of the api to be updated.",
        _o),
    _h.ApiVersion = (_p = class {
        },
        _p.questionName = "api-version",
        _p.description = "The API version.",
        _p),
    _h);
class ValidationConstants {
}
exports.ValidationConstants = ValidationConstants;
ValidationConstants.defaultMinLength = 1;
ValidationConstants.defaultMaxLength = 256;
// https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftresources
ValidationConstants.resourceGroupValidPattern = {
    regex: /^[-\w\._\(\)]+$/,
    message: "The value can include alphanumeric, underscore, parentheses, hyphen, period (except at end), and unicode characters that match the allowed characters.",
};
// https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/resource-name-rules#microsoftapimanagement
ValidationConstants.serviceIdValidPattern = {
    regex: /^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/,
    message: "The value can contain only letters, numbers and hyphens. The first character must be a letter and last character must be a letter or a number.",
};
ValidationConstants.resourceIdValidPattern = {
    regex: /^[0-9a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/,
    message: "The value can contain only numbers, letters, and hyphens when preceded and followed by number or a letter.",
};
ValidationConstants.defaultValidPattern = {
    regex: /^[^*#&+:<>?]+$/,
    message: "The value cannot contain any characters in '*#&+:<>?'.",
};
ValidationConstants.guidValidPattern = {
    regex: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    message: "The value should be a GUID.",
};
ValidationConstants.CLI = {
    invalidOptionMessage: (optionName) => `The value of option '--${optionName}' is invalid.`,
    emptyOptionMessage: (optionName) => `Option '--${optionName}' is required. Set the value of '--${optionName}'`,
    overrideOptionMessage: (optionName) => `Option '--${optionName}' cannot be overridden. Remove option '--${optionName}'`,
};
class ApimPathInfo {
}
exports.ApimPathInfo = ApimPathInfo;
ApimPathInfo.BicepTemplateRelativeDir = path_1.default.join("plugins", "resource", "apim", "bicep");
ApimPathInfo.ProvisionModuleFileName = "apimProvision.bicep";
ApimPathInfo.ConfigurationModuleFileName = "apimConfiguration.bicep";
class ApimPluginConfigKeys {
}
exports.ApimPluginConfigKeys = ApimPluginConfigKeys;
ApimPluginConfigKeys.resourceGroupName = "resourceGroupName";
ApimPluginConfigKeys.serviceName = "serviceName";
ApimPluginConfigKeys.productId = "productId";
ApimPluginConfigKeys.oAuthServerId = "oAuthServerId";
ApimPluginConfigKeys.apimClientAADObjectId = "apimClientAADObjectId";
ApimPluginConfigKeys.apimClientAADClientId = "apimClientAADClientId";
ApimPluginConfigKeys.apimClientAADClientSecret = "apimClientAADClientSecret";
ApimPluginConfigKeys.apiPrefix = "apiPrefix";
ApimPluginConfigKeys.versionSetId = "versionSetId";
ApimPluginConfigKeys.apiPath = "apiPath";
ApimPluginConfigKeys.apiDocumentPath = "apiDocumentPath";
ApimPluginConfigKeys.serviceResourceId = "serviceResourceId";
ApimPluginConfigKeys.productResourceId = "productResourceId";
ApimPluginConfigKeys.authServerResourceId = "authServerResourceId";
ApimPluginConfigKeys.publisherEmail = "publisherEmail";
ApimPluginConfigKeys.publisherName = "publisherName";
class FunctionPluginConfigKeys {
}
exports.FunctionPluginConfigKeys = FunctionPluginConfigKeys;
FunctionPluginConfigKeys.functionEndpoint = "functionEndpoint";
class AadPluginConfigKeys {
}
exports.AadPluginConfigKeys = AadPluginConfigKeys;
AadPluginConfigKeys.objectId = "objectId";
AadPluginConfigKeys.clientId = "clientId";
AadPluginConfigKeys.oauth2PermissionScopeId = "oauth2PermissionScopeId";
AadPluginConfigKeys.applicationIdUris = "applicationIdUris";
class SolutionConfigKeys {
}
exports.SolutionConfigKeys = SolutionConfigKeys;
SolutionConfigKeys.resourceNameSuffix = "resourceNameSuffix";
SolutionConfigKeys.teamsAppTenantId = "teamsAppTenantId";
SolutionConfigKeys.resourceGroupName = "resourceGroupName";
SolutionConfigKeys.location = "location";
SolutionConfigKeys.remoteTeamsAppId = "remoteTeamsAppId";
SolutionConfigKeys.subscriptionId = "subscriptionId";
var TeamsToolkitComponent;
(function (TeamsToolkitComponent) {
    TeamsToolkitComponent["FunctionPlugin"] = "fx-resource-function";
    TeamsToolkitComponent["AadPlugin"] = "fx-resource-aad-app-for-teams";
    TeamsToolkitComponent["Solution"] = "solution";
    TeamsToolkitComponent["ApimPlugin"] = "fx-resource-apim";
})(TeamsToolkitComponent = exports.TeamsToolkitComponent || (exports.TeamsToolkitComponent = {}));
var RetryOperation;
(function (RetryOperation) {
    RetryOperation["Create"] = "create a new project";
    RetryOperation["Update"] = "add API Management resource";
    RetryOperation["Provision"] = "provision in the cloud";
    RetryOperation["Deploy"] = "deploy to the cloud";
    RetryOperation["Login"] = "sign in to Azure and choose a subscription";
})(RetryOperation = exports.RetryOperation || (exports.RetryOperation = {}));
exports.ComponentRetryOperations = Object.freeze({
    [TeamsToolkitComponent.FunctionPlugin]: RetryOperation.Update,
    [TeamsToolkitComponent.AadPlugin]: RetryOperation.Create,
    [TeamsToolkitComponent.Solution]: RetryOperation.Create,
    [TeamsToolkitComponent.ApimPlugin]: RetryOperation.Update,
});
exports.ConfigRetryOperations = {
    [TeamsToolkitComponent.FunctionPlugin]: {
        [FunctionPluginConfigKeys.functionEndpoint]: RetryOperation.Provision,
    },
    [TeamsToolkitComponent.AadPlugin]: {
        [AadPluginConfigKeys.objectId]: RetryOperation.Provision,
        [AadPluginConfigKeys.clientId]: RetryOperation.Provision,
        [AadPluginConfigKeys.oauth2PermissionScopeId]: RetryOperation.Provision,
        [AadPluginConfigKeys.applicationIdUris]: RetryOperation.Provision,
    },
    [TeamsToolkitComponent.Solution]: {
        [SolutionConfigKeys.resourceNameSuffix]: RetryOperation.Create,
        [SolutionConfigKeys.teamsAppTenantId]: RetryOperation.Provision,
        [SolutionConfigKeys.resourceGroupName]: RetryOperation.Provision,
        [SolutionConfigKeys.location]: RetryOperation.Provision,
    },
    [TeamsToolkitComponent.ApimPlugin]: {
        [ApimPluginConfigKeys.resourceGroupName]: RetryOperation.Provision,
        [ApimPluginConfigKeys.serviceName]: RetryOperation.Provision,
        [ApimPluginConfigKeys.productId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.oAuthServerId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADObjectId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADClientId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.apimClientAADClientSecret]: RetryOperation.Provision,
        [ApimPluginConfigKeys.serviceResourceId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.productResourceId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.authServerResourceId]: RetryOperation.Provision,
        [ApimPluginConfigKeys.publisherEmail]: RetryOperation.Provision,
        [ApimPluginConfigKeys.publisherName]: RetryOperation.Provision,
        [ApimPluginConfigKeys.apiPrefix]: RetryOperation.Deploy,
        [ApimPluginConfigKeys.versionSetId]: RetryOperation.Deploy,
        [ApimPluginConfigKeys.apiPath]: RetryOperation.Deploy,
        [ApimPluginConfigKeys.apiDocumentPath]: RetryOperation.Deploy,
    },
};
var PluginLifeCycle;
(function (PluginLifeCycle) {
    PluginLifeCycle["CallFunc"] = "call-func";
    PluginLifeCycle["GetQuestions"] = "get-questions";
    PluginLifeCycle["Scaffold"] = "scaffold";
    PluginLifeCycle["Provision"] = "provision";
    PluginLifeCycle["GenerateArmTemplates"] = "generate-arm-templates";
    PluginLifeCycle["UpdateArmTemplates"] = "update-arm-templates";
    PluginLifeCycle["PostProvision"] = "post-provision";
    PluginLifeCycle["Deploy"] = "deploy";
    PluginLifeCycle["GetQuestionsForUserTask"] = "get-questions-for-user-task";
})(PluginLifeCycle = exports.PluginLifeCycle || (exports.PluginLifeCycle = {}));
var ProgressStep;
(function (ProgressStep) {
    ProgressStep["None"] = "";
    ProgressStep["Scaffold"] = "Scaffolding OpenAPI document";
    ProgressStep["Provision"] = "Provisioning API Management";
    ProgressStep["PostProvision"] = "Configuring API Management";
    ProgressStep["Deploy"] = "Importing API to API Management";
})(ProgressStep = exports.ProgressStep || (exports.ProgressStep = {}));
exports.PluginLifeCycleToProgressStep = {
    [PluginLifeCycle.CallFunc]: ProgressStep.None,
    [PluginLifeCycle.GetQuestions]: ProgressStep.None,
    [PluginLifeCycle.Scaffold]: ProgressStep.Scaffold,
    [PluginLifeCycle.Provision]: ProgressStep.Provision,
    [PluginLifeCycle.GenerateArmTemplates]: ProgressStep.None,
    [PluginLifeCycle.UpdateArmTemplates]: ProgressStep.None,
    [PluginLifeCycle.PostProvision]: ProgressStep.PostProvision,
    [PluginLifeCycle.Deploy]: ProgressStep.Deploy,
    [PluginLifeCycle.GetQuestionsForUserTask]: ProgressStep.None,
};
exports.ProgressMessages = {
    [ProgressStep.None]: {},
    [ProgressStep.Scaffold]: {
        Scaffold: "Scaffold OpenAPI document",
    },
    [ProgressStep.Provision]: {
        CreateApim: "Create API Management service",
        CreateAad: "Create client AAD app registration",
    },
    [ProgressStep.PostProvision]: {
        ConfigApim: "Configure API Management service",
        ConfigClientAad: "Configure client AAD app registration",
        ConfigAppAad: `Update AAD app for Teams app`,
    },
    [ProgressStep.Deploy]: {
        ImportApi: "Import API into API management",
    },
};
var OperationStatus;
(function (OperationStatus) {
    OperationStatus["Started"] = "started";
    OperationStatus["Failed"] = "failed";
    OperationStatus["Succeeded"] = "succeeded";
})(OperationStatus = exports.OperationStatus || (exports.OperationStatus = {}));
class AzureResource {
}
exports.AzureResource = AzureResource;
AzureResource.ResourceGroup = {
    shortName: "resource-group",
    displayName: "Resource Group",
};
AzureResource.APIM = {
    shortName: "apim",
    displayName: "API Management Service",
};
AzureResource.Product = {
    shortName: "apim-product",
    displayName: "API Management product",
};
AzureResource.OAuthServer = {
    shortName: "apim-oauth-server",
    displayName: "API Management OAuth server",
};
AzureResource.VersionSet = {
    shortName: "apim-version-set",
    displayName: "API Management version set",
};
AzureResource.API = {
    shortName: "apim-api",
    displayName: "API Management API",
};
AzureResource.ProductAPI = {
    shortName: "apim-product-api",
    displayName: "API Management product and API relationship",
};
AzureResource.Aad = {
    shortName: "aad",
    displayName: "Azure Active Directory application",
};
AzureResource.AadSecret = {
    shortName: "aad-secret",
    displayName: "Azure Active Directory client secret",
};
AzureResource.ServicePrincipal = {
    shortName: "service-principal",
    displayName: "Service Principal",
};
AzureResource.ResourceProvider = {
    shortName: "resource-provider",
    displayName: "Resource Provider",
};
class Operation {
}
exports.Operation = Operation;
Operation.Create = {
    shortName: "create",
    displayName: "create",
};
Operation.Update = {
    shortName: "update",
    displayName: "update",
};
Operation.Get = {
    shortName: "get",
    displayName: "get",
};
Operation.List = {
    shortName: "list",
    displayName: "list",
};
Operation.ListNextPage = {
    shortName: "list-next",
    displayName: "list (pagination)",
};
Operation.Import = {
    shortName: "import",
    displayName: "import",
};
Operation.Register = {
    shortName: "register",
    displayName: "register",
};
var ErrorHandlerResult;
(function (ErrorHandlerResult) {
    ErrorHandlerResult["Continue"] = "Continue";
    ErrorHandlerResult["Return"] = "Return";
})(ErrorHandlerResult = exports.ErrorHandlerResult || (exports.ErrorHandlerResult = {}));
var OpenApiSchemaVersion;
(function (OpenApiSchemaVersion) {
    OpenApiSchemaVersion["V2"] = "v2";
    OpenApiSchemaVersion["V3"] = "v3";
})(OpenApiSchemaVersion = exports.OpenApiSchemaVersion || (exports.OpenApiSchemaVersion = {}));
class UserTask {
}
exports.UserTask = UserTask;
UserTask.addResourceFuncName = "addResource";
class ApimOutputBicepSnippet {
}
exports.ApimOutputBicepSnippet = ApimOutputBicepSnippet;
ApimOutputBicepSnippet.ServiceResourceId = "provisionOutputs.apimOutput.value.serviceResourceId";
//# sourceMappingURL=constants.js.map