"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Factory = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const error_1 = require("./error");
const apimService_1 = require("./services/apimService");
const aadService_1 = require("./services/aadService");
const openApiProcessor_1 = require("./utils/openApiProcessor");
const apimManager_1 = require("./managers/apimManager");
const aadManager_1 = require("./managers/aadManager");
const questionManager_1 = require("./managers/questionManager");
const VSCode = tslib_1.__importStar(require("./questions/vscodeQuestion"));
const CLI = tslib_1.__importStar(require("./questions/cliQuestion"));
const arm_apimanagement_1 = require("@azure/arm-apimanagement");
const teamsAppAadManager_1 = require("./managers/teamsAppAadManager");
const axios_1 = tslib_1.__importDefault(require("axios"));
const constants_1 = require("./constants");
const commonUtils_1 = require("./utils/commonUtils");
const scaffoldManager_1 = require("./managers/scaffoldManager");
const arm_resources_1 = require("@azure/arm-resources");
const config_1 = require("./config");
class Factory {
    static async buildApimManager(ctx) {
        const openApiProcessor = new openApiProcessor_1.OpenApiProcessor(ctx.telemetryReporter, ctx.logProvider);
        const solutionConfig = new config_1.SolutionConfig(ctx.envInfo);
        const lazyApimService = new commonUtils_1.Lazy(async () => await Factory.buildApimService(solutionConfig, ctx.azureAccountProvider, ctx.telemetryReporter, ctx.logProvider));
        return new apimManager_1.ApimManager(lazyApimService, openApiProcessor, ctx.telemetryReporter, ctx.logProvider);
    }
    static async buildAadManager(ctx) {
        const lazyAadService = new commonUtils_1.Lazy(async () => await Factory.buildAadService(ctx.graphTokenProvider, ctx.telemetryReporter, ctx.logProvider));
        return new aadManager_1.AadManager(lazyAadService, ctx.telemetryReporter, ctx.logProvider);
    }
    static async buildTeamsAppAadManager(ctx) {
        const lazyAadService = new commonUtils_1.Lazy(async () => await Factory.buildAadService(ctx.graphTokenProvider, ctx.telemetryReporter, ctx.logProvider));
        return new teamsAppAadManager_1.TeamsAppAadManager(lazyAadService, ctx.telemetryReporter, ctx.logProvider);
    }
    static async buildScaffoldManager(ctx) {
        const openApiProcessor = new openApiProcessor_1.OpenApiProcessor(ctx.telemetryReporter, ctx.logProvider);
        return new scaffoldManager_1.ScaffoldManager(openApiProcessor, ctx.telemetryReporter, ctx.logProvider);
    }
    static async buildQuestionManager(ctx) {
        var _a;
        const solutionConfig = new config_1.SolutionConfig(ctx.envInfo);
        switch ((_a = ctx.answers) === null || _a === void 0 ? void 0 : _a.platform) {
            case teamsfx_api_1.Platform.VSCode:
                // Lazy init apim service to get the latest subscription id in configuration
                const lazyApimService = new commonUtils_1.Lazy(async () => await Factory.buildApimService(solutionConfig, ctx.azureAccountProvider, ctx.telemetryReporter, ctx.logProvider));
                const openApiProcessor = new openApiProcessor_1.OpenApiProcessor(ctx.telemetryReporter, ctx.logProvider);
                const apimServiceQuestion = new VSCode.ApimServiceQuestion(lazyApimService, ctx.telemetryReporter, ctx.logProvider);
                const openApiDocumentQuestion = new VSCode.OpenApiDocumentQuestion(openApiProcessor, ctx.telemetryReporter, ctx.logProvider);
                const existingOpenApiDocumentFunc = new VSCode.ExistingOpenApiDocumentFunc(openApiProcessor, ctx.telemetryReporter, ctx.logProvider);
                const apiPrefixQuestion = new VSCode.ApiPrefixQuestion(ctx.telemetryReporter, ctx.logProvider);
                const apiVersionQuestion = new VSCode.ApiVersionQuestion(lazyApimService, ctx.telemetryReporter, ctx.logProvider);
                const newApiVersionQuestion = new VSCode.NewApiVersionQuestion(ctx.telemetryReporter, ctx.logProvider);
                return new questionManager_1.VscQuestionManager(apimServiceQuestion, openApiDocumentQuestion, apiPrefixQuestion, apiVersionQuestion, newApiVersionQuestion, existingOpenApiDocumentFunc);
            case teamsfx_api_1.Platform.CLI:
            case teamsfx_api_1.Platform.CLI_HELP:
                const cliApimServiceNameQuestion = new CLI.ApimServiceNameQuestion();
                const cliApimResourceGroupQuestion = new CLI.ApimResourceGroupQuestion();
                const cliOpenApiDocumentQuestion = new CLI.OpenApiDocumentQuestion();
                const cliApiPrefixQuestion = new CLI.ApiPrefixQuestion();
                const cliApiVersionQuestion = new CLI.ApiVersionQuestion();
                return new questionManager_1.CliQuestionManager(cliApimServiceNameQuestion, cliApimResourceGroupQuestion, cliOpenApiDocumentQuestion, cliApiPrefixQuestion, cliApiVersionQuestion);
            default:
                throw error_1.BuildError(error_1.NotImplemented);
        }
    }
    static async buildApimService(solutionConfig, azureAccountProvider, telemetryReporter, logger) {
        const credential = error_1.AssertNotEmpty("credential", await (azureAccountProvider === null || azureAccountProvider === void 0 ? void 0 : azureAccountProvider.getAccountCredentialAsync()));
        let subscriptionId;
        if (solutionConfig.subscriptionId) {
            subscriptionId = solutionConfig.subscriptionId;
        }
        else {
            // fall back to asking user subscription info because some operations like "AddResource" can be before provision
            let subscriptionInfo = await (azureAccountProvider === null || azureAccountProvider === void 0 ? void 0 : azureAccountProvider.getSelectedSubscription());
            subscriptionInfo = error_1.AssertNotEmpty("subscriptionInfo", subscriptionInfo);
            subscriptionId = subscriptionInfo.subscriptionId;
        }
        const apiManagementClient = new arm_apimanagement_1.ApiManagementClient(credential, subscriptionId);
        const resourceProviderClient = new arm_resources_1.Providers(new arm_resources_1.ResourceManagementClientContext(credential, subscriptionId));
        return new apimService_1.ApimService(apiManagementClient, resourceProviderClient, credential, subscriptionId, telemetryReporter, logger);
    }
    static async buildAadService(graphTokenProvider, telemetryReporter, logger) {
        const accessToken = error_1.AssertNotEmpty("accessToken", await (graphTokenProvider === null || graphTokenProvider === void 0 ? void 0 : graphTokenProvider.getAccessToken()));
        const axiosInstance = axios_1.default.create({
            baseURL: constants_1.AadDefaultValues.graphApiBasePath,
            headers: {
                authorization: `Bearer ${accessToken}`,
                "content-type": "application/json",
            },
        });
        return new aadService_1.AadService(axiosInstance, telemetryReporter, logger);
    }
}
exports.Factory = Factory;
//# sourceMappingURL=factory.js.map