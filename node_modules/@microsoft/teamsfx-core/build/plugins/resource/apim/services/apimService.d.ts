import { ApiManagementClient } from "@azure/arm-apimanagement";
import { ApiContract, ApiManagementServiceResource, ApiVersionSetContract, ApiVersionSetGetHeaders, AuthorizationServerContract, AuthorizationServerGetHeaders, ProductContract } from "@azure/arm-apimanagement/src/models";
import { OpenApiSchemaVersion } from "../constants";
import { IApimServiceResource } from "../interfaces/IApimResource";
import { LogProvider, TelemetryReporter } from "@microsoft/teamsfx-api";
import { TokenCredentialsBase } from "@azure/ms-rest-nodeauth";
import { OpenAPI } from "openapi-types";
import { Providers } from "@azure/arm-resources";
import { Provider } from "@azure/arm-resources/esm/models";
export declare class ApimService {
    private readonly subscriptionId;
    private readonly apimClient;
    private readonly telemetryReporter;
    private readonly logger;
    private readonly credential;
    private readonly resourceProviderClient;
    constructor(apimClient: ApiManagementClient, resourceProviderClient: Providers, credential: TokenCredentialsBase, subscriptionId: string, telemetryReporter?: TelemetryReporter, logger?: LogProvider);
    getRegisteredResourceProvider(): Promise<Provider | undefined>;
    ensureResourceProvider(): Promise<void>;
    createService(resourceGroupName: string, serviceName: string, location: string, userId: string): Promise<void>;
    getService(resourceGroupName: string, serviceName: string): Promise<ApiManagementServiceResource | undefined>;
    listService(): Promise<Array<IApimServiceResource>>;
    createProduct(resourceGroupName: string, serviceName: string, productId: string, productDisplayName?: string): Promise<void>;
    getProduct(resourceGroupName: string, serviceName: string, productId: string): Promise<ProductContract | undefined>;
    createOrUpdateOAuthService(resourceGroupName: string, serviceName: string, oAuthServerId: string, tenantId: string, clientId: string, clientSecret: string, scope: string, oAuthServerDisplayName?: string): Promise<void>;
    getOAuthServer(resourceGroupName: string, serviceName: string, oAuthServerId: string): Promise<(AuthorizationServerContract & AuthorizationServerGetHeaders) | undefined>;
    getApi(resourceGroupName: string, serviceName: string, apiId: string): Promise<ApiContract | undefined>;
    listApi(resourceGroupName: string, serviceName: string, versionSetId?: string): Promise<ApiContract[]>;
    importApi(resourceGroupName: string, serviceName: string, apiId: string, apiPath: string, version: string, versionSetId: string, oAuthServerId: string, schemaVersion: OpenApiSchemaVersion, spec: OpenAPI.Document): Promise<void>;
    getVersionSet(resourceGroupName: string, serviceName: string, versionSetId: string): Promise<(ApiVersionSetContract & ApiVersionSetGetHeaders) | undefined>;
    createVersionSet(resourceGroupName: string, serviceName: string, versionSetId: string, versionSetName?: string): Promise<void>;
    checkProductApiExistence(resourceGroupName: string, serviceName: string, productId: string, apiId: string): Promise<boolean>;
    addApiToProduct(resourceGroupName: string, serviceName: string, productId: string, apiId: string): Promise<void>;
    getUserId(): Promise<string>;
    private execute;
    private convertApimServiceResource;
    private generateVersionSetResourceId;
}
//# sourceMappingURL=apimService.d.ts.map