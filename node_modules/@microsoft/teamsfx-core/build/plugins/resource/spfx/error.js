// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadAppPackageFailedError = exports.GetTenantFailedError = exports.CreateAppCatalogFailedError = exports.InsufficientPermissionError = exports.GetGraphTokenFailedError = exports.GetSPOTokenFailedError = exports.NoManifestFileError = exports.BuildSPPackageError = exports.NoSPPackageError = exports.ScaffoldError = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./utils/constants");
const util = tslib_1.__importStar(require("util"));
function ScaffoldError(error) {
    if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
        return error;
    }
    else {
        return teamsfx_api_1.returnSystemError(error, constants_1.Constants.PLUGIN_NAME, "SPFxScaffoldError");
    }
}
exports.ScaffoldError = ScaffoldError;
function NoSPPackageError(distFolder) {
    return teamsfx_api_1.returnUserError(new Error(util.format("Cannot find SharePoint package %s", distFolder)), constants_1.Constants.PLUGIN_NAME, "NoSharePointPackage");
}
exports.NoSPPackageError = NoSPPackageError;
function BuildSPPackageError(error) {
    if (error instanceof teamsfx_api_1.UserError || error instanceof teamsfx_api_1.SystemError) {
        return error;
    }
    else {
        return teamsfx_api_1.returnUserError(error, constants_1.Constants.PLUGIN_NAME, "BuildSPFxPackageFail");
    }
}
exports.BuildSPPackageError = BuildSPPackageError;
function NoManifestFileError(distFolder) {
    return teamsfx_api_1.returnUserError(new Error(util.format("Cannot find manifest file %s", distFolder)), constants_1.Constants.PLUGIN_NAME, "NoManifestFile");
}
exports.NoManifestFileError = NoManifestFileError;
function GetSPOTokenFailedError() {
    return teamsfx_api_1.returnSystemError(new Error("Cannot get SPO access token"), constants_1.Constants.PLUGIN_NAME, "GetSPOTokenFailed");
}
exports.GetSPOTokenFailedError = GetSPOTokenFailedError;
function GetGraphTokenFailedError() {
    return teamsfx_api_1.returnSystemError(new Error("Cannot get Graph access token"), constants_1.Constants.PLUGIN_NAME, "GetGraphTokenFailed");
}
exports.GetGraphTokenFailedError = GetGraphTokenFailedError;
function InsufficientPermissionError(appCatalog) {
    return teamsfx_api_1.returnUserError(new Error(`You don't have permission to upload and deploy package to App Catalog ${appCatalog}, please use site admin account.`), constants_1.Constants.PLUGIN_NAME, "InsufficientPermission");
}
exports.InsufficientPermissionError = InsufficientPermissionError;
function CreateAppCatalogFailedError(error) {
    return teamsfx_api_1.returnSystemError(new Error(`Failed to create tenant app catalog, due to ${error.message}, stack: ${error.stack}`), constants_1.Constants.PLUGIN_NAME, "CreateAppCatalogFailed");
}
exports.CreateAppCatalogFailedError = CreateAppCatalogFailedError;
function GetTenantFailedError(username, error) {
    return teamsfx_api_1.returnSystemError(new Error(`Cannot get tenant ` +
        (username ? `for user ${username} ` : "") +
        (error ? `due to error ${error.message}` : "")), constants_1.Constants.PLUGIN_NAME, "GetTenantFailedError");
}
exports.GetTenantFailedError = GetTenantFailedError;
function UploadAppPackageFailedError(error) {
    return teamsfx_api_1.returnSystemError(new Error(`Failed to upload app package, due to ${error.message}`), constants_1.Constants.PLUGIN_NAME, "UploadAppCatalogFailed");
}
exports.UploadAppPackageFailedError = UploadAppPackageFailedError;
//# sourceMappingURL=error.js.map