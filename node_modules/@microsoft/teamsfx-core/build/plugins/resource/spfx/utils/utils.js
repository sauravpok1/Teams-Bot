"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = exports.Utils = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const fs = tslib_1.__importStar(require("fs-extra"));
const glob_1 = require("glob");
const child_process_1 = require("child_process");
const axios_1 = tslib_1.__importDefault(require("axios"));
class Utils {
    static async configure(configurePath, map) {
        let files = [];
        const extensions = ["*.json", "*.ts", "*.js", "*.scss", "*.tsx"];
        if (fs.lstatSync(configurePath).isFile()) {
            files = [configurePath];
        }
        else {
            for (const ext of extensions) {
                files = files.concat(glob_1.glob.sync(`${configurePath}/**/${ext}`, { nodir: true }));
            }
        }
        files.forEach(async function (file) {
            let content = (await fs.readFile(file)).toString();
            map.forEach((value, key) => {
                const reg = new RegExp(key, "g");
                content = content.replace(reg, value);
            });
            await fs.writeFile(file, content);
        });
    }
    static normalizeComponentName(name) {
        name = lodash_1.default.camelCase(name);
        name = lodash_1.default.upperFirst(name);
        return name;
    }
    static async execute(command, title, workingDir, logProvider, showInOutputWindow = false) {
        return new Promise((resolve, reject) => {
            if (showInOutputWindow) {
                logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(`[${title}] Start to run command: "${command}".`);
            }
            child_process_1.exec(command, { cwd: workingDir }, (error, standardOutput) => {
                if (showInOutputWindow) {
                    logProvider === null || logProvider === void 0 ? void 0 : logProvider.debug(`[${title}]${standardOutput}`);
                }
                if (error) {
                    if (showInOutputWindow) {
                        logProvider === null || logProvider === void 0 ? void 0 : logProvider.error(`[${title}] Failed to run command: "${command}".`);
                        logProvider === null || logProvider === void 0 ? void 0 : logProvider.error(error.message);
                    }
                    reject(error);
                    return;
                }
                resolve(standardOutput);
            });
        });
    }
    static createAxiosInstanceWithToken(accessToken) {
        const axiosInstance = axios_1.default.create({
            headers: {
                authorization: `Bearer ${accessToken}`,
            },
        });
        return axiosInstance;
    }
}
exports.Utils = Utils;
async function sleep(ms) {
    await new Promise((resolve) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
//# sourceMappingURL=utils.js.map