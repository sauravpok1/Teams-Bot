"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.getQuestionsForInit = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = tslib_1.__importDefault(require("typedi"));
const question_1 = require("../fx-solution/question");
const constants_1 = require("../fx-solution/v3/constants");
const questions_1 = require("./questions");
async function getQuestionsForInit(ctx, inputs) {
    const node = new teamsfx_api_1.QTreeNode({
        name: "set-spfx-solution",
        type: "func",
        func: (inputs) => {
            inputs[questions_1.TeamsSPFxSolutionQuestions.Solution] = constants_1.BuiltInSolutionNames.spfx;
        },
    });
    node.condition = { contains: question_1.TabSPFxItem.id };
    const plugins = getAllScaffoldPlugins();
    for (const plugin of plugins) {
        if (plugin.getQuestionsForScaffold) {
            const pluginQuestionsRes = await plugin.getQuestionsForScaffold(ctx, inputs);
            if (pluginQuestionsRes.isOk()) {
                const pluginNode = pluginQuestionsRes.value;
                if (pluginNode) {
                    node.addChild(pluginNode);
                }
            }
        }
    }
    return teamsfx_api_1.ok(node);
}
exports.getQuestionsForInit = getQuestionsForInit;
async function init(ctx, inputs) {
    const solutionSettings = {
        version: "3.0.0",
        name: ctx.projectSetting.solutionSettings.name,
        capabilities: ["tab"],
        hostType: question_1.HostTypeOptionSPFx.id,
        modules: [],
        activeResourcePlugins: [],
    };
    ctx.projectSetting.solutionSettings = solutionSettings;
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.init = init;
function getAllScaffoldPlugins() {
    return [typedi_1.default.get(constants_1.BuiltInScaffoldPluginNames.spfx)];
}
//# sourceMappingURL=init.js.map