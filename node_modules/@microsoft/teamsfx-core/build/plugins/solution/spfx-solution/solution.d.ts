import { FxError, Inputs, Json, Result, v2, v3, AppStudioTokenProvider, Void, QTreeNode, OptionItem } from "@microsoft/teamsfx-api";
export declare class TeamsSPFxSolution implements v3.ISolution {
    name: string;
    displayName: string;
    init: (ctx: v2.Context, inputs: v2.InputsWithProjectPath) => Promise<Result<Void, FxError>>;
    getQuestionsForInit?: (ctx: v2.Context, inputs: Inputs) => Promise<Result<QTreeNode | undefined, FxError>>;
    scaffold: (ctx: v2.Context, inputs: v2.InputsWithProjectPath & {
        module?: string;
        template?: OptionItem;
    }) => Promise<Result<Void, FxError>>;
    getQuestionsForScaffold?: (ctx: v2.Context, inputs: v2.InputsWithProjectPath) => Promise<Result<QTreeNode | undefined, FxError>>;
    generateResourceTemplate: (ctx: v2.Context, inputs: Inputs) => Promise<Result<Json, FxError>>;
    publishApplication: (ctx: v2.Context, inputs: Inputs, envInfo: v2.EnvInfoV2, tokenProvider: AppStudioTokenProvider) => Promise<Result<Void, FxError>>;
    addResource: (ctx: v2.Context, inputs: v2.InputsWithProjectPath & {
        module?: string;
        resource?: string;
    }) => Promise<Result<Void, FxError>>;
    addModule: (ctx: v2.Context, localSettings: Json, inputs: v2.InputsWithProjectPath & {
        capabilities?: string[];
    }) => Promise<Result<Void, FxError>>;
}
//# sourceMappingURL=solution.d.ts.map