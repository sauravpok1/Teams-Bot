"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectResourceQuestion = exports.selectScaffoldTemplateQuestion = exports.selectCapabilitiesQuestion = exports.createSelectModulesToDeployQuestionNode = exports.createSelectModuleQuestionNode = exports.selectMultiModulesQuestion = exports.selectSingleModuleQuestion = exports.SolutionV3QuestionNames = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const question_1 = require("../fx-solution/question");
var SolutionV3QuestionNames;
(function (SolutionV3QuestionNames) {
    SolutionV3QuestionNames["scaffoldTemplate"] = "template";
    SolutionV3QuestionNames["capabilities"] = "capabilities";
    SolutionV3QuestionNames["resource"] = "resource";
    SolutionV3QuestionNames["module"] = "module";
    SolutionV3QuestionNames["modules"] = "modules";
})(SolutionV3QuestionNames = exports.SolutionV3QuestionNames || (exports.SolutionV3QuestionNames = {}));
exports.selectSingleModuleQuestion = {
    name: SolutionV3QuestionNames.module,
    title: "Select a module",
    type: "singleSelect",
    staticOptions: [],
};
exports.selectMultiModulesQuestion = {
    name: SolutionV3QuestionNames.modules,
    title: "Select modules to deploy",
    type: "multiSelect",
    staticOptions: [],
};
function createSelectModuleQuestionNode(modules) {
    const moduleNode = new teamsfx_api_1.QTreeNode(exports.selectSingleModuleQuestion);
    const moduleOptions = [];
    let i = 0;
    for (const module of modules) {
        const option = {
            id: `${i++}`,
            label: JSON.stringify(module),
        };
        moduleOptions.push(option);
    }
    moduleOptions.push({ id: "none", label: "none" });
    exports.selectSingleModuleQuestion.staticOptions = moduleOptions;
    return moduleNode;
}
exports.createSelectModuleQuestionNode = createSelectModuleQuestionNode;
function createSelectModulesToDeployQuestionNode(modules) {
    const moduleNode = new teamsfx_api_1.QTreeNode(exports.selectMultiModulesQuestion);
    const moduleOptions = [];
    let i = 0;
    for (const module of modules) {
        if (module.hostingPlugin) {
            const plugin = typedi_1.Container.get(module.hostingPlugin);
            if (plugin.deploy) {
                const option = {
                    id: `${i++}`,
                    label: JSON.stringify(module),
                };
                moduleOptions.push(option);
            }
        }
    }
    exports.selectMultiModulesQuestion.staticOptions = moduleOptions;
    return moduleNode;
}
exports.createSelectModulesToDeployQuestionNode = createSelectModulesToDeployQuestionNode;
exports.selectCapabilitiesQuestion = {
    name: SolutionV3QuestionNames.capabilities,
    title: "Select capabilities",
    type: "multiSelect",
    staticOptions: [question_1.TabOptionItem, question_1.BotOptionItem, question_1.MessageExtensionItem],
    default: [question_1.TabOptionItem.id],
    skipSingleOption: true,
};
exports.selectScaffoldTemplateQuestion = {
    name: SolutionV3QuestionNames.scaffoldTemplate,
    title: "Select a scaffold template",
    type: "singleSelect",
    staticOptions: [],
    returnObject: true,
};
exports.selectResourceQuestion = {
    name: SolutionV3QuestionNames.resource,
    title: "Select a resources",
    type: "singleSelect",
    staticOptions: [],
};
//# sourceMappingURL=questions.js.map