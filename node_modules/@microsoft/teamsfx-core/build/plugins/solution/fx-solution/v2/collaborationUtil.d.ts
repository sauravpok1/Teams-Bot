import { SolutionContext, v2, TokenProvider, GraphTokenProvider, Result, FxError, SolutionConfig, Err, Json } from "@microsoft/teamsfx-api";
import { Context } from "@microsoft/teamsfx-api/build/v2/types";
import { CollaborationStateResult, ResourcePermission } from "../../../../common";
import { IUserList } from "../../../resource/appstudio/interfaces/IAppDefinition";
export declare type CollabApiParam = {
    apiVersion: 1;
    ctx: SolutionContext;
} | {
    apiVersion: 2;
    ctx: v2.Context;
    inputs: v2.InputsWithProjectPath;
    envInfo: v2.DeepReadonly<v2.EnvInfoV2>;
    tokenProvider: TokenProvider;
};
export declare class CollaborationUtil {
    static getCurrentUserInfo(graphTokenProvider?: GraphTokenProvider): Promise<Result<IUserList, FxError>>;
    static getUserInfo(graphTokenProvider?: GraphTokenProvider, email?: string): Promise<IUserList | undefined>;
    static checkWetherProvisionSucceeded(solutionConfig: SolutionConfig): boolean;
    static getCurrentCollaborationState(envState: Map<string, any>, user: IUserList): CollaborationStateResult;
    private static getProjectSettings;
    static isSpfxProject(ctx: SolutionContext | Context): boolean;
    static AadResourcePluginsActivated(ctx: SolutionContext | Context): boolean;
    static collectPermissionsAndErrors(executionResult: v2.FxResult<{
        name: string;
        result: Json;
    }[], FxError>): [ResourcePermission[], Err<any, FxError>[]];
}
//# sourceMappingURL=collaborationUtil.d.ts.map