"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishApplication = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const util = tslib_1.__importStar(require("util"));
const constants_1 = require("../../../../common/constants");
const tools_1 = require("../../../../common/tools");
const constants_2 = require("../constants");
const executor_1 = require("./executor");
const utils_1 = require("./utils");
async function publishApplication(ctx, inputs, envInfo, tokenProvider) {
    var _a;
    const inAzureProject = utils_1.isAzureProject(utils_1.getAzureSolutionSettings(ctx));
    const provisioned = envInfo.state[constants_2.GLOBAL_CONFIG]["output"][constants_2.SOLUTION_PROVISION_SUCCEEDED];
    if (inAzureProject && !provisioned) {
        return teamsfx_api_1.err(teamsfx_api_1.returnUserError(new Error(util.format(tools_1.getStrings().solution.NotProvisionedNotice, ctx.projectSetting.appName)), constants_2.SolutionSource, constants_2.SolutionError.CannotDeployBeforeProvision));
    }
    const plugins = utils_1.getSelectedPlugins(utils_1.getAzureSolutionSettings(ctx));
    const thunks = plugins
        .filter((plugin) => !lodash_1.isUndefined(plugin.publishApplication))
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "publishApplication",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            thunk: () => plugin.publishApplication(ctx, inputs, envInfo, tokenProvider),
        };
    });
    ctx.logProvider.info(util.format(tools_1.getStrings().solution.PublishStartNotice, constants_1.PluginDisplayName.Solution));
    const result = await executor_1.executeConcurrently(thunks, ctx.logProvider);
    if (result.kind !== "success") {
        const msg = util.format(tools_1.getStrings().solution.PublishFailNotice, ctx.projectSetting.appName);
        (_a = ctx.logProvider) === null || _a === void 0 ? void 0 : _a.info(msg);
        return teamsfx_api_1.err(result.error);
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.publishApplication = publishApplication;
//# sourceMappingURL=publish.js.map