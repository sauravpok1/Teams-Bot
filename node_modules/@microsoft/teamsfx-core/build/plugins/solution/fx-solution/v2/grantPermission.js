"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.grantPermission = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const common_1 = require("../../../../common");
const constants_1 = require("../constants");
const util_1 = require("../utils/util");
const executor_1 = require("../executor");
const ResourcePluginContainer_1 = require("../ResourcePluginContainer");
const utils4v2_1 = require("../../../resource/utils4v2");
const executor_2 = require("./executor");
const collaborationUtil_1 = require("./collaborationUtil");
const utils_1 = require("./utils");
const __1 = require("..");
async function grantPermissionImpl(param, envState, envName, telemetryReporter, ui, graphTokenProvider, logProvider, platform, email) {
    var _a, _b;
    telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.GrantPermissionStart, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
    });
    const progressBar = ui === null || ui === void 0 ? void 0 : ui.createProgressBar("Granting permission", 1);
    try {
        const result = await collaborationUtil_1.CollaborationUtil.getCurrentUserInfo(graphTokenProvider);
        if (result.isErr()) {
            return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.GrantPermission, result.error, telemetryReporter));
        }
        const stateResult = collaborationUtil_1.CollaborationUtil.getCurrentCollaborationState(envState, result.value);
        if (stateResult.state != common_1.CollaborationState.OK) {
            if (platform === teamsfx_api_1.Platform.CLI) {
                ui === null || ui === void 0 ? void 0 : ui.showMessage("warn", stateResult.message, false);
            }
            else if (platform === teamsfx_api_1.Platform.VSCode) {
                logProvider === null || logProvider === void 0 ? void 0 : logProvider.warning(stateResult.message);
            }
            return teamsfx_api_1.ok({
                state: stateResult.state,
                message: stateResult.message,
            });
        }
        if (!email || email === result.value.userPrincipalName) {
            return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.GrantPermission, teamsfx_api_1.returnUserError(new Error("Collaborator's email cannot be null or same as current user"), constants_1.SolutionSource, constants_1.SolutionError.EmailCannotBeEmptyOrSame), telemetryReporter));
        }
        const userInfo = await collaborationUtil_1.CollaborationUtil.getUserInfo(graphTokenProvider, email);
        if (!userInfo) {
            return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.GrantPermission, teamsfx_api_1.returnUserError(new Error("Cannot find user in current tenant, please check whether your email address is correct"), constants_1.SolutionSource, constants_1.SolutionError.CannotFindUserInCurrentTenant), telemetryReporter));
        }
        progressBar === null || progressBar === void 0 ? void 0 : progressBar.start();
        progressBar === null || progressBar === void 0 ? void 0 : progressBar.next(`Grant permission for user ${email}`);
        if (platform === teamsfx_api_1.Platform.CLI) {
            const aadAppTenantId = (_a = envState.get(constants_1.PluginNames.SOLUTION)) === null || _a === void 0 ? void 0 : _a.get(__1.REMOTE_TEAMS_APP_TENANT_ID);
            if (!envName) {
                return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.GrantPermission, teamsfx_api_1.returnSystemError(new Error("Failed to get env name."), constants_1.SolutionSource, constants_1.SolutionError.FailedToGetEnvName), telemetryReporter));
            }
            const message = [
                { content: `Account to grant permission: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                { content: userInfo.userPrincipalName + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                {
                    content: `Starting grant permission for environment: `,
                    color: teamsfx_api_1.Colors.BRIGHT_WHITE,
                },
                { content: `${envName}\n`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                { content: `Tenant ID: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                { content: aadAppTenantId + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            ];
            ui === null || ui === void 0 ? void 0 : ui.showMessage("info", message, false);
        }
        const [permissions, errors] = param.apiVersion === 1
            ? await executeGrantPermissionsV1(param.ctx, userInfo)
            : await executeGrantPermissionsV2(param.ctx, param.inputs, param.envInfo, param.tokenProvider, userInfo);
        let errorMsg = "";
        if (errors.length > 0) {
            errorMsg += `Failed to grant permission for the below resources to user: ${email}.\n Resource details: \n`;
            for (const fxError of errors) {
                errorMsg += fxError.error.message + "\n";
            }
        }
        if (platform === teamsfx_api_1.Platform.CLI) {
            for (const permission of permissions) {
                const message = [
                    { content: `${(_b = permission.roles) === null || _b === void 0 ? void 0 : _b.join(",")} `, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                    { content: "permission has been granted to ", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                    { content: permission.name, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                    { content: ", Resource ID: ", color: teamsfx_api_1.Colors.BRIGHT_WHITE },
                    { content: `${permission.resourceId}`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
                ];
                ui === null || ui === void 0 ? void 0 : ui.showMessage("info", message, false);
            }
            if (collaborationUtil_1.CollaborationUtil.isSpfxProject(param.ctx)) {
                ui === null || ui === void 0 ? void 0 : ui.showMessage("info", `\nIf added user is not a SharePoint App Catalog site admin, you need to handle that via SharePoint admin center, please refer to this link for more details: https://docs.microsoft.com/en-us/sharepoint/manage-site-collection-administrators`, false);
            }
            else {
                ui === null || ui === void 0 ? void 0 : ui.showMessage("info", `\nIf added user cannot access Azure resources, you need to handle that via Azure portal,  please refer to this link for more details: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal?tabs=current`, false);
            }
            if (errorMsg) {
                ui === null || ui === void 0 ? void 0 : ui.showMessage("error", errorMsg, false);
            }
        }
        if (errorMsg) {
            return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.GrantPermission, teamsfx_api_1.returnUserError(new Error(errorMsg), constants_1.SolutionSource, constants_1.SolutionError.FailedToGrantPermission), telemetryReporter));
        }
        telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.GrantPermission, {
            [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
            [constants_1.SolutionTelemetryProperty.Success]: constants_1.SolutionTelemetrySuccess.Yes,
        });
        return teamsfx_api_1.ok({
            state: common_1.CollaborationState.OK,
            userInfo: userInfo,
            permissions,
        });
    }
    finally {
        await (progressBar === null || progressBar === void 0 ? void 0 : progressBar.end(true));
    }
}
async function grantPermission(param) {
    var _a, _b, _c, _d;
    if (param.apiVersion === 1) {
        const envState = param.ctx.envInfo.state;
        const envName = param.ctx.envInfo.envName;
        const telemetryReporter = param.ctx.telemetryReporter;
        const ui = param.ctx.ui;
        const graphTokenProvider = param.ctx.graphTokenProvider;
        const logProvider = param.ctx.logProvider;
        const platform = (_a = param.ctx.answers) === null || _a === void 0 ? void 0 : _a.platform;
        const email = (_b = param.ctx.answers) === null || _b === void 0 ? void 0 : _b.email;
        return grantPermissionImpl(param, envState, envName, telemetryReporter, ui, graphTokenProvider, logProvider, platform, email);
    }
    else {
        const configMap = teamsfx_api_1.ConfigMap.fromJSON(param.envInfo.state);
        if (!configMap) {
            return teamsfx_api_1.err(teamsfx_api_1.returnSystemError(new Error(`failed to convert profile ${JSON.stringify(param.envInfo.state)}`), constants_1.PluginNames.SOLUTION, constants_1.SolutionError.InternelError));
        }
        const envState = utils4v2_1.flattenConfigMap(configMap);
        const envName = param.envInfo.envName;
        const telemetryReporter = param.ctx.telemetryReporter;
        const ui = param.ctx.userInteraction;
        const graphTokenProvider = param.tokenProvider.graphTokenProvider;
        const logProvider = param.ctx.logProvider;
        const platform = (_c = param.inputs) === null || _c === void 0 ? void 0 : _c.platform;
        const email = (_d = param.inputs) === null || _d === void 0 ? void 0 : _d.email;
        return grantPermissionImpl(param, envState, envName, telemetryReporter, ui, graphTokenProvider, logProvider, platform, email);
    }
}
exports.grantPermission = grantPermission;
// Execute plugins' grantPermission() using legacy API
async function executeGrantPermissionsV1(ctx, userInfo) {
    var _a;
    const plugins = ResourcePluginContainer_1.getActivatedResourcePlugins((_a = ctx.projectSettings) === null || _a === void 0 ? void 0 : _a.solutionSettings);
    const pluginsWithCtx = utils_1.getPluginAndContextArray(ctx, plugins);
    const grantPermissionWithCtx = pluginsWithCtx.map(([plugin, context]) => {
        return [
            (plugin === null || plugin === void 0 ? void 0 : plugin.grantPermission)
                ? (ctx) => plugin.grantPermission.bind(plugin)(ctx, userInfo)
                : undefined,
            context,
            plugin.name,
        ];
    });
    const results = await executor_1.executeConcurrently("", grantPermissionWithCtx);
    const permissions = [];
    const errors = [];
    for (const result of results) {
        if (result.isErr()) {
            errors.push(result);
            continue;
        }
        if (result && result.value) {
            for (const res of result.value) {
                permissions.push(res);
            }
        }
    }
    return [permissions, errors];
}
// Execute plugins' grantPermission() using v2 API
async function executeGrantPermissionsV2(ctx, inputs, envInfo, tokenProvider, userInfo) {
    var _a;
    const plugins = ResourcePluginContainer_1.getActivatedV2ResourcePlugins((_a = ctx.projectSetting) === null || _a === void 0 ? void 0 : _a.solutionSettings);
    const thunks = plugins
        .filter((plugin) => !!plugin.grantPermission)
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "grantPermission",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            thunk: () => plugin.grantPermission(ctx, inputs, envInfo, tokenProvider, userInfo),
        };
    });
    const results = await executor_2.executeConcurrently(thunks, ctx.logProvider);
    return collaborationUtil_1.CollaborationUtil.collectPermissionsAndErrors(results);
}
//# sourceMappingURL=grantPermission.js.map