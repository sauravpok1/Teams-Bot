"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scaffoldReadme = exports.scaffoldByPlugins = exports.scaffoldSourceCode = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../../../common/tools");
const question_1 = require("../question");
const executor_1 = require("./executor");
const utils_1 = require("./utils");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const __1 = require("../../../..");
const ResourcePluginContainer_1 = require("../ResourcePluginContainer");
const typedi_1 = require("typedi");
const scaffolding_1 = require("../debug/scaffolding");
async function scaffoldSourceCode(ctx, inputs) {
    var _a, _b, _c;
    if (inputs.projectPath === undefined) {
        return teamsfx_api_1.err(teamsfx_api_1.returnSystemError(new Error("projectPath is undefined"), "Solution", __1.SolutionError.InternelError));
    }
    const lang = inputs[question_1.AzureSolutionQuestionNames.ProgrammingLanguage];
    if (lang) {
        ctx.projectSetting.programmingLanguage = lang;
    }
    const solutionSettings = utils_1.getAzureSolutionSettings(ctx);
    const fillinRes = utils_1.fillInSolutionSettings(solutionSettings, inputs);
    if (fillinRes.isErr())
        return teamsfx_api_1.err(fillinRes.error);
    const plugins = utils_1.getSelectedPlugins(solutionSettings);
    let thunks = plugins
        .filter((plugin) => !!plugin.scaffoldSourceCode)
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "scaffoldSourceCode",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            thunk: () => plugin.scaffoldSourceCode(ctx, inputs),
        };
    });
    ///SPFx plugin will be executed last, so remove it from the thunks.
    const SPFxPlugin = typedi_1.Container.get(ResourcePluginContainer_1.ResourcePluginsV2.SpfxPlugin);
    if (thunks.map((p) => p.pluginName === SPFxPlugin.name).length > 0) {
        thunks = thunks.filter((p) => p.pluginName !== SPFxPlugin.name);
    }
    const result = await executor_1.executeConcurrently(thunks, ctx.logProvider);
    if (result.kind === "success") {
        const capabilities = solutionSettings.capabilities;
        const azureResources = solutionSettings.azureResources;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const scaffoldLocalDebugSettingsResult = await scaffolding_1.scaffoldLocalDebugSettings(ctx, inputs);
        if (scaffoldLocalDebugSettingsResult.isErr()) {
            return scaffoldLocalDebugSettingsResult;
        }
        await scaffoldReadme(capabilities, azureResources, inputs.projectPath);
        if (utils_1.isAzureProject(solutionSettings)) {
            await fs_extra_1.default.writeJSON(`${inputs.projectPath}/permissions.json`, __1.DEFAULT_PERMISSION_REQUEST, {
                spaces: 4,
            });
            (_a = ctx.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(__1.SolutionTelemetryEvent.Create, {
                [__1.SolutionTelemetryProperty.Component]: __1.SolutionTelemetryComponentName,
                [__1.SolutionTelemetryProperty.Success]: __1.SolutionTelemetrySuccess.Yes,
                [__1.SolutionTelemetryProperty.Resources]: solutionSettings.azureResources.join(";"),
                [__1.SolutionTelemetryProperty.Capabilities]: solutionSettings.capabilities.join(";"),
                [__1.SolutionTelemetryProperty.ProgrammingLanguage]: (_c = (_b = ctx.projectSetting) === null || _b === void 0 ? void 0 : _b.programmingLanguage) !== null && _c !== void 0 ? _c : "",
            });
        }
        else {
            //For SPFx plugin, execute it alone lastly
            if (SPFxPlugin.scaffoldSourceCode) {
                const spfxRes = await SPFxPlugin.scaffoldSourceCode(ctx, inputs);
                if (spfxRes.isErr()) {
                    return teamsfx_api_1.err(spfxRes.error);
                }
            }
        }
        ctx.userInteraction.showMessage("info", `Success: ${tools_1.getStrings().solution.ScaffoldSuccessNotice}`, false);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    else {
        return teamsfx_api_1.err(result.error);
    }
}
exports.scaffoldSourceCode = scaffoldSourceCode;
async function scaffoldByPlugins(ctx, inputs, localSettings, plugins) {
    const thunks = plugins
        .filter((plugin) => !!plugin.scaffoldSourceCode)
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "scaffoldSourceCode",
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            thunk: () => plugin.scaffoldSourceCode(ctx, inputs),
        };
    });
    const result = await executor_1.executeConcurrently(thunks, ctx.logProvider);
    const solutionSettings = utils_1.getAzureSolutionSettings(ctx);
    if (result.kind === "success") {
        const capabilities = solutionSettings.capabilities;
        const azureResources = solutionSettings.azureResources;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        await scaffoldReadme(capabilities, azureResources, inputs.projectPath);
        ctx.userInteraction.showMessage("info", `Success: ${tools_1.getStrings().solution.ScaffoldSuccessNotice}`, false);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
    else {
        return teamsfx_api_1.err(result.error);
    }
}
exports.scaffoldByPlugins = scaffoldByPlugins;
async function scaffoldReadme(capabilities, azureResources, projectPath, migrateFromV1) {
    capabilities = capabilities || [];
    azureResources = azureResources || [];
    const hasBot = capabilities.includes(question_1.BotOptionItem.id);
    const hasMsgExt = capabilities.includes(question_1.MessageExtensionItem.id);
    const hasTab = capabilities.includes(question_1.TabOptionItem.id);
    if (hasTab && (hasBot || hasMsgExt)) {
        const readme = path_1.default.join(__1.getTemplatesFolder(), "plugins", "solution", "README.md");
        if (await fs_extra_1.default.pathExists(readme)) {
            await fs_extra_1.default.copy(readme, `${projectPath}/${teamsfx_api_1.AutoGeneratedReadme}`);
        }
    }
    if (migrateFromV1) {
        const readme = path_1.default.join(__1.getTemplatesFolder(), "plugins", "solution", "v1", "README.md");
        if (await fs_extra_1.default.pathExists(readme)) {
            await fs_extra_1.default.copy(readme, `${projectPath}/${teamsfx_api_1.AutoGeneratedReadme}`);
        }
    }
}
exports.scaffoldReadme = scaffoldReadme;
//# sourceMappingURL=scaffolding.js.map