"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResourceTemplateForPlugins = exports.generateResourceTemplate = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../../../common/tools");
const arm_1 = require("../arm");
const adaptor_1 = require("./adaptor");
const utils_1 = require("./utils");
async function generateResourceTemplate(ctx, inputs) {
    if (!tools_1.isArmSupportEnabled()) {
        return teamsfx_api_1.ok({});
    }
    const legacyContext = new adaptor_1.ScaffoldingContextAdapter([ctx, inputs]);
    const azureSolutionSettings = utils_1.getAzureSolutionSettings(ctx);
    const plugins = utils_1.getSelectedPlugins(azureSolutionSettings).map((plugin) => new adaptor_1.NamedArmResourcePluginAdaptor(plugin));
    const armResult = await arm_1.generateArmTemplate(legacyContext, plugins);
    return armResult;
}
exports.generateResourceTemplate = generateResourceTemplate;
async function generateResourceTemplateForPlugins(ctx, inputs, plugins) {
    if (!tools_1.isArmSupportEnabled()) {
        return teamsfx_api_1.ok({});
    }
    const legacyContext = new adaptor_1.ScaffoldingContextAdapter([ctx, inputs]);
    // todo(yefuwang): replace generateArmTemplate when v2 implementation is ready.
    const namedArmResourcePlugins = plugins.map((plugin) => new adaptor_1.NamedArmResourcePluginAdaptor(plugin));
    const armResult = await arm_1.generateArmTemplate(legacyContext, namedArmResourcePlugins);
    return armResult;
}
exports.generateResourceTemplateForPlugins = generateResourceTemplateForPlugins;
//# sourceMappingURL=generateResourceTemplate.js.map