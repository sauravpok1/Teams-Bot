"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listCollaborator = exports.executeListCollaboratorV1 = exports.executeListCollaboratorV2 = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const common_1 = require("../../../../common");
const constants_1 = require("../constants");
const util_1 = require("../utils/util");
const executor_1 = require("../executor");
const ResourcePluginContainer_1 = require("../ResourcePluginContainer");
const executor_2 = require("./executor");
const collaborationUtil_1 = require("./collaborationUtil");
const utils_1 = require("./utils");
const typedi_1 = require("typedi");
const utils4v2_1 = require("../../../resource/utils4v2");
const __1 = require("..");
async function executeListCollaboratorV2(ctx, inputs, envInfo, tokenProvider, userInfo) {
    const plugins = [
        typedi_1.Container.get(ResourcePluginContainer_1.ResourcePluginsV2.AppStudioPlugin),
    ];
    if (collaborationUtil_1.CollaborationUtil.AadResourcePluginsActivated(ctx)) {
        plugins.push(typedi_1.Container.get(ResourcePluginContainer_1.ResourcePluginsV2.AadPlugin));
    }
    const thunks = plugins
        .filter((plugin) => !!plugin.listCollaborator)
        .map((plugin) => {
        return {
            pluginName: `${plugin.name}`,
            taskName: "listCollaborator",
            thunk: () => 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            plugin.listCollaborator(ctx, inputs, envInfo, tokenProvider, userInfo),
        };
    });
    const results = await executor_2.executeThunks(thunks, ctx.logProvider);
    const errors = [];
    for (const r of results) {
        if (r.isErr()) {
            errors.push(r);
        }
    }
    return [results, errors];
}
exports.executeListCollaboratorV2 = executeListCollaboratorV2;
async function executeListCollaboratorV1(ctx, userInfo) {
    const plugins = [typedi_1.Container.get(ResourcePluginContainer_1.ResourcePlugins.AppStudioPlugin)];
    if (collaborationUtil_1.CollaborationUtil.AadResourcePluginsActivated(ctx)) {
        plugins.push(typedi_1.Container.get(ResourcePluginContainer_1.ResourcePlugins.AadPlugin));
    }
    const pluginsWithCtx = utils_1.getPluginAndContextArray(ctx, plugins);
    const listCollaboratorWithCtx = pluginsWithCtx.map(([plugin, context]) => {
        return [
            (plugin === null || plugin === void 0 ? void 0 : plugin.listCollaborator)
                ? (ctx) => plugin.listCollaborator.bind(plugin)(ctx, userInfo)
                : undefined,
            context,
            plugin.name,
        ];
    });
    const results = await executor_1.executeConcurrently("", listCollaboratorWithCtx);
    const errors = [];
    for (const result of results) {
        if (result.isErr()) {
            errors.push(result);
        }
    }
    return [results, errors];
}
exports.executeListCollaboratorV1 = executeListCollaboratorV1;
async function listCollaboratorImpl(param, envState, envName, telemetryReporter, ui, graphTokenProvider, logProvider, platform) {
    var _a, _b, _c, _d, _e, _f, _g;
    telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.ListCollaboratorStart, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
    });
    const result = await collaborationUtil_1.CollaborationUtil.getCurrentUserInfo(graphTokenProvider);
    if (result.isErr()) {
        return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.ListCollaborator, result.error, telemetryReporter));
    }
    const stateResult = collaborationUtil_1.CollaborationUtil.getCurrentCollaborationState(envState, result.value);
    if (stateResult.state != common_1.CollaborationState.OK) {
        if (platform === teamsfx_api_1.Platform.CLI) {
            ui === null || ui === void 0 ? void 0 : ui.showMessage("warn", stateResult.message, false);
        }
        else if (platform === teamsfx_api_1.Platform.VSCode) {
            logProvider === null || logProvider === void 0 ? void 0 : logProvider.warning(stateResult.message);
        }
        return teamsfx_api_1.ok({
            state: stateResult.state,
            message: stateResult.message,
        });
    }
    const userInfo = result.value;
    if (!envName) {
        return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.ListCollaborator, teamsfx_api_1.returnSystemError(new Error("Failed to get env name."), constants_1.SolutionSource, constants_1.SolutionError.FailedToGetEnvName), telemetryReporter));
    }
    const [results, errors] = param.apiVersion === 1
        ? await executeListCollaboratorV1(param.ctx, userInfo)
        : await executeListCollaboratorV2(param.ctx, param.inputs, param.envInfo, param.tokenProvider, userInfo);
    let errorMsg = "";
    if (errors.length > 0) {
        errorMsg += `Failed to list collaborator for the project.\n Error details: \n`;
        for (const fxError of errors) {
            errorMsg += fxError.error.message + "\n";
        }
    }
    if (errorMsg) {
        return teamsfx_api_1.err(util_1.sendErrorTelemetryThenReturnError(constants_1.SolutionTelemetryEvent.ListCollaborator, teamsfx_api_1.returnUserError(new Error(errorMsg), constants_1.SolutionSource, constants_1.SolutionError.FailedToListCollaborator), telemetryReporter));
    }
    const isAadActivated = collaborationUtil_1.CollaborationUtil.AadResourcePluginsActivated(param.ctx);
    const teamsAppOwners = results[0].isErr() ? [] : results[0].value;
    const aadOwners = (results[1] && results[1].isErr()) || !results[1] ? [] : results[1].value;
    const collaborators = [];
    const teamsAppId = (_b = (_a = teamsAppOwners[0]) === null || _a === void 0 ? void 0 : _a.resourceId) !== null && _b !== void 0 ? _b : "";
    const aadAppId = (_d = (_c = aadOwners[0]) === null || _c === void 0 ? void 0 : _c.resourceId) !== null && _d !== void 0 ? _d : "";
    const aadAppTenantId = (_e = envState.get(constants_1.PluginNames.SOLUTION)) === null || _e === void 0 ? void 0 : _e.get(__1.REMOTE_TEAMS_APP_TENANT_ID);
    for (const teamsAppOwner of teamsAppOwners) {
        const aadOwner = aadOwners.find((owner) => owner.userObjectId === teamsAppOwner.userObjectId);
        collaborators.push({
            // For guest account, aadOwner.userPrincipalName will be user's email, and is easy to read.
            userPrincipalName: (_g = (_f = aadOwner === null || aadOwner === void 0 ? void 0 : aadOwner.userPrincipalName) !== null && _f !== void 0 ? _f : teamsAppOwner.userPrincipalName) !== null && _g !== void 0 ? _g : teamsAppOwner.userObjectId,
            userObjectId: teamsAppOwner.userObjectId,
            isAadOwner: aadOwner ? true : false,
            aadResourceId: aadOwner ? aadOwner.resourceId : undefined,
            teamsAppResourceId: teamsAppOwner.resourceId,
        });
    }
    if (platform === teamsfx_api_1.Platform.CLI || platform === teamsfx_api_1.Platform.VSCode) {
        const message = [
            { content: `Listing M365 permissions\n`, color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: `Account used to check: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: userInfo.userPrincipalName + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            {
                content: `Starting list all teams app owners for environment: `,
                color: teamsfx_api_1.Colors.BRIGHT_WHITE,
            },
            { content: `${envName}\n`, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            { content: `Tenant ID: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: aadAppTenantId + "\n", color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
            { content: `M365 Teams App (ID: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE },
            { content: teamsAppId, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA },
        ];
        if (isAadActivated) {
            message.push({ content: `), SSO AAD App (ID: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE }, { content: aadAppId, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA }, { content: `)\n`, color: teamsfx_api_1.Colors.BRIGHT_WHITE });
        }
        else {
            message.push({ content: ")\n", color: teamsfx_api_1.Colors.BRIGHT_WHITE });
        }
        for (const collaborator of collaborators) {
            message.push({ content: `Teams App Owner: `, color: teamsfx_api_1.Colors.BRIGHT_WHITE }, { content: collaborator.userPrincipalName, color: teamsfx_api_1.Colors.BRIGHT_MAGENTA }, { content: `. `, color: teamsfx_api_1.Colors.BRIGHT_WHITE });
            if (isAadActivated && !collaborator.isAadOwner) {
                message.push({ content: `(Not owner of SSO AAD app)`, color: teamsfx_api_1.Colors.BRIGHT_YELLOW });
            }
            message.push({ content: "\n", color: teamsfx_api_1.Colors.BRIGHT_WHITE });
        }
        if (platform === teamsfx_api_1.Platform.CLI) {
            ui === null || ui === void 0 ? void 0 : ui.showMessage("info", message, false);
        }
        else if (platform === teamsfx_api_1.Platform.VSCode) {
            logProvider === null || logProvider === void 0 ? void 0 : logProvider.info(message);
        }
    }
    const aadOwnerCount = collaborators.filter((collaborator) => collaborator.aadResourceId && collaborator.isAadOwner).length;
    telemetryReporter === null || telemetryReporter === void 0 ? void 0 : telemetryReporter.sendTelemetryEvent(constants_1.SolutionTelemetryEvent.ListCollaborator, {
        [constants_1.SolutionTelemetryProperty.Component]: constants_1.SolutionTelemetryComponentName,
        [constants_1.SolutionTelemetryProperty.Success]: constants_1.SolutionTelemetrySuccess.Yes,
        [constants_1.SolutionTelemetryProperty.CollaboratorCount]: collaborators.length.toString(),
        [constants_1.SolutionTelemetryProperty.AadOwnerCount]: aadOwnerCount.toString(),
        [constants_1.SolutionTelemetryProperty.Env]: common_1.getHashedEnv(envName),
    });
    return teamsfx_api_1.ok({
        collaborators: collaborators,
        state: common_1.CollaborationState.OK,
    });
}
async function listCollaborator(param) {
    var _a, _b;
    if (param.apiVersion === 1) {
        const envState = param.ctx.envInfo.state;
        const envName = param.ctx.envInfo.envName;
        const telemetryReporter = param.ctx.telemetryReporter;
        const ui = param.ctx.ui;
        const graphTokenProvider = param.ctx.graphTokenProvider;
        const logProvider = param.ctx.logProvider;
        const platform = (_a = param.ctx.answers) === null || _a === void 0 ? void 0 : _a.platform;
        return listCollaboratorImpl(param, envState, envName, telemetryReporter, ui, graphTokenProvider, logProvider, platform);
    }
    else {
        const configMap = teamsfx_api_1.ConfigMap.fromJSON(param.envInfo.state);
        if (!configMap) {
            return teamsfx_api_1.err(teamsfx_api_1.returnSystemError(new Error(`failed to convert profile ${JSON.stringify(param.envInfo.state)}`), constants_1.PluginNames.SOLUTION, constants_1.SolutionError.InternelError));
        }
        const envState = utils4v2_1.flattenConfigMap(configMap);
        const envName = param.envInfo.envName;
        const telemetryReporter = param.ctx.telemetryReporter;
        const ui = param.ctx.userInteraction;
        const graphTokenProvider = param.tokenProvider.graphTokenProvider;
        const logProvider = param.ctx.logProvider;
        const platform = (_b = param.inputs) === null || _b === void 0 ? void 0 : _b.platform;
        return listCollaboratorImpl(param, envState, envName, telemetryReporter, ui, graphTokenProvider, logProvider, platform);
    }
}
exports.listCollaborator = listCollaborator;
//# sourceMappingURL=listCollaborator.js.map