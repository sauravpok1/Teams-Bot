"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendErrorTelemetryThenReturnError = exports.getSubsriptionDisplayName = exports.getPluginContextConstructor = exports.getPluginContext = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const arm_subscriptions_1 = require("@azure/arm-subscriptions");
const constants_1 = require("../constants");
/**
 * A helper function to construct a plugin's context.
 * @param solutionCtx solution context
 * @param pluginIdentifier plugin name
 */
function getPluginContext(solutionCtx, pluginIdentifier) {
    const baseCtx = solutionCtx;
    if (!solutionCtx.envInfo.state.has(pluginIdentifier)) {
        solutionCtx.envInfo.state.set(pluginIdentifier, new teamsfx_api_1.ConfigMap());
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const pluginConfig = solutionCtx.envInfo.state.get(pluginIdentifier);
    const pluginCtx = Object.assign(Object.assign({}, baseCtx), { envInfo: solutionCtx.envInfo, config: pluginConfig });
    return pluginCtx;
}
exports.getPluginContext = getPluginContext;
/**
 * A curry-ed version of getPluginContext
 * @param solutionCtx solution context
 */
function getPluginContextConstructor(solutionCtx) {
    return function (pluginIdentifier) {
        return getPluginContext(solutionCtx, pluginIdentifier);
    };
}
exports.getPluginContextConstructor = getPluginContextConstructor;
async function getSubsriptionDisplayName(azureToken, subscriptionId) {
    const client = new arm_subscriptions_1.SubscriptionClient(azureToken);
    const subscription = await client.subscriptions.get(subscriptionId);
    return subscription.displayName;
}
exports.getSubsriptionDisplayName = getSubsriptionDisplayName;
function sendErrorTelemetryThenReturnError(eventName, error, reporter, properties, measurements, errorProps) {
    if (!properties) {
        properties = {};
    }
    if (constants_1.SolutionTelemetryProperty.Component in properties === false) {
        properties[constants_1.SolutionTelemetryProperty.Component] = constants_1.SolutionTelemetryComponentName;
    }
    properties[constants_1.SolutionTelemetryProperty.Success] = "no";
    if (error instanceof teamsfx_api_1.UserError) {
        properties["error-type"] = "user";
    }
    else {
        properties["error-type"] = "system";
    }
    properties["error-code"] = `${error.source}.${error.name}`;
    properties["error-message"] = error.message;
    reporter === null || reporter === void 0 ? void 0 : reporter.sendTelemetryErrorEvent(eventName, properties, measurements, errorProps);
    return error;
}
exports.sendErrorTelemetryThenReturnError = sendErrorTelemetryThenReturnError;
//# sourceMappingURL=util.js.map