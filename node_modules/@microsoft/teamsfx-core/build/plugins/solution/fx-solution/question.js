"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUserEmailQuestion = exports.AskSubscriptionQuestion = exports.DeployPluginSelectQuestion = exports.addCapabilityQuestion = exports.createAddAzureResourceQuestion = exports.AzureResourcesQuestion = exports.FrontendHostTypeQuestion = exports.createV1CapabilityQuestion = exports.createCapabilityQuestion = exports.AzureResourceKeyVault = exports.AzureResourceApim = exports.AzureResourceFunction = exports.AzureResourceSQL = exports.HostTypeOptionSPFx = exports.HostTypeOptionAzure = exports.AzureSolutionQuestionNames = exports.TabSPFxItem = exports.MessageExtensionItem = exports.BotOptionItem = exports.TabOptionItem = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./constants");
exports.TabOptionItem = {
    id: "Tab",
    label: "Tab",
    cliName: "tab",
    description: "UI-based app",
    detail: "Teams-aware webpages embedded in Microsoft Teams",
};
exports.BotOptionItem = {
    id: "Bot",
    label: "Bot",
    cliName: "bot",
    description: "Conversational Agent",
    detail: "Running simple and repetitive automated tasks through conversations",
};
exports.MessageExtensionItem = {
    id: "MessagingExtension",
    label: "Messaging Extension",
    cliName: "messaging-extension",
    description: "Custom UI when users compose messages in Teams",
    detail: "Inserting app content or acting on a message without leaving the conversation",
};
exports.TabSPFxItem = {
    id: "TabSPFx",
    label: "Tab(SPFx)",
    cliName: "tab-spfx",
    description: "UI-base app with SPFx framework",
    detail: "Teams-aware webpages with SPFx framework embedded in Microsoft Teams",
};
var AzureSolutionQuestionNames;
(function (AzureSolutionQuestionNames) {
    AzureSolutionQuestionNames["Capabilities"] = "capabilities";
    AzureSolutionQuestionNames["V1Capability"] = "v1-capability";
    AzureSolutionQuestionNames["TabScopes"] = "tab-scopes";
    AzureSolutionQuestionNames["HostType"] = "host-type";
    AzureSolutionQuestionNames["AzureResources"] = "azure-resources";
    AzureSolutionQuestionNames["PluginSelectionDeploy"] = "deploy-plugin";
    AzureSolutionQuestionNames["AddResources"] = "add-azure-resources";
    AzureSolutionQuestionNames["AppName"] = "app-name";
    AzureSolutionQuestionNames["AskSub"] = "subscription";
    AzureSolutionQuestionNames["ProgrammingLanguage"] = "programming-language";
    AzureSolutionQuestionNames["Solution"] = "solution";
})(AzureSolutionQuestionNames = exports.AzureSolutionQuestionNames || (exports.AzureSolutionQuestionNames = {}));
exports.HostTypeOptionAzure = {
    id: "Azure",
    label: "Azure",
    cliName: "azure",
};
exports.HostTypeOptionSPFx = {
    id: "SPFx",
    label: "SharePoint Framework (SPFx)",
    cliName: "spfx",
};
exports.AzureResourceSQL = {
    id: "sql",
    label: "Azure SQL Database",
    description: "Azure Function App will be also selected to access Azure SQL Database",
};
exports.AzureResourceFunction = {
    id: "function",
    label: "Azure Function App",
};
exports.AzureResourceApim = {
    id: "apim",
    label: "Register APIs in Azure API Management",
    description: "Azure Function App will be also selected to be published as an API",
};
exports.AzureResourceKeyVault = {
    id: "keyvault",
    label: "Azure Key Vault",
    description: "Secure runtime application secrets with Azure Key Vault",
};
function createCapabilityQuestion() {
    return {
        name: AzureSolutionQuestionNames.Capabilities,
        title: "Select capabilities",
        type: "multiSelect",
        staticOptions: [exports.TabOptionItem, exports.BotOptionItem, exports.MessageExtensionItem, exports.TabSPFxItem],
        default: [exports.TabOptionItem.id],
        placeholder: "Select at least 1 capability",
        validation: {
            validFunc: async (input) => {
                const name = input;
                if (name.length === 0) {
                    return "Select at least 1 capability";
                }
                if (name.length > 1 &&
                    (name.includes(exports.TabSPFxItem.id) || name.includes(exports.TabSPFxItem.label))) {
                    return "Teams Toolkit offers only the Tab capability in a Teams app with Visual Studio Code and SharePoint Framework. The Bot and Messaging extension capabilities are not available";
                }
                return undefined;
            },
        },
        onDidChangeSelection: async function (currentSelectedIds, previousSelectedIds) {
            if (currentSelectedIds.size > 1 && currentSelectedIds.has(exports.TabSPFxItem.id)) {
                if (previousSelectedIds.has(exports.TabSPFxItem.id)) {
                    currentSelectedIds.delete(exports.TabSPFxItem.id);
                }
                else {
                    currentSelectedIds.clear();
                    currentSelectedIds.add(exports.TabSPFxItem.id);
                }
            }
            return currentSelectedIds;
        },
    };
}
exports.createCapabilityQuestion = createCapabilityQuestion;
function createV1CapabilityQuestion() {
    return {
        name: AzureSolutionQuestionNames.V1Capability,
        title: "Select capability",
        type: "singleSelect",
        staticOptions: [exports.TabOptionItem, exports.BotOptionItem, exports.MessageExtensionItem],
        default: exports.TabOptionItem.id,
        placeholder: "Select the same capability as your existing project",
        validation: { minItems: 1 },
    };
}
exports.createV1CapabilityQuestion = createV1CapabilityQuestion;
exports.FrontendHostTypeQuestion = {
    name: AzureSolutionQuestionNames.HostType,
    title: "Frontend hosting type",
    type: "singleSelect",
    staticOptions: [exports.HostTypeOptionAzure, exports.HostTypeOptionSPFx],
    dynamicOptions: (previousAnswers) => {
        const cap = previousAnswers[AzureSolutionQuestionNames.Capabilities];
        if (cap) {
            if (cap.includes(exports.BotOptionItem.id) || cap.includes(exports.MessageExtensionItem.id))
                return [exports.HostTypeOptionAzure];
            if (cap.includes(exports.TabOptionItem.id))
                return [exports.HostTypeOptionAzure, exports.HostTypeOptionSPFx];
            return [];
        }
        throw teamsfx_api_1.returnSystemError(new Error("Capabilities is undefined"), constants_1.SolutionSource, constants_1.SolutionError.InternelError);
    },
    default: exports.HostTypeOptionAzure.id,
    placeholder: "Select a hosting type",
    skipSingleOption: true,
};
exports.AzureResourcesQuestion = {
    name: AzureSolutionQuestionNames.AzureResources,
    title: "Cloud resources",
    type: "multiSelect",
    staticOptions: [exports.AzureResourceSQL, exports.AzureResourceFunction],
    default: [],
    onDidChangeSelection: async function (currentSelectedIds, previousSelectedIds) {
        if (currentSelectedIds.has(exports.AzureResourceSQL.id)) {
            currentSelectedIds.add(exports.AzureResourceFunction.id);
        }
        return currentSelectedIds;
    },
    placeholder: "Select a resource (optional)",
};
function createAddAzureResourceQuestion(alreadyHaveFunction, alreadhHaveSQL, alreadyHaveAPIM, alreadyHavekeyVault) {
    const options = [exports.AzureResourceFunction];
    if (!alreadhHaveSQL)
        options.push(exports.AzureResourceSQL);
    if (!alreadyHaveAPIM)
        options.push(exports.AzureResourceApim);
    if (!alreadyHavekeyVault)
        options.push(exports.AzureResourceKeyVault);
    return {
        name: AzureSolutionQuestionNames.AddResources,
        title: "Cloud resources",
        type: "multiSelect",
        staticOptions: options,
        default: [],
        onDidChangeSelection: async function (currentSelectedIds, previousSelectedIds) {
            const hasSQL = currentSelectedIds.has(exports.AzureResourceSQL.id);
            const hasAPIM = currentSelectedIds.has(exports.AzureResourceApim.id);
            if ((hasSQL || hasAPIM) && !alreadyHaveFunction) {
                currentSelectedIds.add(exports.AzureResourceFunction.id);
            }
            return currentSelectedIds;
        },
    };
}
exports.createAddAzureResourceQuestion = createAddAzureResourceQuestion;
function addCapabilityQuestion(alreadyHaveTab, alreadyHaveBot) {
    const options = [];
    if (!alreadyHaveTab)
        options.push(exports.TabOptionItem);
    if (!alreadyHaveBot) {
        options.push(exports.BotOptionItem);
        options.push(exports.MessageExtensionItem);
    }
    return {
        name: AzureSolutionQuestionNames.Capabilities,
        title: "Choose capabilities",
        type: "multiSelect",
        staticOptions: options,
        default: [],
    };
}
exports.addCapabilityQuestion = addCapabilityQuestion;
exports.DeployPluginSelectQuestion = {
    name: AzureSolutionQuestionNames.PluginSelectionDeploy,
    title: `Select resources`,
    type: "multiSelect",
    skipSingleOption: true,
    staticOptions: [],
    default: [],
};
exports.AskSubscriptionQuestion = {
    name: AzureSolutionQuestionNames.AskSub,
    type: "func",
    func: async (inputs) => {
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    },
};
exports.GetUserEmailQuestion = {
    name: "email",
    type: "text",
    title: "Add owner to Teams/AAD app for the account under the same M365 tenant (email)",
    validation: {
        validFunc: (input, previousInputs) => {
            if (!input || input.trim() === "") {
                return "Email address cannot be null or empty";
            }
            const re = /\S+@\S+\.\S+/;
            if (!re.test(input)) {
                return "Email address is not valid";
            }
            return undefined;
        },
    },
};
//# sourceMappingURL=question.js.map