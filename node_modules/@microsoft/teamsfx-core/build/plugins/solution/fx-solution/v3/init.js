"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.getQuestionsForInit = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const constants_1 = require("./constants");
const question_1 = require("../question");
async function getQuestionsForInit(ctx, inputs) {
    const node = new teamsfx_api_1.QTreeNode({
        name: "set-azure-solution",
        type: "func",
        func: (inputs) => {
            inputs[question_1.AzureSolutionQuestionNames.Solution] = constants_1.BuiltInSolutionNames.azure;
        },
    });
    node.condition = { containsAny: [question_1.TabOptionItem.id, question_1.BotOptionItem.id, question_1.MessageExtensionItem.id] };
    return teamsfx_api_1.ok(node);
}
exports.getQuestionsForInit = getQuestionsForInit;
async function init(ctx, inputs) {
    const solutionSettings = {
        version: "3.0.0",
        name: ctx.projectSetting.solutionSettings.name,
        capabilities: [],
        hostType: "Azure",
        azureResources: [],
        modules: [],
        activeResourcePlugins: [],
    };
    ctx.projectSetting.solutionSettings = solutionSettings;
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.init = init;
//# sourceMappingURL=init.js.map