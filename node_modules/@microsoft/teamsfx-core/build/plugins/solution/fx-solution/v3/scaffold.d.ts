import { FxError, Inputs, Json, OptionItem, QTreeNode, Result, v2, v3, Void } from "@microsoft/teamsfx-api";
export declare class ReactTabScaffoldPlugin implements v3.ScaffoldPlugin {
    getTemplates(ctx: v2.Context, inputs: Inputs): Promise<Result<v3.ScaffoldTemplate[], FxError>>;
    scaffold(ctx: v2.Context, inputs: v3.PluginScaffoldInputs): Promise<Result<Json | undefined, FxError>>;
    name: string;
}
export declare class BotScaffoldPlugin implements v3.ScaffoldPlugin {
    getTemplates(ctx: v2.Context, inputs: Inputs): Promise<Result<v3.ScaffoldTemplate[], FxError>>;
    scaffold(ctx: v2.Context, inputs: v3.PluginScaffoldInputs): Promise<Result<Json | undefined, FxError>>;
    name: string;
}
export declare class BlazorScaffoldPlugin implements v3.ScaffoldPlugin {
    getTemplates(ctx: v2.Context, inputs: Inputs): Promise<Result<v3.ScaffoldTemplate[], FxError>>;
    scaffold(ctx: v2.Context, inputs: v3.PluginScaffoldInputs): Promise<Result<Json | undefined, FxError>>;
    name: string;
}
export declare class SPFxScaffoldPlugin implements v3.ScaffoldPlugin {
    getTemplates(ctx: v2.Context, inputs: Inputs): Promise<Result<v3.ScaffoldTemplate[], FxError>>;
    scaffold(ctx: v2.Context, inputs: v3.PluginScaffoldInputs): Promise<Result<Json | undefined, FxError>>;
    name: string;
}
export declare function getQuestionsForScaffold(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function scaffold(ctx: v2.Context, inputs: v2.InputsWithProjectPath & {
    module?: string;
    template?: OptionItem;
}): Promise<Result<Void, FxError>>;
//# sourceMappingURL=scaffold.d.ts.map