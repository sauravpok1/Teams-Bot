"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.addResource = exports.getQuestionsForAddResource = exports.SPFxResourcePlugin = exports.AzureWebAppPlugin = exports.AzureBotPlugin = exports.AzureStoragePlugin = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const arm_1 = tslib_1.__importDefault(require("../arm"));
const constants_1 = require("./constants");
const error_1 = require("./error");
const questions_1 = require("../../utils/questions");
const utils_1 = require("./utils");
const error_2 = require("../../utils/error");
let AzureStoragePlugin = class AzureStoragePlugin {
    constructor() {
        this.resourceType = "Azure Storage";
        this.description = "Azure Storage";
        this.name = constants_1.BuiltInResourcePluginNames.storage;
    }
    async generateResourceTemplate(ctx, inputs) {
        return teamsfx_api_1.ok({
            kind: "bicep",
            template: {
                Provision: {
                    Orchestration: "Orchestration",
                    Reference: {
                        endpoint: "provisionOutputs.azureStorageOutput.value.endpoint",
                        domain: "provisionOutputs.azureStorageOutput.value.domain",
                    },
                    Modules: {
                        azureStorage: "",
                    },
                },
                Parameters: {
                    azureStorageK1: "v1",
                },
            },
        });
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        const config = {
            domain: "huajie1214dev35e42dtab.z19.web.core.windows.net",
            endpoint: "https://huajie1214dev35e42dtab.z19.web.core.windows.net",
            storageResourceId: "/subscriptions/63f43cd3-ab63-429d-80ad-950ec8359724/resourceGroups/fullcap-dev-rg/providers/Microsoft.Storage/storageAccounts/huajie1214dev35e42dtab",
        };
        return teamsfx_api_1.ok(config);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        ctx.logProvider.info(`fx-resource-azure-storage deploy success!`);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
};
AzureStoragePlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInResourcePluginNames.storage)
], AzureStoragePlugin);
exports.AzureStoragePlugin = AzureStoragePlugin;
let AzureBotPlugin = class AzureBotPlugin {
    constructor() {
        this.resourceType = "Azure Bot";
        this.description = "Azure Bot";
        this.name = constants_1.BuiltInResourcePluginNames.bot;
    }
    async generateResourceTemplate(ctx, inputs) {
        return teamsfx_api_1.ok({
            kind: "bicep",
            template: {
                Provision: {
                    Orchestration: "Orchestration",
                    Reference: {
                        endpoint: "provisionOutputs.azureBotOutput.value.endpoint",
                        domain: "provisionOutputs.azureBotOutput.value.domain",
                    },
                    Modules: {
                        azureBot: "",
                    },
                },
                Parameters: {
                    azureBotK2: "v2",
                },
            },
        });
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        const config = {
            botId: "e01c3709-3700-45dd-9f23-bdbedc78392e",
            objectId: "ea553a03-0322-4c9a-8bd5-8d56d1d2b534",
            skuName: "F1",
            siteName: "huajie1214dev35e42dbot",
            validDomain: "huajie1214dev35e42dbot.azurewebsites.net",
            appServicePlanName: "huajie1214dev35e42dbot",
            botWebAppResourceId: "/subscriptions/63f43cd3-ab63-429d-80ad-950ec8359724/resourceGroups/fullcap-dev-rg/providers/Microsoft.Web/sites/huajie1214dev35e42dbot",
            siteEndpoint: "https://huajie1214dev35e42dbot.azurewebsites.net",
            botPassword: "{{fx-resource-bot.botPassword}}",
            secretFields: ["botPassword"],
        };
        return teamsfx_api_1.ok(config);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        ctx.logProvider.info(`fx-resource-azure-bot deploy success!`);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
};
AzureBotPlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInResourcePluginNames.bot)
], AzureBotPlugin);
exports.AzureBotPlugin = AzureBotPlugin;
let AzureWebAppPlugin = class AzureWebAppPlugin {
    constructor() {
        this.resourceType = "Azure Web App";
        this.description = "Azure Web App";
        this.name = constants_1.BuiltInResourcePluginNames.webApp;
    }
    async generateResourceTemplate(ctx, inputs) {
        return teamsfx_api_1.ok({
            kind: "bicep",
            template: {
                Provision: {
                    Orchestration: "Orchestration",
                    Reference: {
                        endpoint: "provisionOutputs.azureWebAppOutput.value.endpoint",
                        domain: "provisionOutputs.azureWebAppOutput.value.domain",
                    },
                    Modules: {
                        azureWebApp: "",
                    },
                },
                Parameters: {
                    azureWebAppK3: "v3",
                },
            },
        });
    }
    async provisionResource(ctx, inputs, envInfo, tokenProvider) {
        const config = {
            resourceId: "/subscriptions/63f43cd3-ab63-429d-80ad-950ec8359724/resourceGroups/fullcap-dev-rg/providers/Microsoft.Web/sites/huajie1214dev35e42dbot",
            endpoint: "https://huajie1214dev35e42dbot.azurewebsites.net",
        };
        return teamsfx_api_1.ok(config);
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        ctx.logProvider.info(`fx-resource-azure-web-app deploy success!`);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
};
AzureWebAppPlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInResourcePluginNames.webApp)
], AzureWebAppPlugin);
exports.AzureWebAppPlugin = AzureWebAppPlugin;
let SPFxResourcePlugin = class SPFxResourcePlugin {
    constructor() {
        this.resourceType = "SPFx resource";
        this.description = "SPFx resource";
        this.name = constants_1.BuiltInResourcePluginNames.spfx;
    }
    async deploy(ctx, inputs, envInfo, tokenProvider) {
        ctx.logProvider.info(`fx-resource-spfx deploy success!`);
        return teamsfx_api_1.ok(teamsfx_api_1.Void);
    }
};
SPFxResourcePlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInResourcePluginNames.spfx)
], SPFxResourcePlugin);
exports.SPFxResourcePlugin = SPFxResourcePlugin;
function getAllResourcePlugins() {
    return [
        typedi_1.Container.get(constants_1.BuiltInResourcePluginNames.webApp),
        typedi_1.Container.get(constants_1.BuiltInResourcePluginNames.bot),
        typedi_1.Container.get(constants_1.BuiltInResourcePluginNames.webApp),
    ];
}
async function getQuestionsForAddResource(ctx, inputs) {
    const solutionSettings = ctx.projectSetting.solutionSettings;
    const node = new teamsfx_api_1.QTreeNode({ type: "group" });
    const moduleNode = questions_1.createSelectModuleQuestionNode(solutionSettings.modules);
    node.addChild(moduleNode);
    const resourcePlugins = getAllResourcePlugins();
    const resourceNode = new teamsfx_api_1.QTreeNode(questions_1.selectResourceQuestion);
    const staticOptions = [];
    for (const plugin of resourcePlugins) {
        staticOptions.push({
            id: plugin.name,
            label: plugin.resourceType,
            detail: plugin.description,
        });
    }
    questions_1.selectResourceQuestion.staticOptions = staticOptions;
    node.addChild(resourceNode);
    return teamsfx_api_1.ok(node);
}
exports.getQuestionsForAddResource = getQuestionsForAddResource;
async function addResource(ctx, inputs) {
    if (!inputs.resource) {
        return teamsfx_api_1.err(new error_2.InvalidInputError(inputs, "inputs.resource undefined"));
    }
    const solutionSettings = ctx.projectSetting.solutionSettings;
    if (inputs.module !== undefined) {
        const module = utils_1.getModule(solutionSettings, inputs.module);
        if (module) {
            if (module.hostingPlugin === inputs.resource) {
                return teamsfx_api_1.err(new error_1.ResourceAlreadyAddedError(inputs.resource));
            }
            module.hostingPlugin = inputs.resource;
        }
    }
    // resolve resource dependencies
    const addedResourceNames = new Set();
    const existingResourceNames = new Set();
    const allResourceNames = new Set();
    solutionSettings.activeResourcePlugins.forEach((s) => existingResourceNames.add(s));
    addedResourceNames.add(inputs.resource);
    const resolveRes = await resolveResourceDependencies(ctx, inputs, addedResourceNames);
    if (resolveRes.isErr())
        return teamsfx_api_1.err(resolveRes.error);
    addedResourceNames.forEach((s) => allResourceNames.add(s));
    existingResourceNames.forEach((s) => allResourceNames.add(s));
    solutionSettings.activeResourcePlugins = Array.from(allResourceNames);
    //call arm module to generate arm templates
    const activatedPlugins = solutionSettings.activeResourcePlugins.map((n) => typedi_1.Container.get(n));
    const addedPlugins = Array.from(addedResourceNames).map((n) => typedi_1.Container.get(n));
    const armRes = await arm_1.default.generateArmTemplate(ctx, inputs, activatedPlugins, addedPlugins);
    if (armRes.isErr()) {
        return teamsfx_api_1.err(armRes.error);
    }
    //call addResource API
    for (const pluginName of allResourceNames.values()) {
        const plugin = typedi_1.Container.get(pluginName);
        if (addedResourceNames.has(pluginName) && !existingResourceNames.has(pluginName)) {
            if (plugin.addResource) {
                const res = await plugin.addResource(ctx, inputs);
                if (res.isErr()) {
                    return teamsfx_api_1.err(res.error);
                }
            }
        }
    }
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.addResource = addResource;
async function resolveResourceDependencies(ctx, inputs, addedResourceNames) {
    while (true) {
        const size1 = addedResourceNames.size;
        for (const name of addedResourceNames) {
            const plugin = typedi_1.Container.get(name);
            if (plugin.pluginDependencies) {
                const depRes = await plugin.pluginDependencies(ctx, inputs);
                if (depRes.isErr()) {
                    return teamsfx_api_1.err(depRes.error);
                }
                for (const dep of depRes.value) {
                    addedResourceNames.add(dep);
                }
            }
        }
        const size2 = addedResourceNames.size;
        if (size1 === size2)
            break;
    }
    return teamsfx_api_1.ok(undefined);
}
//# sourceMappingURL=addResource.js.map