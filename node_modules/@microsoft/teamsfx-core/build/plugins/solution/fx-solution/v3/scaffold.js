"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.scaffold = exports.getQuestionsForScaffold = exports.SPFxScaffoldPlugin = exports.BlazorScaffoldPlugin = exports.BotScaffoldPlugin = exports.ReactTabScaffoldPlugin = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const typedi_1 = require("typedi");
const constants_1 = require("./constants");
const questions_1 = require("../../utils/questions");
const utils_1 = require("./utils");
const error_1 = require("../../utils/error");
let ReactTabScaffoldPlugin = class ReactTabScaffoldPlugin {
    constructor() {
        this.name = constants_1.BuiltInScaffoldPluginNames.tab;
    }
    async getTemplates(ctx, inputs) {
        return teamsfx_api_1.ok([
            {
                name: "ReactTab_JS",
                language: "javascript",
                description: "ReactTab Javascript",
            },
            {
                name: "ReactTab_TS",
                language: "typescript",
                description: "ReactTab Typescript",
            },
        ]);
    }
    async scaffold(ctx, inputs) {
        ctx.logProvider.info("fx-scaffold-react-tab:scaffold");
        if (!inputs.test)
            await fs_extra_1.default.ensureDir(path.join(inputs.projectPath, "tabs"));
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const module = utils_1.getModule(solutionSettings, inputs.module);
        if (module) {
            module.dir = "tabs";
            module.deployType = "folder";
        }
        return teamsfx_api_1.ok(undefined);
    }
};
ReactTabScaffoldPlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInScaffoldPluginNames.tab)
], ReactTabScaffoldPlugin);
exports.ReactTabScaffoldPlugin = ReactTabScaffoldPlugin;
let BotScaffoldPlugin = class BotScaffoldPlugin {
    constructor() {
        this.name = constants_1.BuiltInScaffoldPluginNames.bot;
    }
    async getTemplates(ctx, inputs) {
        return teamsfx_api_1.ok([
            {
                name: "NodejsBot_JS",
                language: "javascript",
                description: "NodejsBot JS",
            },
            {
                name: "NodejsBot_TS",
                language: "typescript",
                description: "NodejsBot TS",
            },
        ]);
    }
    async scaffold(ctx, inputs) {
        ctx.logProvider.info("fx-scaffold-bot:scaffold");
        if (!inputs.test)
            await fs_extra_1.default.ensureDir(path.join(inputs.projectPath, "bot"));
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const module = utils_1.getModule(solutionSettings, inputs.module);
        if (module) {
            module.dir = "bot";
            module.deployType = "zip";
        }
        return teamsfx_api_1.ok(undefined);
    }
};
BotScaffoldPlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInScaffoldPluginNames.bot)
], BotScaffoldPlugin);
exports.BotScaffoldPlugin = BotScaffoldPlugin;
let BlazorScaffoldPlugin = class BlazorScaffoldPlugin {
    constructor() {
        this.name = constants_1.BuiltInScaffoldPluginNames.blazor;
    }
    async getTemplates(ctx, inputs) {
        return teamsfx_api_1.ok([
            {
                name: "BlazorTab",
                language: "csharp",
                description: "Blazor Tab",
            },
            {
                name: "BlazorBot",
                language: "csharp",
                description: "Blazor Tab",
            },
            {
                name: "BlazorTabBot",
                language: "csharp",
                description: "Blazor Tab+Bot",
            },
        ]);
    }
    async scaffold(ctx, inputs) {
        ctx.logProvider.info("fx-scaffold-blazor:scaffold");
        if (!inputs.test)
            await fs_extra_1.default.ensureDir(path.join(inputs.projectPath, "blazor"));
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const module = utils_1.getModule(solutionSettings, inputs.module);
        if (module) {
            module.dir = "blazor";
            module.deployType = "zip";
        }
        return teamsfx_api_1.ok(undefined);
    }
};
BlazorScaffoldPlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInScaffoldPluginNames.blazor)
], BlazorScaffoldPlugin);
exports.BlazorScaffoldPlugin = BlazorScaffoldPlugin;
let SPFxScaffoldPlugin = class SPFxScaffoldPlugin {
    constructor() {
        this.name = constants_1.BuiltInScaffoldPluginNames.spfx;
    }
    async getTemplates(ctx, inputs) {
        return teamsfx_api_1.ok([
            {
                name: "SPFxTab",
                language: "typescript",
                description: "SPFx Tab",
            },
        ]);
    }
    async scaffold(ctx, inputs) {
        ctx.logProvider.info("fx-scaffold-spfx:scaffold");
        if (!inputs.test)
            await fs_extra_1.default.ensureDir(path.join(inputs.projectPath, "spfx"));
        const solutionSettings = ctx.projectSetting.solutionSettings;
        const module = utils_1.getModule(solutionSettings, inputs.module);
        if (module) {
            module.dir = "spfx";
            module.deployType = "zip";
        }
        return teamsfx_api_1.ok(undefined);
    }
};
SPFxScaffoldPlugin = tslib_1.__decorate([
    typedi_1.Service(constants_1.BuiltInScaffoldPluginNames.spfx)
], SPFxScaffoldPlugin);
exports.SPFxScaffoldPlugin = SPFxScaffoldPlugin;
function getAllScaffoldPlugins() {
    return [
        typedi_1.Container.get(constants_1.BuiltInScaffoldPluginNames.blazor),
        typedi_1.Container.get(constants_1.BuiltInScaffoldPluginNames.tab),
        typedi_1.Container.get(constants_1.BuiltInScaffoldPluginNames.bot),
    ];
}
async function getQuestionsForScaffold(ctx, inputs) {
    const solutionSettings = ctx.projectSetting.solutionSettings;
    const scaffoldPlugins = getAllScaffoldPlugins();
    const node = new teamsfx_api_1.QTreeNode({ type: "group" });
    if (solutionSettings.modules) {
        const moduleNode = questions_1.createSelectModuleQuestionNode(solutionSettings.modules);
        node.addChild(moduleNode);
    }
    const templateNode = new teamsfx_api_1.QTreeNode(questions_1.selectScaffoldTemplateQuestion);
    const staticOptions = [];
    for (const plugin of scaffoldPlugins) {
        const getTemplatesRes = await plugin.getTemplates(ctx, inputs);
        if (getTemplatesRes.isErr()) {
            return teamsfx_api_1.err(getTemplatesRes.error);
        }
        for (const template of getTemplatesRes.value) {
            staticOptions.push({
                id: `${plugin.name}/${template.name}`,
                label: `${template.name}(${template.language})`,
                detail: template.description,
                data: {
                    pluginName: plugin.name,
                    templateName: template.name,
                },
            });
        }
        if (plugin.getQuestionsForScaffold) {
            const pluginQuestionsRes = await plugin.getQuestionsForScaffold(ctx, inputs);
            if (pluginQuestionsRes.isOk()) {
                const pluginNode = pluginQuestionsRes.value;
                if (pluginNode) {
                    pluginNode.condition = {
                        validFunc: async (input, inputs) => {
                            if (input.data) {
                                if (input.data.pluginName === plugin.name)
                                    return undefined;
                            }
                            return "";
                        },
                    };
                    templateNode.addChild(pluginNode);
                }
            }
        }
    }
    questions_1.selectScaffoldTemplateQuestion.staticOptions = staticOptions;
    node.addChild(templateNode);
    return teamsfx_api_1.ok(node);
}
exports.getQuestionsForScaffold = getQuestionsForScaffold;
async function scaffold(ctx, inputs) {
    if (!inputs.template) {
        return teamsfx_api_1.err(new error_1.InvalidInputError(inputs));
    }
    const template = inputs.template;
    if (!template.data) {
        return teamsfx_api_1.err(new error_1.InvalidInputError(inputs, "template.data is undefined"));
    }
    const data = template.data;
    const pluginName = data.pluginName;
    const templateName = data.templateName;
    const plugin = typedi_1.Container.get(pluginName);
    const pluginInputs = Object.assign(Object.assign({}, inputs), { template: templateName });
    const res = await plugin.scaffold(ctx, pluginInputs);
    if (res.isErr()) {
        return teamsfx_api_1.err(res.error);
    }
    const manifest = [];
    if (res.value) {
        manifest.push(res.value);
    }
    inputs.manifest = manifest;
    //TODO
    // //call appstudio.scaffold() API
    // const appstudioPlugin = Container.get<v3.ScaffoldPlugin>(BuiltInResourcePluginNames.AppStudio);
    // await appstudioPlugin.scaffold(ctx, pluginInputs);
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports.scaffold = scaffold;
//# sourceMappingURL=scaffold.js.map