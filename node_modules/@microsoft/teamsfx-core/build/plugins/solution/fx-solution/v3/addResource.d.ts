import { AzureAccountProvider, FxError, QTreeNode, Result, TokenProvider, v2, v3, Void } from "@microsoft/teamsfx-api";
export declare class AzureStoragePlugin implements v3.ResourcePlugin {
    resourceType: string;
    description: string;
    name: string;
    generateResourceTemplate(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<v2.ResourceTemplate, FxError>>;
    provisionResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider): Promise<Result<v3.CloudResource, FxError>>;
    deploy(ctx: v2.Context, inputs: v3.PluginDeployInputs, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: AzureAccountProvider): Promise<Result<Void, FxError>>;
}
export declare class AzureBotPlugin implements v3.ResourcePlugin {
    resourceType: string;
    description: string;
    name: string;
    generateResourceTemplate(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<v2.ResourceTemplate, FxError>>;
    provisionResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider): Promise<Result<v3.CloudResource, FxError>>;
    deploy(ctx: v2.Context, inputs: v3.PluginDeployInputs, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: AzureAccountProvider): Promise<Result<Void, FxError>>;
}
export declare class AzureWebAppPlugin implements v3.ResourcePlugin {
    resourceType: string;
    description: string;
    name: string;
    generateResourceTemplate(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<v2.ResourceTemplate, FxError>>;
    provisionResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: TokenProvider): Promise<Result<v3.CloudResource, FxError>>;
    deploy(ctx: v2.Context, inputs: v3.PluginDeployInputs, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: AzureAccountProvider): Promise<Result<Void, FxError>>;
}
export declare class SPFxResourcePlugin implements v3.ResourcePlugin {
    resourceType: string;
    description: string;
    name: string;
    deploy(ctx: v2.Context, inputs: v3.PluginDeployInputs, envInfo: v2.DeepReadonly<v3.EnvInfoV3>, tokenProvider: AzureAccountProvider): Promise<Result<Void, FxError>>;
}
export declare function getQuestionsForAddResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function addResource(ctx: v2.Context, inputs: v2.InputsWithProjectPath & {
    module?: string;
    resource?: string;
}): Promise<Result<Void, FxError>>;
//# sourceMappingURL=addResource.d.ts.map