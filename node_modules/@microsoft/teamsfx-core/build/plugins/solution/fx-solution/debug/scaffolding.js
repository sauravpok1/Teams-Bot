// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._scaffoldLocalDebugSettings = exports.scaffoldLocalDebugSettingsV1 = exports.scaffoldLocalDebugSettings = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const localSettingsProvider_1 = require("../../../../common/localSettingsProvider");
const projectSettingsHelper_1 = require("../../../../common/local/projectSettingsHelper");
const Launch = tslib_1.__importStar(require("./util/launch"));
const Tasks = tslib_1.__importStar(require("./util/tasks"));
const Settings = tslib_1.__importStar(require("./util/settings"));
const telemetry_1 = require("./util/telemetry");
const error_1 = require("./error");
const PackageJson = require("@npmcli/package-json");
async function scaffoldLocalDebugSettings(ctx, inputs, localSettings) {
    return await _scaffoldLocalDebugSettings(ctx.projectSetting, inputs, ctx.telemetryReporter, ctx.logProvider, ctx.cryptoProvider, localSettings);
}
exports.scaffoldLocalDebugSettings = scaffoldLocalDebugSettings;
async function scaffoldLocalDebugSettingsV1(ctx) {
    if (!ctx.projectSettings || !ctx.answers || !ctx.telemetryReporter || !ctx.logProvider) {
        return teamsfx_api_1.err(error_1.ScaffoldLocalDebugSettingsV1Error());
    }
    return await _scaffoldLocalDebugSettings(ctx.projectSettings, ctx.answers, ctx.telemetryReporter, ctx.logProvider, ctx.cryptoProvider);
}
exports.scaffoldLocalDebugSettingsV1 = scaffoldLocalDebugSettingsV1;
async function _scaffoldLocalDebugSettings(projectSetting, inputs, telemetryReporter, logProvider, cryptoProvider, localSettings) {
    var _a, _b;
    const isSpfx = projectSettingsHelper_1.ProjectSettingsHelper.isSpfx(projectSetting);
    const isMigrateFromV1 = projectSettingsHelper_1.ProjectSettingsHelper.isMigrateFromV1(projectSetting);
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSetting);
    const includeAAD = projectSettingsHelper_1.ProjectSettingsHelper.includeAAD(projectSetting);
    const includeSimpleAuth = projectSettingsHelper_1.ProjectSettingsHelper.includeSimpleAuth(projectSetting);
    const programmingLanguage = (_a = projectSetting.programmingLanguage) !== null && _a !== void 0 ? _a : "";
    const telemetryProperties = {
        platform: inputs.platform,
        spfx: isSpfx ? "true" : "false",
        frontend: includeFrontend ? "true" : "false",
        function: includeBackend ? "true" : "false",
        bot: includeBot ? "true" : "false",
        auth: includeAAD && includeSimpleAuth ? "true" : "false",
        "programming-language": programmingLanguage,
    };
    telemetry_1.TelemetryUtils.init(telemetryReporter);
    telemetry_1.TelemetryUtils.sendStartEvent(telemetry_1.TelemetryEventName.scaffoldLocalDebugSettings, telemetryProperties);
    try {
        // scaffold for both vscode and cli
        if (inputs.platform === teamsfx_api_1.Platform.VSCode || inputs.platform === teamsfx_api_1.Platform.CLI) {
            if (isSpfx) {
                // Only generate launch.json and tasks.json for SPFX
                const launchConfigurations = Launch.generateSpfxConfigurations();
                const launchCompounds = Launch.generateSpfxCompounds();
                const tasks = Tasks.generateSpfxTasks();
                const tasksInputs = Tasks.generateInputs();
                //TODO: save files via context api
                await fs.ensureDir(`${inputs.projectPath}/.vscode/`);
                await fs.writeJSON(`${inputs.projectPath}/.vscode/launch.json`, {
                    version: "0.2.0",
                    configurations: launchConfigurations,
                    compounds: launchCompounds,
                }, {
                    spaces: 4,
                    EOL: os.EOL,
                });
                await fs.writeJSON(`${inputs.projectPath}/.vscode/tasks.json`, {
                    version: "2.0.0",
                    tasks: tasks,
                    inputs: tasksInputs,
                }, {
                    spaces: 4,
                    EOL: os.EOL,
                });
                await fs.writeJSON(`${inputs.projectPath}/.vscode/settings.json`, Settings.generateSettings(false), {
                    spaces: 4,
                    EOL: os.EOL,
                });
            }
            else {
                const launchConfigurations = Launch.generateConfigurations(includeFrontend, includeBackend, includeBot, isMigrateFromV1);
                const launchCompounds = Launch.generateCompounds(includeFrontend, includeBackend, includeBot);
                const tasks = Tasks.generateTasks(includeFrontend, includeBackend, includeBot, includeSimpleAuth, isMigrateFromV1, programmingLanguage);
                //TODO: save files via context api
                await fs.ensureDir(`${inputs.projectPath}/.vscode/`);
                await fs.writeJSON(`${inputs.projectPath}/.vscode/launch.json`, {
                    version: "0.2.0",
                    configurations: launchConfigurations,
                    compounds: launchCompounds,
                }, {
                    spaces: 4,
                    EOL: os.EOL,
                });
                await fs.writeJSON(`${inputs.projectPath}/.vscode/tasks.json`, {
                    version: "2.0.0",
                    tasks: tasks,
                }, {
                    spaces: 4,
                    EOL: os.EOL,
                });
                // generate localSettings.json
                await scaffoldLocalSettingsJson(projectSetting, inputs, cryptoProvider, localSettings);
                // add 'npm install' scripts into root package.json
                const packageJsonPath = inputs.projectPath;
                let packageJson = undefined;
                try {
                    packageJson = await PackageJson.load(packageJsonPath);
                }
                catch (error) {
                    logProvider.error(`Cannot load package.json from ${inputs.projectPath}. ${error}`);
                }
                if (packageJson !== undefined) {
                    const scripts = (_b = packageJson.content.scripts) !== null && _b !== void 0 ? _b : {};
                    const installAll = [];
                    if (includeBackend) {
                        scripts["install:api"] = "cd api && npm install";
                        installAll.push("npm run install:api");
                    }
                    if (includeBot) {
                        scripts["install:bot"] = "cd bot && npm install";
                        installAll.push("npm run install:bot");
                    }
                    if (includeFrontend) {
                        scripts["install:tabs"] = "cd tabs && npm install";
                        installAll.push("npm run install:tabs");
                    }
                    scripts["installAll"] = installAll.join(" & ");
                    packageJson.update({ scripts: scripts });
                    await packageJson.save();
                }
            }
            await fs.writeJSON(`${inputs.projectPath}/.vscode/settings.json`, Settings.generateSettings(includeBackend), {
                spaces: 4,
                EOL: os.EOL,
            });
        }
    }
    catch (error) {
        const systemError = error_1.ScaffoldLocalDebugSettingsError(error);
        telemetry_1.TelemetryUtils.sendErrorEvent(telemetry_1.TelemetryEventName.scaffoldLocalDebugSettings, systemError);
        return teamsfx_api_1.err(systemError);
    }
    telemetry_1.TelemetryUtils.sendSuccessEvent(telemetry_1.TelemetryEventName.scaffoldLocalDebugSettings, telemetryProperties);
    return teamsfx_api_1.ok(teamsfx_api_1.Void);
}
exports._scaffoldLocalDebugSettings = _scaffoldLocalDebugSettings;
async function scaffoldLocalSettingsJson(projectSetting, inputs, cryptoProvider, localSettings) {
    const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(inputs.projectPath);
    const includeFrontend = projectSettingsHelper_1.ProjectSettingsHelper.includeFrontend(projectSetting);
    const includeBackend = projectSettingsHelper_1.ProjectSettingsHelper.includeBackend(projectSetting);
    const includeBot = projectSettingsHelper_1.ProjectSettingsHelper.includeBot(projectSetting);
    if (localSettings !== undefined) {
        // Add local settings for the new added capability/resource
        localSettings = localSettingsProvider.incrementalInitV2(localSettings, includeBackend, includeBot, includeFrontend);
        await localSettingsProvider.saveJson(localSettings, cryptoProvider);
    }
    else {
        // Initialize a local settings on scaffolding
        localSettings = localSettingsProvider.initV2(includeFrontend, includeBackend, includeBot);
        await localSettingsProvider.saveJson(localSettings, cryptoProvider);
    }
}
//# sourceMappingURL=scaffolding.js.map