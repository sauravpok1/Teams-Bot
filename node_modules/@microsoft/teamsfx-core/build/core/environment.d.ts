import { CryptoProvider, EnvConfig, FxError, Result, EnvInfo, Json, v3 } from "@microsoft/teamsfx-api";
export interface EnvStateFiles {
    envState: string;
    userDataFile: string;
}
export declare const envPrefix = "$env.";
declare class EnvironmentManager {
    readonly envNameRegex: RegExp;
    readonly envConfigNameRegex: RegExp;
    readonly envStateNameRegex: RegExp;
    private readonly defaultEnvName;
    private readonly ajv;
    private readonly schema;
    private readonly envConfigDescription;
    constructor();
    loadEnvInfo(projectPath: string, cryptoProvider: CryptoProvider, envName?: string, isV3?: boolean): Promise<Result<EnvInfo | v3.EnvInfoV3, FxError>>;
    newEnvConfigData(appName: string): EnvConfig;
    writeEnvConfig(projectPath: string, envConfig: EnvConfig, envName?: string): Promise<Result<string, FxError>>;
    writeEnvState(envData: Map<string, any> | Json, projectPath: string, cryptoProvider: CryptoProvider, envName?: string, isV3?: boolean): Promise<Result<string, FxError>>;
    listEnvConfigs(projectPath: string): Promise<Result<Array<string>, FxError>>;
    checkEnvExist(projectPath: string, env: string): Promise<Result<boolean, FxError>>;
    isEnvConfig(projectPath: string, filePath: string): boolean;
    getEnvConfigPath(envName: string, projectPath: string): string;
    getEnvStateFilesPath(envName: string, projectPath: string): EnvStateFiles;
    private loadEnvConfig;
    private loadEnvState;
    private expandEnvironmentVariables;
    private getEnvNameFromPath;
    private getConfigFolder;
    private getStatesFolder;
    private getEnvStatesFolder;
    getEnvConfigsFolder(projectPath: string): string;
    private loadUserData;
    private encrypt;
    private decrypt;
    getDefaultEnvName(): string;
}
export declare function separateSecretDataV3(envState: v3.ResourceStates): Record<string, string>;
export declare const environmentManager: EnvironmentManager;
export {};
//# sourceMappingURL=environment.d.ts.map