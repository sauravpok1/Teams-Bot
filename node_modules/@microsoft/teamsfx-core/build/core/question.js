"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SampleSelect = exports.getCreateNewOrFromSampleQuestion = exports.ScratchOptionNo = exports.ScratchOptionYes = exports.ScratchOptionNoVSC = exports.ScratchOptionYesVSC = exports.QuestionSelectSolution = exports.QuestionNewResourceGroupLocation = exports.QuestionNewResourceGroupName = exports.QuestionSelectResourceGroup = exports.QuestionSelectSourceEnvironment = exports.getQuestionNewTargetEnvironmentName = exports.QuestionSelectTargetEnvironment = exports.createCapabilityQuestion = exports.TabSPFxItem = exports.MessageExtensionItem = exports.BotOptionItem = exports.TabOptionItem = exports.ProgrammingLanguageQuestion = exports.QuestionRootFolder = exports.DefaultAppNameFunc = exports.QuestionV1AppName = exports.QuestionAppName = exports.ProjectNamePattern = exports.CoreQuestionNames = void 0;
const tslib_1 = require("tslib");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const jsonschema = tslib_1.__importStar(require("jsonschema"));
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const os = tslib_1.__importStar(require("os"));
const environment_1 = require("./environment");
const common_1 = require("../common");
const __1 = require("..");
var CoreQuestionNames;
(function (CoreQuestionNames) {
    CoreQuestionNames["AppName"] = "app-name";
    CoreQuestionNames["DefaultAppNameFunc"] = "default-app-name-func";
    CoreQuestionNames["Folder"] = "folder";
    CoreQuestionNames["ProgrammingLanguage"] = "programming-language";
    CoreQuestionNames["Capabilities"] = "capabilities";
    CoreQuestionNames["Solution"] = "solution";
    CoreQuestionNames["CreateFromScratch"] = "scratch";
    CoreQuestionNames["Samples"] = "samples";
    CoreQuestionNames["Stage"] = "stage";
    CoreQuestionNames["SubStage"] = "substage";
    CoreQuestionNames["SourceEnvName"] = "sourceEnvName";
    CoreQuestionNames["TargetEnvName"] = "targetEnvName";
    CoreQuestionNames["TargetResourceGroupName"] = "targetResourceGroupName";
    CoreQuestionNames["NewResourceGroupName"] = "newResourceGroupName";
    CoreQuestionNames["NewResourceGroupLocation"] = "newResourceGroupLocation";
    CoreQuestionNames["NewTargetEnvName"] = "newTargetEnvName";
})(CoreQuestionNames = exports.CoreQuestionNames || (exports.CoreQuestionNames = {}));
exports.ProjectNamePattern = "^[a-zA-Z][\\da-zA-Z]+$";
exports.QuestionAppName = {
    type: "text",
    name: CoreQuestionNames.AppName,
    title: "Application name",
    validation: {
        validFunc: async (input, previousInputs) => {
            const schema = {
                pattern: exports.ProjectNamePattern,
                maxLength: 30,
            };
            const appName = input;
            const validateResult = jsonschema.validate(appName, schema);
            if (validateResult.errors && validateResult.errors.length > 0) {
                if (validateResult.errors[0].name === "pattern") {
                    return "Application name must start with a letter and can only contain letters and digits.";
                }
                else {
                    return "Application name length must be shorter than 30.";
                }
            }
            const projectPath = path.resolve(__1.getRootDirectory(), appName);
            const exists = await fs.pathExists(projectPath);
            if (exists)
                return `Path exists: ${projectPath}. Select a different application name.`;
            return undefined;
        },
    },
    placeholder: "Application name",
};
exports.QuestionV1AppName = {
    type: "text",
    name: CoreQuestionNames.AppName,
    title: "Application name",
    validation: {
        validFunc: async (input, previousInputs) => {
            const schema = {
                pattern: exports.ProjectNamePattern,
                maxLength: 30,
            };
            const appName = input;
            const validateResult = jsonschema.validate(appName, schema);
            if (validateResult.errors && validateResult.errors.length > 0) {
                if (validateResult.errors[0].name === "pattern") {
                    return "Application name must start with a letter and can only contain letters and digits.";
                }
                else {
                    return "Application name length must be shorter than 30.";
                }
            }
            return undefined;
        },
    },
    placeholder: "Application name",
};
exports.DefaultAppNameFunc = {
    type: "func",
    name: CoreQuestionNames.DefaultAppNameFunc,
    func: (inputs) => {
        var _a;
        const appName = path.basename((_a = inputs.projectPath) !== null && _a !== void 0 ? _a : "");
        const schema = {
            pattern: exports.ProjectNamePattern,
            maxLength: 30,
        };
        const validateResult = jsonschema.validate(appName, schema);
        if (validateResult.errors && validateResult.errors.length > 0) {
            return undefined;
        }
        return appName;
    },
};
exports.QuestionRootFolder = {
    type: "folder",
    name: CoreQuestionNames.Folder,
    title: "Workspace folder",
};
exports.ProgrammingLanguageQuestion = {
    name: CoreQuestionNames.ProgrammingLanguage,
    title: "Programming Language",
    type: "singleSelect",
    staticOptions: [
        { id: "javascript", label: "JavaScript" },
        { id: "typescript", label: "TypeScript" },
    ],
    dynamicOptions: (inputs) => {
        const cpas = inputs[CoreQuestionNames.Capabilities];
        if (cpas.includes(exports.TabSPFxItem.id))
            return [{ id: "typescript", label: "TypeScript" }];
        return [
            { id: "javascript", label: "JavaScript" },
            { id: "typescript", label: "TypeScript" },
        ];
    },
    skipSingleOption: true,
    default: (inputs) => {
        const cpas = inputs[CoreQuestionNames.Capabilities];
        if (cpas.includes(exports.TabSPFxItem.id))
            return "typescript";
        return "javascript";
    },
    placeholder: (inputs) => {
        const cpas = inputs[CoreQuestionNames.Capabilities];
        if (cpas.includes(exports.TabSPFxItem.id))
            return "SPFx is currently supporting TypeScript only.";
        return "Select a programming language.";
    },
};
exports.TabOptionItem = {
    id: "Tab",
    label: "Tab",
    cliName: "tab",
    description: "UI-based app",
    detail: "Teams-aware webpages embedded in Microsoft Teams",
};
exports.BotOptionItem = {
    id: "Bot",
    label: "Bot",
    cliName: "bot",
    description: "Conversational Agent",
    detail: "Running simple and repetitive automated tasks through conversations",
};
exports.MessageExtensionItem = {
    id: "MessagingExtension",
    label: "Messaging Extension",
    cliName: "messaging-extension",
    description: "Custom UI when users compose messages in Teams",
    detail: "Inserting app content or acting on a message without leaving the conversation",
};
exports.TabSPFxItem = {
    id: "TabSPFx",
    label: "Tab(SPFx)",
    cliName: "tab-spfx",
    description: "UI-base app with SPFx framework",
    detail: "Teams-aware webpages with SPFx framework embedded in Microsoft Teams",
};
function createCapabilityQuestion() {
    return {
        name: CoreQuestionNames.Capabilities,
        title: "Select capabilities",
        type: "multiSelect",
        staticOptions: [exports.TabOptionItem, exports.BotOptionItem, exports.MessageExtensionItem, exports.TabSPFxItem],
        default: [exports.TabOptionItem.id],
        placeholder: "Select at least 1 capability",
        validation: {
            validFunc: async (input) => {
                const name = input;
                if (name.length === 0) {
                    return "Select at least 1 capability";
                }
                if (name.length > 1 &&
                    (name.includes(exports.TabSPFxItem.id) || name.includes(exports.TabSPFxItem.label))) {
                    return "Teams Toolkit offers only the Tab capability in a Teams app with Visual Studio Code and SharePoint Framework. The Bot and Messaging extension capabilities are not available";
                }
                return undefined;
            },
        },
        onDidChangeSelection: async function (currentSelectedIds, previousSelectedIds) {
            if (currentSelectedIds.size > 1 && currentSelectedIds.has(exports.TabSPFxItem.id)) {
                if (previousSelectedIds.has(exports.TabSPFxItem.id)) {
                    currentSelectedIds.delete(exports.TabSPFxItem.id);
                }
                else {
                    currentSelectedIds.clear();
                    currentSelectedIds.add(exports.TabSPFxItem.id);
                }
            }
            return currentSelectedIds;
        },
    };
}
exports.createCapabilityQuestion = createCapabilityQuestion;
exports.QuestionSelectTargetEnvironment = {
    type: "singleSelect",
    name: CoreQuestionNames.TargetEnvName,
    title: "Select an environment",
    staticOptions: [],
    skipSingleOption: true,
    forgetLastValue: true,
};
function getQuestionNewTargetEnvironmentName(projectPath) {
    const WINDOWS_MAX_PATH_LENGTH = 260;
    return {
        type: "text",
        name: CoreQuestionNames.NewTargetEnvName,
        title: "New environment name",
        validation: {
            validFunc: async (input) => {
                const targetEnvName = input;
                const match = targetEnvName.match(environment_1.environmentManager.envNameRegex);
                if (!match) {
                    return "Environment name can only contain letters, digits, _ and -.";
                }
                const envFilePath = environment_1.environmentManager.getEnvConfigPath(targetEnvName, projectPath);
                if (os.type() === "Windows_NT" && envFilePath.length >= WINDOWS_MAX_PATH_LENGTH) {
                    return "The length of environment config path will exceed the limitation of Windows.";
                }
                if (targetEnvName === teamsfx_api_1.LocalEnvironmentName) {
                    return `Cannot create an environment '${teamsfx_api_1.LocalEnvironmentName}'`;
                }
                const envConfigs = await environment_1.environmentManager.listEnvConfigs(projectPath);
                if (envConfigs.isErr()) {
                    return `Failed to list env configs`;
                }
                const found = envConfigs.value.find((env) => env.localeCompare(targetEnvName, undefined, { sensitivity: "base" }) === 0) !== undefined;
                if (found) {
                    return `Project environment ${targetEnvName} already exists.`;
                }
                else {
                    return undefined;
                }
            },
        },
        placeholder: "New environment name",
    };
}
exports.getQuestionNewTargetEnvironmentName = getQuestionNewTargetEnvironmentName;
exports.QuestionSelectSourceEnvironment = {
    type: "singleSelect",
    name: CoreQuestionNames.SourceEnvName,
    title: "Select an environment to create copy",
    staticOptions: [],
    skipSingleOption: true,
    forgetLastValue: true,
};
exports.QuestionSelectResourceGroup = {
    type: "singleSelect",
    name: CoreQuestionNames.TargetResourceGroupName,
    title: "Select a resource group",
    staticOptions: [],
    skipSingleOption: true,
    forgetLastValue: true,
};
exports.QuestionNewResourceGroupName = {
    type: "text",
    name: CoreQuestionNames.NewResourceGroupName,
    title: "New resource group name",
    validation: {
        validFunc: async (input) => {
            const name = input;
            // https://docs.microsoft.com/en-us/rest/api/resources/resource-groups/create-or-update#uri-parameters
            const match = name.match(/^[-\w._()]+$/);
            if (!match) {
                return "The name can only contain alphanumeric characters or the symbols ._-()";
            }
            return undefined;
        },
    },
    placeholder: "New resource group name",
    // default resource group name will change with env name
    forgetLastValue: true,
};
exports.QuestionNewResourceGroupLocation = {
    type: "singleSelect",
    name: CoreQuestionNames.NewResourceGroupLocation,
    title: "Location for the new resource group",
    staticOptions: [],
};
exports.QuestionSelectSolution = {
    type: "singleSelect",
    name: CoreQuestionNames.Solution,
    title: "Select a solution",
    staticOptions: [],
    skipSingleOption: true,
};
exports.ScratchOptionYesVSC = {
    id: "yes",
    label: "$(new-folder) Create a new Teams app",
    detail: "Use the Teams Toolkit to create a new application.",
};
exports.ScratchOptionNoVSC = {
    id: "no",
    label: "$(heart) Start from a sample",
    detail: "Use an existing sample as a starting point for your new application.",
};
exports.ScratchOptionYes = {
    id: "yes",
    label: "Create a new Teams app",
    detail: "Use the Teams Toolkit to create a new application.",
};
exports.ScratchOptionNo = {
    id: "no",
    label: "Start from a sample",
    detail: "Use an existing sample as a starting point for your new application.",
};
function getCreateNewOrFromSampleQuestion(platform) {
    return {
        type: "singleSelect",
        name: CoreQuestionNames.CreateFromScratch,
        title: "Teams Toolkit: Create a new Teams app",
        staticOptions: platform === teamsfx_api_1.Platform.VSCode
            ? [exports.ScratchOptionYesVSC, exports.ScratchOptionNoVSC]
            : [exports.ScratchOptionYes, exports.ScratchOptionNo],
        default: exports.ScratchOptionYes.id,
        placeholder: "Select an option",
        skipSingleOption: true,
    };
}
exports.getCreateNewOrFromSampleQuestion = getCreateNewOrFromSampleQuestion;
exports.SampleSelect = {
    type: "singleSelect",
    name: CoreQuestionNames.Samples,
    title: "Start from a sample",
    staticOptions: common_1.sampleProvider.SampleCollection.samples.map((sample) => {
        return {
            id: sample.id,
            label: sample.title,
            detail: sample.shortDescription,
            data: sample.link,
        };
    }),
    placeholder: "Select a sample",
};
//# sourceMappingURL=question.js.map