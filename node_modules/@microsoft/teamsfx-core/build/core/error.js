// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPFxConfigError = exports.FailedToParseResourceIdError = exports.NotJsonError = exports.UpgradeCanceledError = exports.ProjectSettingError = exports.SolutionConfigError = exports.ObjectIsUndefinedError = exports.NotImplementedError = exports.LoadSolutionError = exports.ModifiedSecretError = exports.NonExistEnvNameError = exports.InvalidEnvConfigError = exports.ProjectEnvAlreadyExistError = exports.InvalidEnvNameError = exports.ProjectEnvNotExistError = exports.MultipleEnvNotEnabledError = exports.ProjectSettingsUndefinedError = exports.PluginHasNoTaskImpl = exports.InvalidStateError = exports.ContextUpgradeError = exports.FunctionRouterError = exports.InvalidInputError = exports.FetchSampleError = exports.TaskNotSupportError = exports.InvalidProjectSettingsFileError = exports.InvalidProjectError = exports.PathNotExistError = exports.V1ProjectNotSupportedError = exports.InvalidV1ProjectError = exports.NoProjectOpenedError = exports.NoneFxError = exports.CopyFileError = exports.ReadFileError = exports.WriteFileError = exports.MigrateNotImplementError = exports.EmptyProjectFolderError = exports.ArchiveProjectError = exports.ArchiveUserFileError = exports.ProjectFolderInvalidError = exports.ProjectFolderNotExistError = exports.ProjectFolderExistError = exports.CoreSource = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
exports.CoreSource = "Core";
function ProjectFolderExistError(path) {
    return new teamsfx_api_1.UserError("ProjectFolderExistError", `Path ${path} already exists. Select a different folder.`, exports.CoreSource);
}
exports.ProjectFolderExistError = ProjectFolderExistError;
function ProjectFolderNotExistError(path) {
    return new teamsfx_api_1.UserError("ProjectFolderNotExistError", `Path ${path} does not exist. Select a different folder.`, exports.CoreSource);
}
exports.ProjectFolderNotExistError = ProjectFolderNotExistError;
function ProjectFolderInvalidError(path) {
    return new teamsfx_api_1.UserError("ProjectFolderInvalidError", `Path ${path} is invalid, please set valid root folder in user settings(Use absolute directory or relative directory start with \${homeDir} ).`, exports.CoreSource);
}
exports.ProjectFolderInvalidError = ProjectFolderInvalidError;
function ArchiveUserFileError(path, reason) {
    return new teamsfx_api_1.UserError("ArchiveUserFileError", `Failed to archive path '${path}'. ${reason}. You can refer to .archive.log which provides detailed information about the archive process.`, exports.CoreSource);
}
exports.ArchiveUserFileError = ArchiveUserFileError;
function ArchiveProjectError(reason) {
    return new teamsfx_api_1.UserError("ArchiveProjectError", `Failed to archive the project. ${reason}. You can refer to .archive.log which provides detailed information about the archive process.`, exports.CoreSource);
}
exports.ArchiveProjectError = ArchiveProjectError;
function EmptyProjectFolderError() {
    return new teamsfx_api_1.SystemError("EmptyProjectFolderError", "Project path is empty", exports.CoreSource);
}
exports.EmptyProjectFolderError = EmptyProjectFolderError;
function MigrateNotImplementError(path) {
    return new teamsfx_api_1.SystemError("MigrateNotImplemented", `Migrate V1 Project is not implemented.`, exports.CoreSource);
}
exports.MigrateNotImplementError = MigrateNotImplementError;
function WriteFileError(e) {
    return new teamsfx_api_1.SystemError(e, exports.CoreSource, "WriteFileError");
}
exports.WriteFileError = WriteFileError;
function ReadFileError(e) {
    return new teamsfx_api_1.SystemError(e, exports.CoreSource, "ReadFileError");
}
exports.ReadFileError = ReadFileError;
function CopyFileError(e) {
    return new teamsfx_api_1.SystemError(e, exports.CoreSource, "CopyFileError");
}
exports.CopyFileError = CopyFileError;
function NoneFxError(e) {
    const err = teamsfx_api_1.assembleError(e);
    err.name = "NoneFxError";
    return err;
}
exports.NoneFxError = NoneFxError;
function NoProjectOpenedError() {
    return new teamsfx_api_1.UserError("NoProjectOpened", "No project opened, you can create a new project or open an existing one.", exports.CoreSource);
}
exports.NoProjectOpenedError = NoProjectOpenedError;
function InvalidV1ProjectError(message) {
    return new teamsfx_api_1.UserError("InvalidV1Project", `The project is not a valid Teams Toolkit V1 project. ${message}`, exports.CoreSource);
}
exports.InvalidV1ProjectError = InvalidV1ProjectError;
function V1ProjectNotSupportedError(message) {
    return new teamsfx_api_1.UserError("V1ProjectNotSupported", `Command is not supported in the project migrated from Teams Toolkit V1`, exports.CoreSource);
}
exports.V1ProjectNotSupportedError = V1ProjectNotSupportedError;
function PathNotExistError(path) {
    return new teamsfx_api_1.UserError("PathNotExist", `The path not exist: ${path}`, exports.CoreSource);
}
exports.PathNotExistError = PathNotExistError;
function InvalidProjectError(msg) {
    return new teamsfx_api_1.UserError("InvalidProject", `The command only works for project created by Teams Toolkit. ${msg ? ": " + msg : ""}`, exports.CoreSource);
}
exports.InvalidProjectError = InvalidProjectError;
function InvalidProjectSettingsFileError(msg) {
    return new teamsfx_api_1.UserError("InvalidProjectSettingsFile", `The projectSettings.json file is corrupted.`, exports.CoreSource);
}
exports.InvalidProjectSettingsFileError = InvalidProjectSettingsFileError;
class TaskNotSupportError extends teamsfx_api_1.SystemError {
    constructor(task) {
        super(new.target.name, `Task is not supported yet: ${task}`, exports.CoreSource);
    }
}
exports.TaskNotSupportError = TaskNotSupportError;
function FetchSampleError(sampleId) {
    return new teamsfx_api_1.UserError("FetchSampleError", `Failed to get data from remote repository for ${sampleId}`, exports.CoreSource);
}
exports.FetchSampleError = FetchSampleError;
function InvalidInputError(reason, inputs) {
    return new teamsfx_api_1.UserError("InvalidInput", inputs
        ? `Invalid inputs: ${reason}, inputs: ${JSON.stringify(inputs)}`
        : `Invalid inputs: ${reason}`, exports.CoreSource);
}
exports.InvalidInputError = InvalidInputError;
function FunctionRouterError(func) {
    return new teamsfx_api_1.UserError("FunctionRouterError", `Failed to route function call:${JSON.stringify(func)}`, exports.CoreSource);
}
exports.FunctionRouterError = FunctionRouterError;
function ContextUpgradeError(error, isUserError = false) {
    if (isUserError) {
        return new teamsfx_api_1.UserError("ContextUpgradeError", `Failed to update context: ${error.message}`, exports.CoreSource, undefined, error);
    }
    else {
        return new teamsfx_api_1.SystemError("ContextUpgradeError", `Failed to update context: ${error.message}`, exports.CoreSource, undefined, error);
    }
}
exports.ContextUpgradeError = ContextUpgradeError;
function InvalidStateError(pluginName, state) {
    return new teamsfx_api_1.SystemError(exports.CoreSource, "InvalidProfileError", `Plugin ${pluginName}'s state(${JSON.stringify(state)}) is invalid`);
}
exports.InvalidStateError = InvalidStateError;
function PluginHasNoTaskImpl(pluginName, task) {
    return new teamsfx_api_1.SystemError("PluginHasNoTaskImplError", `Plugin ${pluginName} has not implemented method: ${task}`, exports.CoreSource);
}
exports.PluginHasNoTaskImpl = PluginHasNoTaskImpl;
function ProjectSettingsUndefinedError() {
    return new teamsfx_api_1.SystemError("ProjectSettingsUndefinedError", "Project settings is undefined", exports.CoreSource);
}
exports.ProjectSettingsUndefinedError = ProjectSettingsUndefinedError;
function MultipleEnvNotEnabledError() {
    return new teamsfx_api_1.SystemError("MultipleEnvNotEnabledError", "MultipleEnv feature is not enabled", exports.CoreSource);
}
exports.MultipleEnvNotEnabledError = MultipleEnvNotEnabledError;
function ProjectEnvNotExistError(env) {
    return new teamsfx_api_1.UserError("ProjectEnvNotExistError", `Environment ${env} not found. Make sure the config.${env}.json file exist.`, exports.CoreSource);
}
exports.ProjectEnvNotExistError = ProjectEnvNotExistError;
function InvalidEnvNameError() {
    return new teamsfx_api_1.UserError("InvalidEnvNameError", `Environment name can only contain letters, digits, _ and -.`, exports.CoreSource);
}
exports.InvalidEnvNameError = InvalidEnvNameError;
function ProjectEnvAlreadyExistError(env) {
    return new teamsfx_api_1.UserError("ProjectEnvAlreadyExistError", `Project environment ${env} already exists.`, exports.CoreSource);
}
exports.ProjectEnvAlreadyExistError = ProjectEnvAlreadyExistError;
function InvalidEnvConfigError(env, errorMsg) {
    return new teamsfx_api_1.UserError("InvalidEnvConfigError", `The configuration ${teamsfx_api_1.EnvConfigFileNameTemplate.replace(teamsfx_api_1.EnvNamePlaceholder, env)} is invalid, details: ${errorMsg}.`, exports.CoreSource);
}
exports.InvalidEnvConfigError = InvalidEnvConfigError;
function NonExistEnvNameError(env) {
    return new teamsfx_api_1.UserError("NonExistEnvNameError", `Can not find environment ${env}.`, exports.CoreSource);
}
exports.NonExistEnvNameError = NonExistEnvNameError;
function ModifiedSecretError() {
    return new teamsfx_api_1.UserError("ModifiedSecretError", "The secret file has been changed.", exports.CoreSource);
}
exports.ModifiedSecretError = ModifiedSecretError;
class LoadSolutionError extends teamsfx_api_1.SystemError {
    constructor() {
        super(new.target.name, "Failed to load solution", exports.CoreSource);
    }
}
exports.LoadSolutionError = LoadSolutionError;
class NotImplementedError extends teamsfx_api_1.SystemError {
    constructor(method) {
        super(new.target.name, `Method not implemented:${method}`, exports.CoreSource);
    }
}
exports.NotImplementedError = NotImplementedError;
class ObjectIsUndefinedError extends teamsfx_api_1.SystemError {
    constructor(name) {
        super(new.target.name, `Object ${name} is undefined, which is not expected`, exports.CoreSource);
    }
}
exports.ObjectIsUndefinedError = ObjectIsUndefinedError;
function SolutionConfigError() {
    return new teamsfx_api_1.UserError("SolutionConfigError", "Load solution context failed.", exports.CoreSource);
}
exports.SolutionConfigError = SolutionConfigError;
function ProjectSettingError() {
    return new teamsfx_api_1.UserError("ProjectSettingError", "Load project settings failed.", exports.CoreSource);
}
exports.ProjectSettingError = ProjectSettingError;
function UpgradeCanceledError() {
    return new teamsfx_api_1.UserError(
    // @see tools.isUserCancelError()
    "UserCancel", "If you don't want to upgrade your project, please install another version of Teams Toolkit (version <= 2.10.0).", exports.CoreSource);
}
exports.UpgradeCanceledError = UpgradeCanceledError;
function NotJsonError(err) {
    return new teamsfx_api_1.UserError(err, exports.CoreSource, "NotJsonError");
}
exports.NotJsonError = NotJsonError;
function FailedToParseResourceIdError(name, resourceId) {
    return new teamsfx_api_1.UserError("FailedToParseResourceIdError", `Failed to get '${name}' from resource id: '${resourceId}'`, exports.CoreSource);
}
exports.FailedToParseResourceIdError = FailedToParseResourceIdError;
function SPFxConfigError(file) {
    return new teamsfx_api_1.UserError("SPFxConfigError", `Load SPFx config ${file} failed.`, exports.CoreSource);
}
exports.SPFxConfigError = SPFxConfigError;
//# sourceMappingURL=error.js.map