import { Func, FxError, Inputs, SystemError, UserError, Json } from "@microsoft/teamsfx-api";
export declare const CoreSource = "Core";
export declare function ProjectFolderExistError(path: string): UserError;
export declare function ProjectFolderNotExistError(path: string): UserError;
export declare function ProjectFolderInvalidError(path: string): UserError;
export declare function ArchiveUserFileError(path: string, reason: string): UserError;
export declare function ArchiveProjectError(reason: string): UserError;
export declare function EmptyProjectFolderError(): SystemError;
export declare function MigrateNotImplementError(path: string): SystemError;
export declare function WriteFileError(e: Error): SystemError;
export declare function ReadFileError(e: Error): SystemError;
export declare function CopyFileError(e: Error): SystemError;
export declare function NoneFxError(e: any): FxError;
export declare function NoProjectOpenedError(): UserError;
export declare function InvalidV1ProjectError(message?: string): UserError;
export declare function V1ProjectNotSupportedError(message?: string): UserError;
export declare function PathNotExistError(path: string): UserError;
export declare function InvalidProjectError(msg?: string): UserError;
export declare function InvalidProjectSettingsFileError(msg?: string): UserError;
export declare class TaskNotSupportError extends SystemError {
    constructor(task: string);
}
export declare function FetchSampleError(sampleId: string): UserError;
export declare function InvalidInputError(reason: string, inputs?: Inputs): UserError;
export declare function FunctionRouterError(func: Func): UserError;
export declare function ContextUpgradeError(error: any, isUserError?: boolean): FxError;
export declare function InvalidStateError(pluginName: string, state: Json): SystemError;
export declare function PluginHasNoTaskImpl(pluginName: string, task: string): SystemError;
export declare function ProjectSettingsUndefinedError(): SystemError;
export declare function MultipleEnvNotEnabledError(): SystemError;
export declare function ProjectEnvNotExistError(env: string): UserError;
export declare function InvalidEnvNameError(): UserError;
export declare function ProjectEnvAlreadyExistError(env: string): FxError;
export declare function InvalidEnvConfigError(env: string, errorMsg: string): UserError;
export declare function NonExistEnvNameError(env: string): UserError;
export declare function ModifiedSecretError(): UserError;
export declare class LoadSolutionError extends SystemError {
    constructor();
}
export declare class NotImplementedError extends SystemError {
    constructor(method: string);
}
export declare class ObjectIsUndefinedError extends SystemError {
    constructor(name: string);
}
export declare function SolutionConfigError(): UserError;
export declare function ProjectSettingError(): UserError;
export declare function UpgradeCanceledError(): UserError;
export declare function NotJsonError(err: Error): UserError;
export declare function FailedToParseResourceIdError(name: string, resourceId: string): UserError;
export declare function SPFxConfigError(file: string): UserError;
//# sourceMappingURL=error.d.ts.map