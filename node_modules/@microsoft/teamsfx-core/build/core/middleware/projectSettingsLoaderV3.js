"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectSettingsPath = exports.ProjectSettingsLoaderMW_V3 = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const uuid = tslib_1.__importStar(require("uuid"));
const __1 = require("..");
const fileUtils_1 = require("../../common/fileUtils");
const crypto_1 = require("../crypto");
const error_1 = require("../error");
const tools_1 = require("../tools");
const ProjectSettingsLoaderMW_V3 = async (ctx, next) => {
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    if (!inputs.projectPath) {
        ctx.result = teamsfx_api_1.err(error_1.NoProjectOpenedError());
        return;
    }
    const projectPathExist = await fs.pathExists(inputs.projectPath);
    if (!projectPathExist) {
        ctx.result = teamsfx_api_1.err(error_1.PathNotExistError(inputs.projectPath));
        return;
    }
    const settingsFile = getProjectSettingsPath(inputs.projectPath);
    const projectSettings = await fileUtils_1.readJson(settingsFile);
    if (!projectSettings.projectId) {
        projectSettings.projectId = uuid.v4();
    }
    const validRes = tools_1.validateSettings(projectSettings);
    if (validRes) {
        ctx.result = teamsfx_api_1.err(error_1.InvalidProjectError(validRes));
        return;
    }
    ctx.projectSettings = projectSettings;
    ctx.self.isFromSample = projectSettings.isFromSample === true;
    ctx.self.settingsVersion = projectSettings.version;
    __1.TOOLS.cryptoProvider = new crypto_1.LocalCrypto(projectSettings.projectId);
    ctx.contextV2 = __1.createV2Context(projectSettings);
    await next();
};
exports.ProjectSettingsLoaderMW_V3 = ProjectSettingsLoaderMW_V3;
function getProjectSettingsPath(projectPath) {
    return path.resolve(projectPath, `.${teamsfx_api_1.ConfigFolderName}`, teamsfx_api_1.InputConfigsFolderName, teamsfx_api_1.ProjectSettingsFileName);
}
exports.getProjectSettingsPath = getProjectSettingsPath;
//# sourceMappingURL=projectSettingsLoaderV3.js.map