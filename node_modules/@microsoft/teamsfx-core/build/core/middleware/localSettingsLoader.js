"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalSettingsLoaderMW = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const __1 = require("..");
const localSettingsProvider_1 = require("../../common/localSettingsProvider");
const constants_1 = require("../../plugins/solution/fx-solution/constants");
const ResourcePluginContainer_1 = require("../../plugins/solution/fx-solution/ResourcePluginContainer");
const error_1 = require("../error");
const projectSettingsLoader_1 = require("./projectSettingsLoader");
const LocalSettingsLoaderMW = async (ctx, next) => {
    var _a;
    if (!projectSettingsLoader_1.shouldIgnored(ctx)) {
        const inputs = ctx.arguments[ctx.arguments.length - 1];
        if (!inputs.projectPath) {
            ctx.result = teamsfx_api_1.err(__1.NoProjectOpenedError());
            return;
        }
        const projectPathExist = await fs.pathExists(inputs.projectPath);
        if (!projectPathExist) {
            ctx.result = teamsfx_api_1.err(__1.PathNotExistError(inputs.projectPath));
            return;
        }
        if (!ctx.projectSettings) {
            ctx.result = teamsfx_api_1.err(new error_1.ObjectIsUndefinedError("projectSettings"));
            return;
        }
        const solutionSettings = ctx.projectSettings.solutionSettings;
        const selectedPlugins = ResourcePluginContainer_1.getActivatedResourcePlugins(solutionSettings);
        const hasFrontend = selectedPlugins === null || selectedPlugins === void 0 ? void 0 : selectedPlugins.some((plugin) => plugin.name === constants_1.PluginNames.FE);
        const hasBackend = selectedPlugins === null || selectedPlugins === void 0 ? void 0 : selectedPlugins.some((plugin) => plugin.name === constants_1.PluginNames.FUNC);
        const hasBot = selectedPlugins === null || selectedPlugins === void 0 ? void 0 : selectedPlugins.some((plugin) => plugin.name === constants_1.PluginNames.BOT);
        const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(inputs.projectPath);
        let exists = await fs.pathExists(localSettingsProvider.localSettingsFilePath);
        if (exists) {
            const localSettings = await fs.readJson(localSettingsProvider.localSettingsFilePath);
            if (!localSettings || Object.keys(localSettings).length === 0) {
                // for empty localSettings.json file, we still need to re-init it!
                exists = false;
            }
        }
        //load two versions to make sure compatible
        if (exists) {
            ctx.localSettings = await localSettingsProvider.loadV2((_a = ctx.contextV2) === null || _a === void 0 ? void 0 : _a.cryptoProvider);
        }
        else {
            ctx.localSettings = localSettingsProvider.initV2(hasFrontend, hasBackend, hasBot);
        }
        if (ctx.solutionContext) {
            if (exists) {
                ctx.solutionContext.localSettings = await localSettingsProvider.load(ctx.solutionContext.cryptoProvider);
            }
            else {
                ctx.solutionContext.localSettings = localSettingsProvider.init(hasFrontend, hasBackend, hasBot);
            }
        }
    }
    await next();
};
exports.LocalSettingsLoaderMW = LocalSettingsLoaderMW;
//# sourceMappingURL=localSettingsLoader.js.map