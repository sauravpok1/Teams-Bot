// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalSettingsWriterMW = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const __1 = require("..");
const localSettingsProvider_1 = require("../../common/localSettingsProvider");
const projectSettingsLoader_1 = require("./projectSettingsLoader");
/**
 * This middleware will help to persist local settings if necessary.
 */
const LocalSettingsWriterMW = async (ctx, next) => {
    var _a;
    await next();
    if (!projectSettingsLoader_1.shouldIgnored(ctx)) {
        const lastArg = ctx.arguments[ctx.arguments.length - 1];
        const inputs = lastArg === ctx ? ctx.arguments[ctx.arguments.length - 2] : lastArg;
        if (!inputs.projectPath ||
            inputs.ignoreConfigPersist === true ||
            teamsfx_api_1.StaticPlatforms.includes(inputs.platform))
            return;
        const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(inputs.projectPath);
        if (ctx.localSettings === undefined)
            return;
        // persistent localSettings.json.
        await localSettingsProvider.saveJson(ctx.localSettings, (_a = ctx.contextV2) === null || _a === void 0 ? void 0 : _a.cryptoProvider);
        __1.TOOLS.logProvider.debug(`[core] persist local settings config file: ${localSettingsProvider.localSettingsFilePath}`);
    }
};
exports.LocalSettingsWriterMW = LocalSettingsWriterMW;
//# sourceMappingURL=localSettingsWriter.js.map