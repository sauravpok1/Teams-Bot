"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldIgnored = exports.newSolutionContext = exports.loadProjectSettings = exports.ProjectSettingsLoaderMW = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const uuid = tslib_1.__importStar(require("uuid"));
const __1 = require("..");
const fileUtils_1 = require("../../common/fileUtils");
const constants_1 = require("../../plugins/solution/fx-solution/constants");
const crypto_1 = require("../crypto");
const error_1 = require("../error");
const permissionRequest_1 = require("../permissionRequest");
const tools_1 = require("../tools");
const ProjectSettingsLoaderMW = async (ctx, next) => {
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    if (!shouldIgnored(ctx)) {
        if (!inputs.projectPath) {
            ctx.result = teamsfx_api_1.err(error_1.NoProjectOpenedError());
            return;
        }
        const projectPathExist = await fs.pathExists(inputs.projectPath);
        if (!projectPathExist) {
            ctx.result = teamsfx_api_1.err(error_1.PathNotExistError(inputs.projectPath));
            return;
        }
        const loadRes = await loadProjectSettings(inputs, true);
        if (loadRes.isErr()) {
            ctx.result = teamsfx_api_1.err(loadRes.error);
            return;
        }
        const projectSettings = loadRes.value;
        const validRes = tools_1.validateSettings(projectSettings);
        if (validRes) {
            ctx.result = teamsfx_api_1.err(error_1.InvalidProjectError(validRes));
            return;
        }
        ctx.projectSettings = projectSettings;
        ctx.self.isFromSample = projectSettings.isFromSample === true;
        ctx.self.settingsVersion = projectSettings.version;
        ctx.self.tools.cryptoProvider = new crypto_1.LocalCrypto(projectSettings.projectId);
        ctx.contextV2 = __1.createV2Context(projectSettings);
    }
    await next();
};
exports.ProjectSettingsLoaderMW = ProjectSettingsLoaderMW;
async function loadProjectSettings(inputs, isMultiEnvEnabled = false) {
    try {
        if (!inputs.projectPath) {
            return teamsfx_api_1.err(error_1.NoProjectOpenedError());
        }
        const confFolderPath = path.resolve(inputs.projectPath, `.${teamsfx_api_1.ConfigFolderName}`);
        const settingsFile = isMultiEnvEnabled
            ? path.resolve(confFolderPath, teamsfx_api_1.InputConfigsFolderName, teamsfx_api_1.ProjectSettingsFileName)
            : path.resolve(confFolderPath, "settings.json");
        const projectSettings = await fileUtils_1.readJson(settingsFile);
        if (!projectSettings.projectId) {
            projectSettings.projectId = uuid.v4();
        }
        if (projectSettings.solutionSettings &&
            projectSettings.solutionSettings.activeResourcePlugins &&
            !projectSettings.solutionSettings.activeResourcePlugins.includes(constants_1.PluginNames.APPST)) {
            projectSettings.solutionSettings.activeResourcePlugins.push(constants_1.PluginNames.APPST);
        }
        return teamsfx_api_1.ok(projectSettings);
    }
    catch (e) {
        return teamsfx_api_1.err(error_1.ReadFileError(e));
    }
}
exports.loadProjectSettings = loadProjectSettings;
async function newSolutionContext(tools, inputs) {
    const projectSettings = {
        appName: "",
        programmingLanguage: "",
        projectId: uuid.v4(),
        solutionSettings: {
            name: "fx-solution-azure",
            version: "1.0.0",
        },
    };
    const solutionContext = Object.assign(Object.assign(Object.assign({ projectSettings: projectSettings, envInfo: tools_1.newEnvInfo(), root: inputs.projectPath || "" }, tools), tools.tokenProvider), { answers: inputs, cryptoProvider: new crypto_1.LocalCrypto(projectSettings.projectId), permissionRequestProvider: inputs.projectPath
            ? new permissionRequest_1.PermissionRequestFileProvider(inputs.projectPath)
            : undefined });
    return solutionContext;
}
exports.newSolutionContext = newSolutionContext;
function shouldIgnored(ctx) {
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    const method = ctx.method;
    let isCreate = false;
    if (method === "getQuestions") {
        const task = ctx.arguments[0];
        isCreate = task === teamsfx_api_1.Stage.create;
    }
    return teamsfx_api_1.StaticPlatforms.includes(inputs.platform) || isCreate;
}
exports.shouldIgnored = shouldIgnored;
//# sourceMappingURL=projectSettingsLoader.js.map