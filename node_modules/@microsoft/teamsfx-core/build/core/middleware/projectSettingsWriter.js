// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectSettingsWriterMW = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const __1 = require("..");
const error_1 = require("../error");
const projectSettingsLoader_1 = require("./projectSettingsLoader");
/**
 * This middleware will help to persist project settings if necessary.
 */
const ProjectSettingsWriterMW = async (ctx, next) => {
    await next();
    if (!projectSettingsLoader_1.shouldIgnored(ctx)) {
        const lastArg = ctx.arguments[ctx.arguments.length - 1];
        const inputs = lastArg === ctx ? ctx.arguments[ctx.arguments.length - 2] : lastArg;
        if (!inputs.projectPath ||
            inputs.ignoreConfigPersist === true ||
            teamsfx_api_1.StaticPlatforms.includes(inputs.platform))
            return;
        const projectSettings = ctx.projectSettings;
        if (projectSettings === undefined)
            return;
        try {
            const confFolderPath = path.resolve(inputs.projectPath, `.${teamsfx_api_1.ConfigFolderName}`);
            const solutionSettings = projectSettings.solutionSettings;
            if (!solutionSettings.activeResourcePlugins)
                solutionSettings.activeResourcePlugins = [];
            if (!solutionSettings.azureResources)
                solutionSettings.azureResources = [];
            const confFolderPathNew = path.resolve(confFolderPath, teamsfx_api_1.InputConfigsFolderName);
            await fs.ensureDir(confFolderPathNew);
            const settingFile = path.resolve(confFolderPathNew, teamsfx_api_1.ProjectSettingsFileName);
            await fs.writeFile(settingFile, JSON.stringify(projectSettings, null, 4));
            __1.TOOLS === null || __1.TOOLS === void 0 ? void 0 : __1.TOOLS.logProvider.debug(`[core] persist project setting file: ${settingFile}`);
        }
        catch (e) {
            if (ctx.result.isOk()) {
                ctx.result = teamsfx_api_1.err(error_1.WriteFileError(e));
            }
        }
    }
};
exports.ProjectSettingsWriterMW = ProjectSettingsWriterMW;
//# sourceMappingURL=projectSettingsWriter.js.map