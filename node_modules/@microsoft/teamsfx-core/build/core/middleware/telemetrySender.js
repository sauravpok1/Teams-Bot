// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetrySenderMW = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const telemetry_1 = require("../../common/telemetry");
/**
 * Telemetry sender
 */
const TelemetrySenderMW = async (ctx, next) => {
    var _a, _b;
    const core = ctx.self;
    const inputs = ctx.arguments[ctx.arguments.length - 1];
    const solutionContext = ctx.solutionContext;
    const appId = (_a = solutionContext === null || solutionContext === void 0 ? void 0 : solutionContext.envInfo.state.get("solution")) === null || _a === void 0 ? void 0 : _a.get("remoteTeamsAppId");
    const properties = { module: "fx-core" };
    if (appId)
        properties[telemetry_1.TelemetryProperty.AppId] = appId;
    const correlationId = inputs.correlationId === undefined ? "" : inputs.correlationId;
    properties[telemetry_1.TelemetryProperty.CorrelationId] = correlationId;
    const method = lodash_1.kebabCase(ctx.method);
    try {
        telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, method + "-start", properties);
        await next();
    }
    catch (e) {
        ctx.result = teamsfx_api_1.err(teamsfx_api_1.assembleError(e));
        throw e;
    }
    finally {
        if ((_b = ctx.result) === null || _b === void 0 ? void 0 : _b.isOk()) {
            properties[telemetry_1.TelemetryProperty.Success] = telemetry_1.TelemetrySuccess.Yes;
            telemetry_1.sendTelemetryEvent(telemetry_1.Component.core, method, properties);
        }
        else {
            telemetry_1.sendTelemetryErrorEvent(telemetry_1.Component.core, method, ctx.result.error, properties);
        }
    }
};
exports.TelemetrySenderMW = TelemetrySenderMW;
//# sourceMappingURL=telemetrySender.js.map