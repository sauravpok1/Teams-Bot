/// <reference types="node" />
import { AzureAccountProvider, ConfigMap, FxError, Json, Result, SubscriptionInfo, UserInteraction, ProjectSettings } from "@microsoft/teamsfx-api";
import { ExecOptions } from "child_process";
export declare const Executor: {
    execCommandAsync(command: string, options?: ExecOptions | undefined): Promise<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
};
export declare function npmInstall(path: string): Promise<void>;
export declare function ensureUniqueFolder(folderPath: string): Promise<string>;
/**
 * Convert a `Map` to a Json recursively.
 * @param {Map} map to convert.
 * @returns {Json} converted Json.
 */
export declare function mapToJson(map?: Map<any, any>): Json;
/**
 * Convert an `Object` to a Map recursively
 * @param {Json} Json to convert.
 * @returns {Map} converted Json.
 */
export declare function objectToMap(o: Json): Map<any, any>;
/**
 * @param {Json} Json to convert.
 * @returns {Map} converted Json.
 */
export declare function objectToConfigMap(o?: Json): ConfigMap;
export declare const CryptoDataMatchers: Set<string>;
export declare const AzurePortalUrl = "https://portal.azure.com";
/**
 * Only data related to secrets need encryption.
 * @param key - the key name of data in user data file
 * @returns whether it needs encryption
 */
export declare function dataNeedEncryption(key: string): boolean;
export declare function separateSecretData(configJson: Json): Record<string, string>;
export declare function convertDotenvToEmbeddedJson(dict: Record<string, string>): Json;
export declare function replaceTemplateWithUserData(template: string, userData: Record<string, string>): string;
export declare function serializeDict(dict: Record<string, string>): string;
export declare const deepCopy: <T>(target: T) => T;
export declare function getStrings(): any;
export declare function isUserCancelError(error: Error): boolean;
export declare function isCheckAccountError(error: Error): boolean;
export declare function askSubscription(azureAccountProvider: AzureAccountProvider, ui: UserInteraction, activeSubscriptionId?: string): Promise<Result<SubscriptionInfo, FxError>>;
export declare function getResourceGroupInPortal(subscriptionId?: string, tenantId?: string, resourceGroupName?: string): string | undefined;
export declare function isFeatureFlagEnabled(featureFlagName: string, defaultValue?: boolean): boolean;
/**
 * @deprecated Please DO NOT use this method any more, it will be removed in near future.
 */
export declare function isMultiEnvEnabled(): boolean;
/**
 * @deprecated Please DO NOT use this method any more, it will be removed in near future.
 */
export declare function isArmSupportEnabled(): boolean;
export declare function isBicepEnvCheckerEnabled(): boolean;
/**
 * @deprecated Please DO NOT use this method any more, it will be removed in near future.
 */
export declare function isRemoteCollaborateEnabled(): boolean;
export declare function getRootDirectory(): string;
export declare function generateBicepFromFile(templateFilePath: string, context: any): Promise<string>;
export declare function compileHandlebarsTemplateString(templateString: string, context: any): string;
export declare function getAppDirectory(projectRoot: string): Promise<string>;
/**
 * Get app studio endpoint for prod/int environment, mainly for ux e2e test
 */
export declare function getAppStudioEndpoint(): string;
export declare function copyFiles(srcPath: string, distPath: string, excludeFileList?: {
    fileName: string;
    recursive: boolean;
}[]): Promise<void>;
export declare function getStorageAccountNameFromResourceId(resourceId: string): string;
export declare function getSiteNameFromResourceId(resourceId: string): string;
export declare function getResourceGroupNameFromResourceId(resourceId: string): string;
export declare function getSubscriptionIdFromResourceId(resourceId: string): string;
export declare function parseFromResourceId(pattern: RegExp, resourceId: string): string;
export declare function waitSeconds(second: number): Promise<void>;
export declare function getUuid(): string;
export declare function isSPFxProject(projectSettings?: ProjectSettings): boolean;
export declare function getHashedEnv(envName: string): string;
export declare function IsSimpleAuthEnabled(projectSettings: ProjectSettings | undefined): boolean;
/** Redact user content in "obj";
 *
 * DFS "obj" and "jsonSchema" together to redact the following things:
 * - properties that is not defined in jsonSchema
 * - the value of properties that is defined in jsonSchema, but the keys will remain
 *
 * Example:
 * Input:
 * ```
 *  obj = {
 *    "name": "some name",
 *    "user defined property": {
 *      "key1": "value1"
 *    }
 *  }
 *  jsonSchema = {
 *    "type": "object",
 *    "properties": {
 *      "name": { "type": "string" }
 *    }
 *  }
 * ```
 * Output:
 * ```
 *  {"name": null}
 * ```
 **/
export declare function redactObject(obj: unknown, jsonSchema: unknown, maxRecursionDepth?: number): unknown;
export declare function getAllowedAppIds(): string[];
//# sourceMappingURL=tools.d.ts.map