"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalStateUpdate = exports.globalStateGet = void 0;
const tslib_1 = require("tslib");
const os = tslib_1.__importStar(require("os"));
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const GlobalStateFileName = "state.json";
/**
 * Return a value.
 *
 * @param key A string.
 * @return The stored value or `undefined`.
 */
function globalStateGet(key, defaultValue) {
    const filePath = getGlobalStateFile();
    ensureGlobalStateFileExists(filePath);
    const config = fs.readJSONSync(filePath);
    let value = config[key];
    if (value === undefined) {
        value = defaultValue;
    }
    return value;
}
exports.globalStateGet = globalStateGet;
/**
 * Store a value. The value must be JSON-stringifyable.
 *
 * @param key A string.
 * @param value A value. MUST not contain cyclic references.
 */
async function globalStateUpdate(key, value) {
    const filePath = getGlobalStateFile();
    ensureGlobalStateFileExists(filePath);
    const config = await fs.readJSON(filePath);
    config[key] = value;
    await fs.writeJson(filePath, config);
}
exports.globalStateUpdate = globalStateUpdate;
function getGlobalStateFile() {
    const homeDir = os.homedir();
    return path.join(homeDir, `.${teamsfx_api_1.ConfigFolderName}`, GlobalStateFileName);
}
function ensureGlobalStateFileExists(filePath) {
    if (!fs.pathExistsSync(path.dirname(filePath))) {
        fs.mkdirpSync(path.dirname(filePath));
    }
    if (!fs.existsSync(filePath)) {
        fs.writeJSONSync(filePath, {});
    }
}
//# sourceMappingURL=globalState.js.map