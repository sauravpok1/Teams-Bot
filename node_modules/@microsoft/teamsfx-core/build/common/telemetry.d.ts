import { FxError } from "@microsoft/teamsfx-api";
export declare enum TelemetryProperty {
    TriggerFrom = "trigger-from",
    Component = "component",
    AppId = "appid",
    Success = "success",
    ErrorType = "error-type",
    ErrorCode = "error-code",
    ErrorMessage = "error-message",
    SampleAppName = "sample-app-name",
    ProjectId = "project-id",
    CorrelationId = "correlation-id",
    Env = "env",
    CustomizeResourceGroupType = "customize-resource-group-type",
    EnvConfig = "env-config",
    Status = "status",
    HostType = "hostType",
    AzureResources = "azure-resources",
    Capabilities = "capabilities",
    ActivePlugins = "active-plugins"
}
export declare enum TelemetryEvent {
    DownloadSampleStart = "download-sample-start",
    DownloadSample = "download-sample",
    ProjectUpgrade = "project-upgrade",
    ProjectUpgradeStart = "project-upgrade-start",
    ReadJson = "read-json",
    DecryptUserdata = "decrypt-userdata",
    CheckResourceGroupStart = "check-resource-group-start",
    CheckResourceGroup = "check-resource-group",
    EnvConfig = "env-config",
    ProjectMigratorNotificationStart = "project-migrator-notification-start",
    ProjectMigratorNotification = "project-migrator-notification",
    ProjectMigratorMigrateStart = "project-migrator-migrate-start",
    ProjectMigratorMigrate = "project-migrator-migrate",
    ProjectMigratorMigrateArmStart = "project-migrator-migrate-arm-start",
    ProjectMigratorMigrateArm = "project-migrator-migrate-arm",
    ProjectMigratorMigrateMultiEnvStart = "project-migrator-migrate-multi-env-start",
    ProjectMigratorMigrateMultiEnv = "project-migrator-migrate-multi-env",
    ProjectMigratorGuideStart = "project-migrator-guide-start",
    ProjectMigratorGuide = "project-migrator-guide",
    ProjectMigratorPrecheckFailed = "project-migrator-pre-check-failed",
    ProjectMigratorError = "project-migrator-error"
}
export declare enum TelemetrySuccess {
    Yes = "yes",
    No = "no"
}
export declare enum TelemetryErrorType {
    UserError = "user",
    SystemError = "system"
}
export declare enum Component {
    vsc = "extension",
    cli = "cli",
    vs = "vs",
    core = "core",
    solution = "solution"
}
export declare enum CustomizeResourceGroupType {
    CommandLine = "command-line",
    EnvConfig = "env-config",
    EnvState = "env-state",
    InteractiveCreateDefault = "interactive-create-default",
    InteractiveCreateCustomized = "interactive-create-customized",
    InteractiveUseExisting = "interactive-use-existing",
    FallbackDefault = "fallback-default"
}
export declare enum ProjectMigratorStatus {
    OK = "ok",
    Cancel = "cancel"
}
export declare enum ProjectMigratorGuideStatus {
    Reload = "reload",
    LearnMore = "learn-more",
    Cancel = "cancel"
}
export declare function sendTelemetryEvent(component: string, eventName: string, properties?: {
    [p: string]: string;
}, measurements?: {
    [p: string]: number;
}): void;
export declare function sendTelemetryErrorEvent(component: string, eventName: string, fxError: FxError, properties?: {
    [p: string]: string;
}): void;
//# sourceMappingURL=telemetry.d.ts.map