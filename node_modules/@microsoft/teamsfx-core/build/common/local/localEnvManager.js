// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalEnvManager = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const localSettingsHelper_1 = require("./localSettingsHelper");
const localSettingsProvider_1 = require("../localSettingsProvider");
const npmLogHelper_1 = require("./npmLogHelper");
const portChecker_1 = require("./portChecker");
const tools_1 = require("../tools");
const crypto_1 = require("../../core/crypto");
const error_1 = require("../../core/error");
class LocalEnvManager {
    constructor(logger, telemetry) {
        this.logger = logger;
        this.telemetry = telemetry;
    }
    async getLocalDebugEnvs(projectPath, projectSettings, localSettings) {
        return await localSettingsHelper_1.convertToLocalEnvs(projectPath, projectSettings, localSettings, this.logger);
    }
    async getNpmInstallLogInfo() {
        return await npmLogHelper_1.getNpmInstallLogInfo();
    }
    async getPortsInUse(projectPath, projectSettings) {
        return await portChecker_1.getPortsInUse(projectPath, projectSettings);
    }
    async getLocalSettings(projectPath, cryptoOption) {
        const localSettingsProvider = new localSettingsProvider_1.LocalSettingsProvider(projectPath);
        const crypto = cryptoOption === undefined ? undefined : new crypto_1.LocalCrypto(cryptoOption.projectId);
        return await this.retry(async () => {
            return await localSettingsProvider.loadV2(crypto);
        });
    }
    async getProjectSettings(projectPath) {
        return await this.retry(async () => {
            const projectSettingsPath = path.resolve(projectPath, `.${teamsfx_api_1.ConfigFolderName}`, teamsfx_api_1.InputConfigsFolderName, teamsfx_api_1.ProjectSettingsFileName);
            if (!(await fs.pathExists(projectSettingsPath))) {
                throw new teamsfx_api_1.UserError("FileNotFoundError", `Project settings file does not exist: ${projectSettingsPath}`, error_1.CoreSource);
            }
            try {
                return await fs.readJson(projectSettingsPath);
            }
            catch (error) {
                throw error_1.ReadFileError(error);
            }
        });
    }
    // Retry logic when reading project config files in case of read-write conflict
    async retry(func) {
        let n = 0;
        let error = undefined;
        while (n <= 2) {
            if (n !== 0) {
                await tools_1.waitSeconds(n);
            }
            try {
                return await func(n);
            }
            catch (e) {
                error = e;
                ++n;
            }
        }
        throw error;
    }
}
exports.LocalEnvManager = LocalEnvManager;
//# sourceMappingURL=localEnvManager.js.map