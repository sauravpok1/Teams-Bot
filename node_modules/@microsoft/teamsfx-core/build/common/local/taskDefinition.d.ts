export interface ITaskDefinition {
    name: string;
    command: string;
    cwd: string | undefined;
    isBackground: boolean;
    execOptions: {
        needShell: boolean;
        needCmd?: boolean;
    };
    args?: string[];
    env?: {
        [key: string]: string;
    };
}
export declare class NpmTaskDefinition {
    private static command;
    private static nameSuffix;
    static frontend(workspaceFolder: string, isWatchTask: boolean): ITaskDefinition;
    static backend(workspaceFolder: string, isWatchTask: boolean, funcBinFolders: string[] | undefined): ITaskDefinition;
    static bot(workspaceFolder: string, isWatchTask: boolean): ITaskDefinition;
}
export declare class TaskDefinition {
    static frontendStart(workspaceFolder: string): ITaskDefinition;
    static backendStart(workspaceFolder: string, programmingLanguage: string | undefined, funcCommand: string, enableLanguageWorker: boolean): ITaskDefinition;
    static backendWatch(workspaceFolder: string): ITaskDefinition;
    static authStart(dotnetExecPath: string, authServicePath: string | undefined): ITaskDefinition;
    static botStart(workspaceFolder: string, programmingLanguage: string | undefined, enableInspect: boolean): ITaskDefinition;
    static ngrokStart(workspaceFolder: string, skipNgrok: boolean, ngrokBinFolder: string): ITaskDefinition;
    static frontendInstall(workspaceFolder: string): ITaskDefinition;
    static backendInstall(workspaceFolder: string): ITaskDefinition;
    static backendExtensionsInstall(workspaceFolder: string, dotnetExecPath: string): ITaskDefinition;
    static botInstall(workspaceFolder: string): ITaskDefinition;
    static spfxInstall(workspaceFolder: string): ITaskDefinition;
    static gulpCert(workspaceFolder: string): ITaskDefinition;
    static gulpServe(workspaceFolder: string): ITaskDefinition;
}
//# sourceMappingURL=taskDefinition.d.ts.map