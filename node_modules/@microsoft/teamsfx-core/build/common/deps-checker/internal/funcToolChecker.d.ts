import { Result } from "@microsoft/teamsfx-api";
import { DepsCheckerError } from "../depsError";
import { DepsLogger } from "../depsLogger";
import { DepsTelemetry } from "../depsTelemetry";
import { DepsInfo, DepsChecker } from "../depsChecker";
export declare enum FuncVersion {
    v1 = "1",
    v2 = "2",
    v3 = "3"
}
export declare class FuncToolChecker implements DepsChecker {
    private readonly _logger;
    private readonly _telemetry;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    getDepsInfo(): Promise<DepsInfo>;
    resolve(): Promise<Result<boolean, DepsCheckerError>>;
    isInstalled(): Promise<boolean>;
    isPortableFuncInstalled(): Promise<boolean>;
    isGlobalFuncInstalled(): Promise<boolean>;
    install(): Promise<void>;
    private handleInstallFuncFailed;
    private validate;
    private handleNpmNotFound;
    private static getDefaultInstallPath;
    private static getSentinelPath;
    private static getPortableFuncExecPath;
    command(): Promise<string>;
    getPortableFuncBinFolders(): string[];
    private queryFuncVersion;
    private queryGlobalFuncVersion;
    private hasNPM;
    private cleanup;
    private cleanupPortablePs1;
    private installFunc;
    private doInstallPortableFunc;
    private getExecCommand;
    private getFuncPSScriptPath;
}
export declare function mapToFuncToolsVersion(output: string): FuncVersion | null;
//# sourceMappingURL=funcToolChecker.d.ts.map