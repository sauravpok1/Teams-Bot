"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepsManager = void 0;
const depsChecker_1 = require("./depsChecker");
const checkerFactory_1 = require("./checkerFactory");
class DepsManager {
    constructor(logger, telemetry) {
        if (!logger) {
            throw Error("Logger is undefined.");
        }
        if (!telemetry) {
            throw Error("Logger is undefined.");
        }
        this._logger = logger;
        this._telemetry = telemetry;
    }
    /**
     * Ensure dependencies installed.
     * Installation Orders:
     *      Node, Dotnet, FuncCoreTools, Ngrok
     * @param dependencies Dependency types. If it is empty, do nothing.
     * @param options If fastFail is false, it will continue even if one of the dependencies fails to install. Default value is true.
     */
    async ensureDependencies(dependencies, { fastFail = true }) {
        if (!dependencies || dependencies.length == 0) {
            return [];
        }
        const orderedDeps = this.sortBySequence(dependencies, DepsManager._depsOrders);
        const result = [];
        let shouldInstall = true;
        for (const type of orderedDeps) {
            const status = await this.resolve(type, shouldInstall);
            result.push(status);
            if (fastFail && !status.isInstalled) {
                shouldInstall = false;
            }
        }
        return result;
    }
    async resolve(type, shouldInstall) {
        const checker = checkerFactory_1.CheckerFactory.createChecker(type, this._logger, this._telemetry);
        let isInstalled = false;
        let error = undefined;
        if (shouldInstall) {
            const result = await checker.resolve();
            isInstalled = result.isOk() && result.value;
            error = result.isErr() ? result.error : undefined;
        }
        const depsInfo = await checker.getDepsInfo();
        const binFolder = depsInfo.details.has("binFolder")
            ? depsInfo.details.get("binFolder")
            : undefined;
        return {
            name: depsInfo.name,
            type: type,
            isInstalled: isInstalled,
            command: await checker.command(),
            details: {
                isLinuxSupported: depsInfo.isLinuxSupported,
                supportedVersions: depsInfo.supportedVersions,
                binFolder: binFolder,
            },
            error: error,
        };
    }
    sortBySequence(dependencies, sequence) {
        return dependencies
            .filter((value) => value != null)
            .sort((a, b) => sequence.indexOf(a) - sequence.indexOf(b));
    }
}
exports.DepsManager = DepsManager;
DepsManager._depsOrders = [
    depsChecker_1.DepsType.AzureNode,
    depsChecker_1.DepsType.FunctionNode,
    depsChecker_1.DepsType.SpfxNode,
    depsChecker_1.DepsType.Dotnet,
    depsChecker_1.DepsType.FuncCoreTools,
    depsChecker_1.DepsType.Ngrok,
];
//# sourceMappingURL=depsManager.js.map