import { DepsLogger } from "./depsLogger";
import { DepsTelemetry } from "./depsTelemetry";
import { DepsType } from "./depsChecker";
import { DepsCheckerError } from "./depsError";
export declare type DepsOptions = {
    fastFail?: boolean;
};
export declare type DependencyStatus = {
    name: string;
    type: DepsType;
    isInstalled: boolean;
    command: string;
    details: {
        isLinuxSupported: boolean;
        supportedVersions: string[];
        binFolder?: string;
    };
    error?: DepsCheckerError;
};
export declare class DepsManager {
    private static readonly _depsOrders;
    private readonly _logger;
    private readonly _telemetry;
    constructor(logger: DepsLogger, telemetry: DepsTelemetry);
    /**
     * Ensure dependencies installed.
     * Installation Orders:
     *      Node, Dotnet, FuncCoreTools, Ngrok
     * @param dependencies Dependency types. If it is empty, do nothing.
     * @param options If fastFail is false, it will continue even if one of the dependencies fails to install. Default value is true.
     */
    ensureDependencies(dependencies: DepsType[], { fastFail }: DepsOptions): Promise<DependencyStatus[]>;
    private resolve;
    private sortBySequence;
}
//# sourceMappingURL=depsManager.d.ts.map